/* DO NOT EDIT THIS FILE - it is machine generated */
#ifdef _WINDOWS
#include "jni_w.h"
#else
#include "jni.h"
#endif
/* Header for class cheetah_core_net_drebapi_jni_DrebApiInterface */

#ifndef _Included_cheetah_core_net_drebapi_jni_DrebApiInterface
#define _Included_cheetah_core_net_drebapi_jni_DrebApiInterface


#ifdef __cplusplus
extern "C" {
#endif
	// 函数名: Java_BFDREBAPI_InitApi
	// 编程  : 王明松 2015-9-24 14:53:20
	// 返回  : jint   >=0成功 <0失败   成功则为实例的序号，下次使用要将序号传入
	// 参数  : JNIEnv *env  
	// 参数  : jobject jenv
	// 参数  : jstring strapixml
	// 描述  : 初始化api，读取配置文件，得到证书目录及网关地址端口
	JNIEXPORT jint JNICALL Java_cheetah_core_net_drebapi_jni_DrebApiInterface_drebApiInitApi(JNIEnv *env, jobject jenv, jstring strapixml);
	
	// 函数名: Java_BFDREBAPI_Free
	// 编程  : 王明松 2015-9-24 15:55:56
	// 返回  : void  
	// 参数  : JNIEnv *env
	// 参数  : jobject jenv
	// 参数  : jint apipoint  初始化返回的实例序号
	// 描述  : 程序退出释放资源
	JNIEXPORT void JNICALL Java_cheetah_core_net_drebapi_jni_DrebApiInterface_drebApiFree(JNIEnv *env, jobject jenv, jint apipoint);
	
	// 函数名: Java_BFDREBAPI_StartApi
	// 编程  : 王明松 2015-9-24 16:01:42
	// 返回  : jint  0成功 <0失败
	// 参数  : JNIEnv *env
	// 参数  : jobject jenv
	// 参数  : jint apipoint 初始化返回的实例序号
	// 描述  : 启动API
	JNIEXPORT jint JNICALL Java_cheetah_core_net_drebapi_jni_DrebApiInterface_drebApiStartApi(JNIEnv *env, jobject jenv, jint apipoint);
	
	// 函数名: Java_BFDREBAPI_StopApi
	// 编程  : 王明松 2015-9-24 16:03:53
	// 返回  : void JNICALL 
	// 参数  : JNIEnv *env
	// 参数  : jobject jenv
	// 参数  : jint apipoint 初始化返回的实例序号
	// 描述  : 停止API
	JNIEXPORT void JNICALL Java_cheetah_core_net_drebapi_jni_DrebApiInterface_drebApiStopApi(JNIEnv *env, jobject jenv, jint apipoint);
	
	// 函数名: Java_BFDREBAPI_MonitorApi
	// 编程  : 王明松 2015-9-24 16:07:05
	// 返回  : void JNICALL 
	// 参数  : JNIEnv *env
	// 参数  : jobject jenv
	// 参数  : jint apipoint 初始化返回的实例序号
	// 描述  : 监控API，若线程停止则启动
	JNIEXPORT void JNICALL Java_cheetah_core_net_drebapi_jni_DrebApiInterface_drebApiMonitorApi(JNIEnv *env, jobject jenv, jint apipoint);
	
	// 函数名: Java_BFDREBAPI_SendMsg
	// 编程  : 王明松 2015-9-24 16:05:17
	// 返回  : jint JNICALL 
	// 参数  : JNIEnv *env
	// 参数  : jobject jenv
	// 参数  : jint apipoint  初始化返回的实例序号
	// 参数  : jobject senddata  为java的类，要在这里转为DREBSAPI_COMMSTRU的结构
	// 描述  : 向总线上发送消息
	JNIEXPORT jint JNICALL Java_cheetah_core_net_drebapi_jni_DrebApiInterface_drebApiSendMsg(JNIEnv *env, jobject jenv, jint apipoint, jobject senddata);
	
	// 函数名: Java_BFDREBAPI_GetMsg
	// 编程  : 王明松 2015-9-24 16:28:11
	// 返回  : jint JNICALL 
	// 参数  : JNIEnv *env
	// 参数  : jobject jenv
	// 参数  : jint apipoint  初始化返回的实例序号
	// 参数  : jobject senddata  为java的类，要在这里将DREBSAPI_COMMSTRU的结构转为java类
	// 描述  : 从总线API队列里取出一条消息
	JNIEXPORT jint JNICALL Java_cheetah_core_net_drebapi_jni_DrebApiInterface_drebApiGetMsg(JNIEnv *env, jobject jenv, jint apipoint, jobject msgdata);
	
	
	
	// 函数名: Java_BFDREBAPI_GetErrMsg
	// 编程  : 王明松 2015-9-24 17:02:13
	// 返回  : jstring 出错信息 
	// 参数  : JNIEnv *env
	// 参数  : jobject jenv
	// 参数  : jint apipoint  初始化返回的实例序号
	// 描述  : 取得出错信息
	JNIEXPORT jstring JNICALL Java_cheetah_core_net_drebapi_jni_DrebApiInterface_drebApiGetErrMsg(JNIEnv *env, jobject jenv, jint apipoint);
	
	// 函数名: Java_BFDREBAPI_UnRegisterDreb
	// 编程  : 王明松 2015-9-24 17:03:01
	// 返回  : void JNICALL 
	// 参数  : JNIEnv *env
	// 参数  : jobject jenv
	// 参数  : jint apipoint 初始化返回的实例序号
	// 描述  : 取消在总线上注册的交易
	JNIEXPORT void JNICALL Java_cheetah_core_net_drebapi_jni_DrebApiInterface_drebApiUnRegisterDreb(JNIEnv *env, jobject jenv, jint apipoint);
	
	// 函数名: Java_BFDREBAPI_RegisterDreb
	// 编程  : 王明松 2015-9-24 17:03:15
	// 返回  : void JNICALL 
	// 参数  : JNIEnv *env
	// 参数  : jobject jenv
	// 参数  : jint apipoint    初始化返回的实例序号
	// 参数  : jint drebindex   在注册的总线连接索引
	// 参数  : jstring txlist   以|分隔的交易码，形如  1|2|3|4|  
	// 描述  : 在总线上注册交易
	JNIEXPORT void JNICALL Java_cheetah_core_net_drebapi_jni_DrebApiInterface_drebApiRegisterDreb(JNIEnv *env, jobject jenv, jint apipoint, jint drebindex, jstring txlist);
	


#ifdef __cplusplus
}
#endif
#endif


