// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ficc.proto

#include "ficc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ficc_message {
PROTOBUF_CONSTEXPR ficc_Order_Req::ficc_Order_Req(
    ::_pbi::ConstantInitialized)
  : trade_acct_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , secu_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , order_price_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , direction_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , offset_flag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , hedge_flag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , time_cond_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , purchase_way_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , text_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , valid_until_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , mdentry_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , client_ref_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , reserver1_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , quote_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , head_(nullptr)
  , vol_(uint64_t{0u})
  , price_(0)
  , user_id_(0u)
  , strategy_code_(uint64_t{0u})
  , ytm_(0)
  , strike_yeild_(0)
  , quote_type_(uint64_t{0u})
  , max_floor_(uint64_t{0u})
  , min_tick_size_(uint64_t{0u})
  , settle_type_(uint64_t{0u})
  , match_type_(uint64_t{0u})
  , delivery_type_(uint64_t{0u})
  , clearing_method_(uint64_t{0u})
  , routing_type_(uint64_t{0u})
  , market_indicator_(uint64_t{0u})
  , realtime_undertake_flag_(uint64_t{0u})
  , subject_party_type_(uint64_t{0u}){}
struct ficc_Order_ReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ficc_Order_ReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ficc_Order_ReqDefaultTypeInternal() {}
  union {
    ficc_Order_Req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ficc_Order_ReqDefaultTypeInternal _ficc_Order_Req_default_instance_;
PROTOBUF_CONSTEXPR ficc_Order_Rsp::ficc_Order_Rsp(
    ::_pbi::ConstantInitialized)
  : trade_acct_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , fund_acct_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , combino_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , secu_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , order_inner_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , send_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , order_status_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , err_msg_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , head_(nullptr)
  , err_id_(0u){}
struct ficc_Order_RspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ficc_Order_RspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ficc_Order_RspDefaultTypeInternal() {}
  union {
    ficc_Order_Rsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ficc_Order_RspDefaultTypeInternal _ficc_Order_Rsp_default_instance_;
PROTOBUF_CONSTEXPR ficc_Order_Rtn::ficc_Order_Rtn(
    ::_pbi::ConstantInitialized)
  : trade_acct_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , fund_acct_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , combino_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , trading_day_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , ex_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , secu_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , secu_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , order_price_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , direction_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , offset_flag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , hedge_flag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , time_cond_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , bilateral_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , purchase_way_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , text_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , quote_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , valid_until_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , mdentry_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , client_ref_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , order_inner_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , order_sys_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , insert_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , order_submit_status_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , order_status_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , trade_date_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , update_date_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , update_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , cancel_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , ret_msg_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , order_source_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , client_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , reserver1_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , reserver2_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , reserver3_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , reserver4_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , head_(nullptr)
  , vol_(uint64_t{0u})
  , price_(0)
  , user_id_(0u)
  , strategy_code_(uint64_t{0u})
  , ytm_(0)
  , strike_yeild_(0)
  , quote_type_(uint64_t{0u})
  , max_floor_(uint64_t{0u})
  , min_tick_size_(uint64_t{0u})
  , settle_type_(uint64_t{0u})
  , match_type_(uint64_t{0u})
  , delivery_type_(uint64_t{0u})
  , clearing_method_(uint64_t{0u})
  , routing_type_(uint64_t{0u})
  , market_indicator_(uint64_t{0u})
  , realtime_undertake_flag_(uint64_t{0u})
  , subject_party_type_(uint64_t{0u})
  , trade_price_(0)
  , avg_trade_price_(0)
  , vol_traded_(uint64_t{0u})
  , vol_total_(uint64_t{0u})
  , ret_code_(uint64_t{0u})
  , settlement_id_(uint64_t{0u})
  , sequence_no_(0u){}
struct ficc_Order_RtnDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ficc_Order_RtnDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ficc_Order_RtnDefaultTypeInternal() {}
  union {
    ficc_Order_Rtn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ficc_Order_RtnDefaultTypeInternal _ficc_Order_Rtn_default_instance_;
PROTOBUF_CONSTEXPR ficc_BilateralOrder_Req::ficc_BilateralOrder_Req(
    ::_pbi::ConstantInitialized)
  : trade_acct_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , secu_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , order_price_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , time_cond_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , text_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , order_sys_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , valid_until_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , client_ref_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , reserver1_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , head_(nullptr)
  , bid_vol_(uint64_t{0u})
  , bid_price_(0)
  , ask_price_(0)
  , ask_vol_(uint64_t{0u})
  , strategy_code_(uint64_t{0u})
  , user_id_(0u)
  , bid_ytm_(0)
  , bid_legsettl_type_(uint64_t{0u})
  , bid_delivery_type_(uint64_t{0u})
  , bid_strike_yeild_(0)
  , ask_ytm_(0)
  , bid_clearing_method_(uint64_t{0u})
  , ask_legsettl_type_(uint64_t{0u})
  , ask_delivery_type_(uint64_t{0u})
  , ask_clearing_method_(uint64_t{0u})
  , quote_type_(uint64_t{0u})
  , max_floor_(uint64_t{0u})
  , routing_type_(uint64_t{0u})
  , market_indicator_(uint64_t{0u})
  , ask_strike_yeild_(0){}
struct ficc_BilateralOrder_ReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ficc_BilateralOrder_ReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ficc_BilateralOrder_ReqDefaultTypeInternal() {}
  union {
    ficc_BilateralOrder_Req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ficc_BilateralOrder_ReqDefaultTypeInternal _ficc_BilateralOrder_Req_default_instance_;
PROTOBUF_CONSTEXPR ficc_BilateralOrder_Rtn::ficc_BilateralOrder_Rtn(
    ::_pbi::ConstantInitialized)
  : trade_acct_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , fund_acct_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , combino_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , ex_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , commodity_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , secu_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , secu_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , order_price_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , offset_flag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , hedge_flag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , bilateral_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , time_cond_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , text_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , order_sys_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , trade_date_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , insert_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , valid_until_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , client_ref_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , trading_day_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , order_submit_status_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , order_status_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , update_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , cancel_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , ret_msg_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , action_flag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , order_source_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , head_(nullptr)
  , user_id_(0u)
  , bid_price_(0)
  , bid_vol_(uint64_t{0u})
  , ask_vol_(uint64_t{0u})
  , strategy_code_(uint64_t{0u})
  , ask_price_(0)
  , bid_ytm_(0)
  , bid_legsettl_type_(uint64_t{0u})
  , bid_delivery_type_(uint64_t{0u})
  , bid_strike_yeild_(0)
  , ask_ytm_(0)
  , bid_clearing_method_(uint64_t{0u})
  , ask_legsettl_type_(uint64_t{0u})
  , ask_delivery_type_(uint64_t{0u})
  , ask_clearing_method_(uint64_t{0u})
  , quote_type_(uint64_t{0u})
  , max_floor_(uint64_t{0u})
  , routing_type_(uint64_t{0u})
  , market_indicator_(uint64_t{0u})
  , ask_vol_traded_(uint64_t{0u})
  , ask_strike_yeild_(0)
  , sequence_no_(0u)
  , ask_vol_total_(uint64_t{0u})
  , bid_vol_traded_(uint64_t{0u})
  , bid_vol_total_(uint64_t{0u})
  , ret_code_(uint64_t{0u}){}
struct ficc_BilateralOrder_RtnDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ficc_BilateralOrder_RtnDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ficc_BilateralOrder_RtnDefaultTypeInternal() {}
  union {
    ficc_BilateralOrder_Rtn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ficc_BilateralOrder_RtnDefaultTypeInternal _ficc_BilateralOrder_Rtn_default_instance_;
PROTOBUF_CONSTEXPR ficc_SystemMonitor::ficc_SystemMonitor(
    ::_pbi::ConstantInitialized)
  : msg_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , send_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , tkernel_ip_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , trade_day_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , head_(nullptr)
  , status_(0u){}
struct ficc_SystemMonitorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ficc_SystemMonitorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ficc_SystemMonitorDefaultTypeInternal() {}
  union {
    ficc_SystemMonitor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ficc_SystemMonitorDefaultTypeInternal _ficc_SystemMonitor_default_instance_;
PROTOBUF_CONSTEXPR ficc_OrderAction_Req::ficc_OrderAction_Req(
    ::_pbi::ConstantInitialized)
  : order_inner_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , head_(nullptr)
  , quote_type_(uint64_t{0u})
  , user_id_(0u){}
struct ficc_OrderAction_ReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ficc_OrderAction_ReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ficc_OrderAction_ReqDefaultTypeInternal() {}
  union {
    ficc_OrderAction_Req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ficc_OrderAction_ReqDefaultTypeInternal _ficc_OrderAction_Req_default_instance_;
PROTOBUF_CONSTEXPR ficc_OrderAction_Rsp::ficc_OrderAction_Rsp(
    ::_pbi::ConstantInitialized)
  : order_inner_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , secu_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , send_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , order_status_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , err_msg_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , head_(nullptr)
  , err_id_(0u){}
struct ficc_OrderAction_RspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ficc_OrderAction_RspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ficc_OrderAction_RspDefaultTypeInternal() {}
  union {
    ficc_OrderAction_Rsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ficc_OrderAction_RspDefaultTypeInternal _ficc_OrderAction_Rsp_default_instance_;
PROTOBUF_CONSTEXPR ficc_QryBilateralOrder_Req::ficc_QryBilateralOrder_Req(
    ::_pbi::ConstantInitialized)
  : head_(nullptr)
  , sequence_no_(0u){}
struct ficc_QryBilateralOrder_ReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ficc_QryBilateralOrder_ReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ficc_QryBilateralOrder_ReqDefaultTypeInternal() {}
  union {
    ficc_QryBilateralOrder_Req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ficc_QryBilateralOrder_ReqDefaultTypeInternal _ficc_QryBilateralOrder_Req_default_instance_;
PROTOBUF_CONSTEXPR ficc_QryMatch_Req::ficc_QryMatch_Req(
    ::_pbi::ConstantInitialized)
  : head_(nullptr)
  , sequence_no_(0u){}
struct ficc_QryMatch_ReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ficc_QryMatch_ReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ficc_QryMatch_ReqDefaultTypeInternal() {}
  union {
    ficc_QryMatch_Req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ficc_QryMatch_ReqDefaultTypeInternal _ficc_QryMatch_Req_default_instance_;
PROTOBUF_CONSTEXPR ficc_Match_Rtn::ficc_Match_Rtn(
    ::_pbi::ConstantInitialized)
  : order_inner_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , ex_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , trading_day_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , trade_acct_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , fund_acct_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , order_sys_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , trade_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , secu_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , direction_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , offset_flag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , hedge_flag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , trade_date_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , trade_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , currency_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , manual_fee_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , deleted_flag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , ex_inst_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , broker_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , investor_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , bilateral_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , counter_party_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , counter_party_trader_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , head_(nullptr)
  , user_id_(0u)
  , order_price_(0)
  , dirty_price_(0)
  , trade_price_(0)
  , vol_traded_(uint64_t{0u})
  , ytm_(0)
  , trade_fee_(0)
  , cover_price_(0)
  , accrued_interest_amt_(0)
  , quote_type_(uint64_t{0u})
  , settle_type_(uint64_t{0u})
  , strategy_code_(uint64_t{0u})
  , sequence_no_(0u){}
struct ficc_Match_RtnDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ficc_Match_RtnDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ficc_Match_RtnDefaultTypeInternal() {}
  union {
    ficc_Match_Rtn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ficc_Match_RtnDefaultTypeInternal _ficc_Match_Rtn_default_instance_;
PROTOBUF_CONSTEXPR ficc_Cfets_Makemarket_Status::ficc_Cfets_Makemarket_Status(
    ::_pbi::ConstantInitialized)
  : secu_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , secu_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , secu_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , last_update_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , head_(nullptr)
  , quote_status_(0u)
  , last_rec_time_(0u)
  , trade_vol_day_(uint64_t{0u})
  , market_time_day_(0u)
  , max_ytm_spread_(0)
  , min_vol_(uint64_t{0u})
  , notify_out_(0u){}
struct ficc_Cfets_Makemarket_StatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ficc_Cfets_Makemarket_StatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ficc_Cfets_Makemarket_StatusDefaultTypeInternal() {}
  union {
    ficc_Cfets_Makemarket_Status _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ficc_Cfets_Makemarket_StatusDefaultTypeInternal _ficc_Cfets_Makemarket_Status_default_instance_;
PROTOBUF_CONSTEXPR ficc_fund::ficc_fund(
    ::_pbi::ConstantInitialized)
  : trade_acct_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , currency_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , fund_acct_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , trade_day_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , head_(nullptr)
  , last_bal_(0)
  , balance_(0)
  , avail_fund_(0)
  , get_fund_(0)
  , base_margin_(0)
  , income_expense_(0)
  , froze_fund_(0)
  , margin_(0)
  , fee_(0)
  , reserve_(0)
  , surplus_(0)
  , float_surplus_(0)
  , inte_integral_(0)
  , puni_integral_(0)
  , incr_inte_(0)
  , arap_(0)
  , risk_level_(0u)
  , risk_(0){}
struct ficc_fundDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ficc_fundDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ficc_fundDefaultTypeInternal() {}
  union {
    ficc_fund _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ficc_fundDefaultTypeInternal _ficc_fund_default_instance_;
PROTOBUF_CONSTEXPR ficc_position::ficc_position(
    ::_pbi::ConstantInitialized)
  : trading_day_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , trade_acct_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , secu_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , posi_direction_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , hedge_flag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , posi_date_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , fund_acct_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , ex_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , head_(nullptr)
  , posi_profit_by_date_(0)
  , posi_profit_by_trade_(0)
  , close_profit_by_date_(0)
  , close_profit_by_trade_(0)
  , last_position_(uint64_t{0u})
  , posi_vol_(uint64_t{0u})
  , today_position_(uint64_t{0u})
  , frozen_position_(uint64_t{0u})
  , open_vol_(uint64_t{0u})
  , frozen_amount_(0)
  , open_amount_(0)
  , close_vol_(uint64_t{0u})
  , close_amount_(0)
  , posi_cost_(0)
  , open_cost_(0)
  , pre_margin_(0)
  , use_margin_(0)
  , frozen_margin_(0)
  , frozen_cash_(0)
  , frozen_fee_(0)
  , adjust_(0)
  , trade_fee_(0)
  , long_frozen_(uint64_t{0u})
  , pre_settlement_price_(0)
  , long_frozen_amount_(0)
  , short_frozen_(uint64_t{0u})
  , short_frozen_amount_(0)
  , margin_rate_by_vol_(0)
  , margin_rate_by_money_(0){}
struct ficc_positionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ficc_positionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ficc_positionDefaultTypeInternal() {}
  union {
    ficc_position _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ficc_positionDefaultTypeInternal _ficc_position_default_instance_;
PROTOBUF_CONSTEXPR ficc_Exch_BilateralOrder_Req::ficc_Exch_BilateralOrder_Req(
    ::_pbi::ConstantInitialized)
  : trade_acct_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , fund_acct_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , combino_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , ex_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , commodity_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , secu_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , secu_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , order_price_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , offset_flag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , hedge_flag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , seat_order_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , time_cond_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , text_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , order_sys_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , trade_date_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , insert_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , valid_until_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , client_ref_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , order_source_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , secu_type_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , maturity_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , issuer_party_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , head_(nullptr)
  , user_id_(0u)
  , bid_price_(0)
  , bid_vol_(uint64_t{0u})
  , ask_vol_(uint64_t{0u})
  , strategy_code_(uint64_t{0u})
  , ask_price_(0)
  , bid_ytm_(0)
  , bid_legsettl_type_(uint64_t{0u})
  , bid_delivery_type_(uint64_t{0u})
  , bid_strike_yeild_(0)
  , ask_ytm_(0)
  , bid_clearing_method_(uint64_t{0u})
  , ask_legsettl_type_(uint64_t{0u})
  , ask_delivery_type_(uint64_t{0u})
  , ask_clearing_method_(uint64_t{0u})
  , quote_type_(uint64_t{0u})
  , max_floor_(uint64_t{0u})
  , routing_type_(uint64_t{0u})
  , market_indicator_(uint64_t{0u})
  , ask_strike_yeild_(0){}
struct ficc_Exch_BilateralOrder_ReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ficc_Exch_BilateralOrder_ReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ficc_Exch_BilateralOrder_ReqDefaultTypeInternal() {}
  union {
    ficc_Exch_BilateralOrder_Req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ficc_Exch_BilateralOrder_ReqDefaultTypeInternal _ficc_Exch_BilateralOrder_Req_default_instance_;
PROTOBUF_CONSTEXPR ficc_Exch_BilateralOrder_Rtn::ficc_Exch_BilateralOrder_Rtn(
    ::_pbi::ConstantInitialized)
  : order_status_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , acction_flag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , valid_until_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , seat_order_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , order_sys_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , insert_date_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , update_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , secu_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , fund_acct_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , trade_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , head_(nullptr)
  , max_floor_(uint64_t{0u})
  , bid_vol_(uint64_t{0u})
  , bid_vol_traded_(uint64_t{0u})
  , bid_vol_total_(uint64_t{0u})
  , ask_vol_(uint64_t{0u})
  , ask_vol_traded_(uint64_t{0u})
  , ask_vol_total_(uint64_t{0u})
  , bid_price_(0)
  , ask_price_(0)
  , bid_legsettl_type_(uint64_t{0u})
  , bid_delivery_type_(uint64_t{0u})
  , bid_clearing_method_(uint64_t{0u})
  , bid_ytm_(0)
  , bid_strike_yeild_(0)
  , ask_legsettl_type_(uint64_t{0u})
  , ask_delivery_type_(uint64_t{0u})
  , ask_clearing_method_(uint64_t{0u})
  , ask_ytm_(0)
  , ask_strike_yeild_(0){}
struct ficc_Exch_BilateralOrder_RtnDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ficc_Exch_BilateralOrder_RtnDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ficc_Exch_BilateralOrder_RtnDefaultTypeInternal() {}
  union {
    ficc_Exch_BilateralOrder_Rtn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ficc_Exch_BilateralOrder_RtnDefaultTypeInternal _ficc_Exch_BilateralOrder_Rtn_default_instance_;
PROTOBUF_CONSTEXPR ficc_Exch_Match_Rtn::ficc_Exch_Match_Rtn(
    ::_pbi::ConstantInitialized)
  : trade_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , trade_date_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , trade_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , order_sys_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , seat_order_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , secu_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , counter_party_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , counter_party_trader_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , investor_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , fund_acct_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , head_(nullptr)
  , trade_price_(0)
  , accrued_interest_amt_(0)
  , vol_traded_(uint64_t{0u})
  , settle_type_(uint64_t{0u}){}
struct ficc_Exch_Match_RtnDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ficc_Exch_Match_RtnDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ficc_Exch_Match_RtnDefaultTypeInternal() {}
  union {
    ficc_Exch_Match_Rtn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ficc_Exch_Match_RtnDefaultTypeInternal _ficc_Exch_Match_Rtn_default_instance_;
PROTOBUF_CONSTEXPR ficc_Exch_Order_Action::ficc_Exch_Order_Action(
    ::_pbi::ConstantInitialized)
  : order_inner_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , investor_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , acction_flag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , broker_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , ex_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , order_sys_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , trade_acct_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , secu_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , commodity_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , valid_until_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , insert_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , client_ref_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , direction_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , quote_req_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , acction_status_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , status_msg_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , acction_date_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , acction_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , trade_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , head_(nullptr)
  , user_id_(0u)
  , price_(0)
  , vol_(uint64_t{0u})
  , strategy_code_(uint64_t{0u})
  , match_type_(uint64_t{0u})
  , quote_type_(uint64_t{0u})
  , market_indicator_(uint64_t{0u})
  , ytm_(0)
  , strike_yeild_(0){}
struct ficc_Exch_Order_ActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ficc_Exch_Order_ActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ficc_Exch_Order_ActionDefaultTypeInternal() {}
  union {
    ficc_Exch_Order_Action _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ficc_Exch_Order_ActionDefaultTypeInternal _ficc_Exch_Order_Action_default_instance_;
PROTOBUF_CONSTEXPR ficc_Exch_Order_Req::ficc_Exch_Order_Req(
    ::_pbi::ConstantInitialized)
  : trade_acct_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , fund_acct_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , combino_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , trading_day_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , ex_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , secu_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , secu_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , order_price_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , direction_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , offset_flag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , hedge_flag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , time_cond_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , seat_order_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , purchase_way_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , text_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , quote_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , valid_until_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , mdentry_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , client_ref_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , order_inner_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , order_sys_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , insert_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , order_source_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , reserver1_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , reserver2_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , reserver3_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , reserver4_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , maturity_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , head_(nullptr)
  , vol_(uint64_t{0u})
  , price_(0)
  , user_id_(0u)
  , strategy_code_(uint64_t{0u})
  , ytm_(0)
  , strike_yeild_(0)
  , quote_type_(uint64_t{0u})
  , max_floor_(uint64_t{0u})
  , min_tick_size_(uint64_t{0u})
  , settle_type_(uint64_t{0u})
  , match_type_(uint64_t{0u})
  , delivery_type_(uint64_t{0u})
  , clearing_method_(uint64_t{0u})
  , routing_type_(uint64_t{0u})
  , market_indicator_(uint64_t{0u})
  , realtime_undertake_flag_(uint64_t{0u})
  , subject_party_type_(uint64_t{0u}){}
struct ficc_Exch_Order_ReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ficc_Exch_Order_ReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ficc_Exch_Order_ReqDefaultTypeInternal() {}
  union {
    ficc_Exch_Order_Req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ficc_Exch_Order_ReqDefaultTypeInternal _ficc_Exch_Order_Req_default_instance_;
PROTOBUF_CONSTEXPR ficc_Exch_Order_Rtn::ficc_Exch_Order_Rtn(
    ::_pbi::ConstantInitialized)
  : order_status_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , seat_order_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , order_sys_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , insert_date_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , update_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , secu_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , fund_acct_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , trade_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , head_(nullptr)
  , max_floor_(uint64_t{0u})
  , vol_(uint64_t{0u})
  , vol_traded_(uint64_t{0u})
  , vol_total_(uint64_t{0u})
  , legsettl_type_(uint64_t{0u})
  , delivery_type_(uint64_t{0u})
  , price_(0)
  , ytm_(0)
  , clearing_method_(uint64_t{0u})
  , strike_yeild_(0){}
struct ficc_Exch_Order_RtnDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ficc_Exch_Order_RtnDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ficc_Exch_Order_RtnDefaultTypeInternal() {}
  union {
    ficc_Exch_Order_Rtn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ficc_Exch_Order_RtnDefaultTypeInternal _ficc_Exch_Order_Rtn_default_instance_;
}  // namespace ficc_message
static ::_pb::Metadata file_level_metadata_ficc_2eproto[20];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ficc_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ficc_2eproto = nullptr;

const uint32_t TableStruct_ficc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Req, head_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Req, trade_acct_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Req, secu_code_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Req, order_price_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Req, direction_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Req, offset_flag_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Req, hedge_flag_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Req, price_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Req, vol_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Req, time_cond_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Req, strategy_code_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Req, user_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Req, purchase_way_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Req, text_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Req, ytm_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Req, strike_yeild_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Req, quote_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Req, max_floor_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Req, min_tick_size_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Req, settle_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Req, match_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Req, delivery_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Req, clearing_method_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Req, valid_until_time_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Req, mdentry_time_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Req, client_ref_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Req, routing_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Req, market_indicator_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Req, realtime_undertake_flag_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Req, subject_party_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Req, reserver1_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Req, quote_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rsp, head_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rsp, trade_acct_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rsp, fund_acct_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rsp, combino_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rsp, secu_code_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rsp, order_inner_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rsp, send_time_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rsp, order_status_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rsp, err_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rsp, err_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, head_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, trade_acct_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, fund_acct_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, combino_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, trading_day_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, ex_code_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, secu_code_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, secu_name_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, order_price_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, direction_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, offset_flag_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, hedge_flag_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, price_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, vol_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, time_cond_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, strategy_code_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, user_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, bilateral_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, purchase_way_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, text_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, ytm_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, strike_yeild_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, quote_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, max_floor_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, min_tick_size_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, settle_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, match_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, delivery_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, clearing_method_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, quote_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, valid_until_time_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, mdentry_time_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, client_ref_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, routing_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, market_indicator_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, realtime_undertake_flag_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, subject_party_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, order_inner_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, order_sys_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, insert_time_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, trade_price_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, avg_trade_price_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, vol_traded_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, vol_total_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, order_submit_status_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, order_status_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, trade_date_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, update_date_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, update_time_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, cancel_time_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, ret_code_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, ret_msg_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, settlement_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, order_source_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, client_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, reserver1_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, reserver2_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, reserver3_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, reserver4_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Order_Rtn, sequence_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Req, head_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Req, trade_acct_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Req, secu_code_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Req, order_price_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Req, bid_price_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Req, bid_vol_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Req, ask_price_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Req, ask_vol_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Req, time_cond_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Req, user_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Req, strategy_code_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Req, text_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Req, order_sys_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Req, bid_ytm_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Req, bid_strike_yeild_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Req, bid_legsettl_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Req, bid_delivery_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Req, bid_clearing_method_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Req, ask_ytm_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Req, ask_strike_yeild_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Req, ask_legsettl_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Req, ask_delivery_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Req, ask_clearing_method_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Req, quote_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Req, max_floor_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Req, valid_until_time_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Req, client_ref_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Req, routing_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Req, market_indicator_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Req, reserver1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, head_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, trade_acct_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, fund_acct_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, combino_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, user_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, ex_code_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, commodity_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, secu_code_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, secu_name_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, order_price_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, offset_flag_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, hedge_flag_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, bilateral_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, bid_price_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, bid_vol_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, ask_price_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, ask_vol_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, time_cond_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, strategy_code_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, text_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, order_sys_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, trade_date_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, insert_time_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, bid_ytm_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, bid_strike_yeild_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, bid_legsettl_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, bid_delivery_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, bid_clearing_method_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, ask_ytm_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, ask_strike_yeild_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, ask_legsettl_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, ask_delivery_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, ask_clearing_method_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, quote_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, max_floor_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, valid_until_time_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, client_ref_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, routing_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, market_indicator_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, trading_day_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, ask_vol_traded_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, ask_vol_total_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, bid_vol_traded_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, bid_vol_total_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, order_submit_status_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, order_status_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, update_time_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, cancel_time_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, ret_code_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, ret_msg_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, action_flag_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, order_source_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_BilateralOrder_Rtn, sequence_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_SystemMonitor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_SystemMonitor, head_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_SystemMonitor, status_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_SystemMonitor, msg_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_SystemMonitor, send_time_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_SystemMonitor, tkernel_ip_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_SystemMonitor, trade_day_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_OrderAction_Req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_OrderAction_Req, head_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_OrderAction_Req, order_inner_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_OrderAction_Req, quote_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_OrderAction_Req, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_OrderAction_Rsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_OrderAction_Rsp, head_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_OrderAction_Rsp, order_inner_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_OrderAction_Rsp, secu_code_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_OrderAction_Rsp, send_time_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_OrderAction_Rsp, order_status_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_OrderAction_Rsp, err_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_OrderAction_Rsp, err_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_QryBilateralOrder_Req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_QryBilateralOrder_Req, head_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_QryBilateralOrder_Req, sequence_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_QryMatch_Req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_QryMatch_Req, head_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_QryMatch_Req, sequence_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, head_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, order_inner_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, ex_code_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, trading_day_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, trade_acct_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, fund_acct_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, user_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, order_sys_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, trade_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, secu_code_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, direction_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, offset_flag_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, hedge_flag_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, order_price_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, dirty_price_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, trade_price_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, ytm_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, vol_traded_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, trade_date_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, trade_time_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, trade_fee_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, currency_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, manual_fee_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, deleted_flag_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, cover_price_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, ex_inst_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, broker_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, investor_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, bilateral_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, quote_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, settle_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, counter_party_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, counter_party_trader_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, accrued_interest_amt_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, sequence_no_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Match_Rtn, strategy_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Cfets_Makemarket_Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Cfets_Makemarket_Status, head_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Cfets_Makemarket_Status, secu_code_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Cfets_Makemarket_Status, secu_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Cfets_Makemarket_Status, secu_name_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Cfets_Makemarket_Status, quote_status_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Cfets_Makemarket_Status, last_rec_time_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Cfets_Makemarket_Status, market_time_day_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Cfets_Makemarket_Status, trade_vol_day_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Cfets_Makemarket_Status, last_update_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Cfets_Makemarket_Status, max_ytm_spread_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Cfets_Makemarket_Status, min_vol_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Cfets_Makemarket_Status, notify_out_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_fund, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_fund, head_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_fund, trade_acct_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_fund, currency_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_fund, fund_acct_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_fund, last_bal_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_fund, balance_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_fund, avail_fund_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_fund, get_fund_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_fund, base_margin_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_fund, income_expense_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_fund, froze_fund_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_fund, margin_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_fund, fee_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_fund, reserve_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_fund, surplus_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_fund, float_surplus_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_fund, inte_integral_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_fund, puni_integral_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_fund, incr_inte_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_fund, arap_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_fund, risk_level_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_fund, risk_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_fund, trade_day_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, head_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, trading_day_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, trade_acct_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, secu_code_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, posi_direction_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, hedge_flag_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, posi_date_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, fund_acct_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, ex_code_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, posi_profit_by_date_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, posi_profit_by_trade_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, close_profit_by_date_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, close_profit_by_trade_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, last_position_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, posi_vol_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, today_position_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, frozen_position_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, frozen_amount_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, open_vol_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, close_vol_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, open_amount_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, close_amount_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, posi_cost_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, open_cost_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, pre_margin_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, use_margin_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, frozen_margin_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, frozen_cash_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, frozen_fee_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, adjust_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, trade_fee_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, pre_settlement_price_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, long_frozen_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, short_frozen_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, long_frozen_amount_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, short_frozen_amount_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, margin_rate_by_vol_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_position, margin_rate_by_money_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, head_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, trade_acct_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, fund_acct_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, combino_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, user_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, ex_code_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, commodity_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, secu_code_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, secu_name_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, order_price_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, offset_flag_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, hedge_flag_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, seat_order_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, bid_price_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, bid_vol_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, ask_price_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, ask_vol_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, time_cond_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, strategy_code_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, text_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, order_sys_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, trade_date_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, insert_time_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, bid_ytm_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, bid_strike_yeild_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, bid_legsettl_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, bid_delivery_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, bid_clearing_method_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, ask_ytm_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, ask_strike_yeild_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, ask_legsettl_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, ask_delivery_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, ask_clearing_method_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, quote_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, max_floor_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, valid_until_time_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, client_ref_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, routing_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, market_indicator_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, order_source_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, secu_type_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, maturity_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Req, issuer_party_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Rtn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Rtn, head_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Rtn, order_status_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Rtn, acction_flag_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Rtn, valid_until_time_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Rtn, seat_order_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Rtn, order_sys_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Rtn, insert_date_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Rtn, update_time_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Rtn, secu_code_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Rtn, max_floor_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Rtn, bid_vol_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Rtn, bid_vol_traded_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Rtn, bid_vol_total_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Rtn, ask_vol_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Rtn, ask_vol_traded_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Rtn, ask_vol_total_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Rtn, bid_price_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Rtn, ask_price_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Rtn, bid_legsettl_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Rtn, bid_delivery_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Rtn, bid_clearing_method_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Rtn, bid_ytm_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Rtn, bid_strike_yeild_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Rtn, ask_legsettl_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Rtn, ask_delivery_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Rtn, ask_clearing_method_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Rtn, ask_ytm_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Rtn, ask_strike_yeild_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Rtn, fund_acct_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_BilateralOrder_Rtn, trade_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Match_Rtn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Match_Rtn, head_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Match_Rtn, trade_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Match_Rtn, trade_date_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Match_Rtn, trade_time_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Match_Rtn, order_sys_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Match_Rtn, seat_order_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Match_Rtn, secu_code_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Match_Rtn, trade_price_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Match_Rtn, accrued_interest_amt_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Match_Rtn, vol_traded_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Match_Rtn, counter_party_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Match_Rtn, counter_party_trader_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Match_Rtn, investor_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Match_Rtn, fund_acct_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Match_Rtn, settle_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Action, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Action, head_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Action, order_inner_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Action, investor_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Action, user_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Action, acction_flag_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Action, price_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Action, vol_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Action, broker_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Action, ex_code_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Action, order_sys_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Action, strategy_code_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Action, trade_acct_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Action, secu_code_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Action, commodity_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Action, match_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Action, quote_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Action, valid_until_time_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Action, insert_time_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Action, client_ref_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Action, market_indicator_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Action, direction_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Action, quote_req_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Action, ytm_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Action, strike_yeild_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Action, acction_status_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Action, status_msg_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Action, acction_date_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Action, acction_time_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Action, trade_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, head_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, trade_acct_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, fund_acct_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, combino_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, trading_day_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, ex_code_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, secu_code_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, secu_name_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, order_price_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, direction_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, offset_flag_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, hedge_flag_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, price_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, vol_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, time_cond_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, strategy_code_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, user_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, seat_order_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, purchase_way_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, text_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, ytm_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, strike_yeild_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, quote_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, max_floor_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, min_tick_size_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, settle_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, match_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, delivery_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, clearing_method_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, quote_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, valid_until_time_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, mdentry_time_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, client_ref_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, routing_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, market_indicator_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, realtime_undertake_flag_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, subject_party_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, order_inner_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, order_sys_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, insert_time_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, order_source_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, reserver1_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, reserver2_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, reserver3_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, reserver4_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Req, maturity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Rtn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Rtn, head_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Rtn, order_status_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Rtn, seat_order_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Rtn, order_sys_id_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Rtn, insert_date_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Rtn, update_time_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Rtn, secu_code_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Rtn, max_floor_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Rtn, vol_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Rtn, vol_traded_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Rtn, vol_total_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Rtn, price_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Rtn, legsettl_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Rtn, delivery_type_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Rtn, clearing_method_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Rtn, ytm_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Rtn, strike_yeild_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Rtn, fund_acct_),
  PROTOBUF_FIELD_OFFSET(::ficc_message::ficc_Exch_Order_Rtn, trade_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ficc_message::ficc_Order_Req)},
  { 38, -1, -1, sizeof(::ficc_message::ficc_Order_Rsp)},
  { 54, -1, -1, sizeof(::ficc_message::ficc_Order_Rtn)},
  { 120, -1, -1, sizeof(::ficc_message::ficc_BilateralOrder_Req)},
  { 156, -1, -1, sizeof(::ficc_message::ficc_BilateralOrder_Rtn)},
  { 215, -1, -1, sizeof(::ficc_message::ficc_SystemMonitor)},
  { 227, -1, -1, sizeof(::ficc_message::ficc_OrderAction_Req)},
  { 237, -1, -1, sizeof(::ficc_message::ficc_OrderAction_Rsp)},
  { 250, -1, -1, sizeof(::ficc_message::ficc_QryBilateralOrder_Req)},
  { 258, -1, -1, sizeof(::ficc_message::ficc_QryMatch_Req)},
  { 266, -1, -1, sizeof(::ficc_message::ficc_Match_Rtn)},
  { 308, -1, -1, sizeof(::ficc_message::ficc_Cfets_Makemarket_Status)},
  { 326, -1, -1, sizeof(::ficc_message::ficc_fund)},
  { 355, -1, -1, sizeof(::ficc_message::ficc_position)},
  { 399, -1, -1, sizeof(::ficc_message::ficc_Exch_BilateralOrder_Req)},
  { 448, -1, -1, sizeof(::ficc_message::ficc_Exch_BilateralOrder_Rtn)},
  { 484, -1, -1, sizeof(::ficc_message::ficc_Exch_Match_Rtn)},
  { 505, -1, -1, sizeof(::ficc_message::ficc_Exch_Order_Action)},
  { 540, -1, -1, sizeof(::ficc_message::ficc_Exch_Order_Req)},
  { 592, -1, -1, sizeof(::ficc_message::ficc_Exch_Order_Rtn)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ficc_message::_ficc_Order_Req_default_instance_._instance,
  &::ficc_message::_ficc_Order_Rsp_default_instance_._instance,
  &::ficc_message::_ficc_Order_Rtn_default_instance_._instance,
  &::ficc_message::_ficc_BilateralOrder_Req_default_instance_._instance,
  &::ficc_message::_ficc_BilateralOrder_Rtn_default_instance_._instance,
  &::ficc_message::_ficc_SystemMonitor_default_instance_._instance,
  &::ficc_message::_ficc_OrderAction_Req_default_instance_._instance,
  &::ficc_message::_ficc_OrderAction_Rsp_default_instance_._instance,
  &::ficc_message::_ficc_QryBilateralOrder_Req_default_instance_._instance,
  &::ficc_message::_ficc_QryMatch_Req_default_instance_._instance,
  &::ficc_message::_ficc_Match_Rtn_default_instance_._instance,
  &::ficc_message::_ficc_Cfets_Makemarket_Status_default_instance_._instance,
  &::ficc_message::_ficc_fund_default_instance_._instance,
  &::ficc_message::_ficc_position_default_instance_._instance,
  &::ficc_message::_ficc_Exch_BilateralOrder_Req_default_instance_._instance,
  &::ficc_message::_ficc_Exch_BilateralOrder_Rtn_default_instance_._instance,
  &::ficc_message::_ficc_Exch_Match_Rtn_default_instance_._instance,
  &::ficc_message::_ficc_Exch_Order_Action_default_instance_._instance,
  &::ficc_message::_ficc_Exch_Order_Req_default_instance_._instance,
  &::ficc_message::_ficc_Exch_Order_Rtn_default_instance_._instance,
};

const char descriptor_table_protodef_ficc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nficc.proto\022\014ficc_message\032\022message_head"
  ".proto\"\275\005\n\016ficc_Order_Req\022 \n\004head\030\001 \001(\0132"
  "\022.message_head.head\022\022\n\ntrade_acct\030\002 \001(\t\022"
  "\021\n\tsecu_code\030\003 \001(\t\022\030\n\020order_price_type\030\004"
  " \001(\t\022\021\n\tdirection\030\005 \001(\t\022\023\n\013offset_flag\030\006"
  " \001(\t\022\022\n\nhedge_flag\030\007 \001(\t\022\r\n\005price\030\010 \001(\002\022"
  "\013\n\003vol\030\t \001(\004\022\021\n\ttime_cond\030\n \001(\t\022\025\n\rstrat"
  "egy_code\030\013 \001(\004\022\017\n\007user_id\030\014 \001(\r\022\024\n\014purch"
  "ase_way\030\r \001(\t\022\014\n\004text\030\016 \001(\t\022\013\n\003ytm\030\017 \001(\002"
  "\022\024\n\014strike_yeild\030\020 \001(\002\022\022\n\nquote_type\030\021 \001"
  "(\004\022\021\n\tmax_floor\030\022 \001(\004\022\025\n\rmin_tick_size\030\023"
  " \001(\004\022\023\n\013settle_type\030\024 \001(\004\022\022\n\nmatch_type\030"
  "\025 \001(\004\022\025\n\rdelivery_type\030\026 \001(\004\022\027\n\017clearing"
  "_method\030\027 \001(\004\022\030\n\020valid_until_time\030\030 \001(\t\022"
  "\024\n\014mdentry_time\030\031 \001(\t\022\025\n\rclient_ref_id\030\032"
  " \001(\t\022\024\n\014routing_type\030\033 \001(\004\022\030\n\020market_ind"
  "icator\030\034 \001(\004\022\037\n\027realtime_undertake_flag\030"
  "\035 \001(\004\022\032\n\022subject_party_type\030\036 \001(\004\022\021\n\tres"
  "erver1\030\037 \001(\t\022\020\n\010quote_id\030  \001(\t\"\337\001\n\016ficc_"
  "Order_Rsp\022 \n\004head\030\001 \001(\0132\022.message_head.h"
  "ead\022\022\n\ntrade_acct\030\002 \001(\t\022\021\n\tfund_acct\030\003 \001"
  "(\t\022\017\n\007combino\030\004 \001(\t\022\021\n\tsecu_code\030\005 \001(\t\022\026"
  "\n\016order_inner_id\030\006 \001(\t\022\021\n\tsend_time\030\007 \001("
  "\t\022\024\n\014order_status\030\010 \001(\t\022\016\n\006err_id\030\t \001(\r\022"
  "\017\n\007err_msg\030\n \001(\t\"\377\t\n\016ficc_Order_Rtn\022 \n\004h"
  "ead\030\001 \001(\0132\022.message_head.head\022\022\n\ntrade_a"
  "cct\030\002 \001(\t\022\021\n\tfund_acct\030\003 \001(\t\022\017\n\007combino\030"
  "\004 \001(\t\022\023\n\013trading_day\030\005 \001(\t\022\017\n\007ex_code\030\006 "
  "\001(\t\022\021\n\tsecu_code\030\007 \001(\t\022\021\n\tsecu_name\030\010 \001("
  "\t\022\030\n\020order_price_type\030\t \001(\t\022\021\n\tdirection"
  "\030\n \001(\t\022\023\n\013offset_flag\030\013 \001(\t\022\022\n\nhedge_fla"
  "g\030\014 \001(\t\022\r\n\005price\030\r \001(\002\022\013\n\003vol\030\016 \001(\004\022\021\n\tt"
  "ime_cond\030\017 \001(\t\022\025\n\rstrategy_code\030\020 \001(\004\022\017\n"
  "\007user_id\030\021 \001(\r\022\024\n\014bilateral_id\030\022 \001(\t\022\024\n\014"
  "purchase_way\030\023 \001(\t\022\014\n\004text\030\024 \001(\t\022\013\n\003ytm\030"
  "\025 \001(\002\022\024\n\014strike_yeild\030\026 \001(\002\022\022\n\nquote_typ"
  "e\030\027 \001(\004\022\021\n\tmax_floor\030\030 \001(\004\022\025\n\rmin_tick_s"
  "ize\030\031 \001(\004\022\023\n\013settle_type\030\032 \001(\004\022\022\n\nmatch_"
  "type\030\033 \001(\004\022\025\n\rdelivery_type\030\034 \001(\004\022\027\n\017cle"
  "aring_method\030\035 \001(\004\022\020\n\010quote_id\030\036 \001(\t\022\030\n\020"
  "valid_until_time\030\037 \001(\t\022\024\n\014mdentry_time\030 "
  " \001(\t\022\025\n\rclient_ref_id\030! \001(\t\022\024\n\014routing_t"
  "ype\030\" \001(\004\022\030\n\020market_indicator\030# \001(\004\022\037\n\027r"
  "ealtime_undertake_flag\030$ \001(\004\022\032\n\022subject_"
  "party_type\030% \001(\004\022\026\n\016order_inner_id\030& \001(\t"
  "\022\024\n\014order_sys_id\030\' \001(\t\022\023\n\013insert_time\030( "
  "\001(\t\022\023\n\013trade_price\030) \001(\002\022\027\n\017avg_trade_pr"
  "ice\030* \001(\002\022\022\n\nvol_traded\030+ \001(\004\022\021\n\tvol_tot"
  "al\030, \001(\004\022\033\n\023order_submit_status\030- \001(\t\022\024\n"
  "\014order_status\030. \001(\t\022\022\n\ntrade_date\030/ \001(\t\022"
  "\023\n\013update_date\0300 \001(\t\022\023\n\013update_time\0301 \001("
  "\t\022\023\n\013cancel_time\0302 \001(\t\022\020\n\010ret_code\0303 \001(\004"
  "\022\017\n\007ret_msg\0304 \001(\t\022\025\n\rsettlement_id\0305 \001(\004"
  "\022\024\n\014order_source\0306 \001(\t\022\021\n\tclient_id\0307 \001("
  "\t\022\021\n\treserver1\0308 \001(\t\022\021\n\treserver2\0309 \001(\t\022"
  "\021\n\treserver3\030: \001(\t\022\021\n\treserver4\030; \001(\t\022\023\n"
  "\013sequence_no\030< \001(\r\"\272\005\n\027ficc_BilateralOrd"
  "er_Req\022 \n\004head\030\001 \001(\0132\022.message_head.head"
  "\022\022\n\ntrade_acct\030\002 \001(\t\022\021\n\tsecu_code\030\003 \001(\t\022"
  "\030\n\020order_price_type\030\004 \001(\t\022\021\n\tbid_price\030\005"
  " \001(\002\022\017\n\007bid_vol\030\006 \001(\004\022\021\n\task_price\030\007 \001(\002"
  "\022\017\n\007ask_vol\030\010 \001(\004\022\021\n\ttime_cond\030\t \001(\t\022\017\n\007"
  "user_id\030\n \001(\r\022\025\n\rstrategy_code\030\013 \001(\004\022\014\n\004"
  "text\030\014 \001(\t\022\024\n\014order_sys_id\030\r \001(\t\022\017\n\007bid_"
  "ytm\030\016 \001(\002\022\030\n\020bid_strike_yeild\030\017 \001(\002\022\031\n\021b"
  "id_legsettl_type\030\020 \001(\004\022\031\n\021bid_delivery_t"
  "ype\030\021 \001(\004\022\033\n\023bid_clearing_method\030\022 \001(\004\022\017"
  "\n\007ask_ytm\030\023 \001(\002\022\030\n\020ask_strike_yeild\030\024 \001("
  "\002\022\031\n\021ask_legsettl_type\030\025 \001(\004\022\031\n\021ask_deli"
  "very_type\030\026 \001(\004\022\033\n\023ask_clearing_method\030\027"
  " \001(\004\022\022\n\nquote_type\030\030 \001(\004\022\021\n\tmax_floor\030\031 "
  "\001(\004\022\030\n\020valid_until_time\030\032 \001(\t\022\025\n\rclient_"
  "ref_id\030\033 \001(\t\022\024\n\014routing_type\030\034 \001(\004\022\030\n\020ma"
  "rket_indicator\030\035 \001(\004\022\021\n\treserver1\030\036 \001(\t\""
  "\242\t\n\027ficc_BilateralOrder_Rtn\022 \n\004head\030\001 \001("
  "\0132\022.message_head.head\022\022\n\ntrade_acct\030\002 \001("
  "\t\022\021\n\tfund_acct\030\003 \001(\t\022\017\n\007combino\030\004 \001(\t\022\017\n"
  "\007user_id\030\005 \001(\r\022\017\n\007ex_code\030\006 \001(\t\022\026\n\016commo"
  "dity_type\030\007 \001(\t\022\021\n\tsecu_code\030\010 \001(\t\022\021\n\tse"
  "cu_name\030\t \001(\t\022\030\n\020order_price_type\030\n \001(\t\022"
  "\023\n\013offset_flag\030\013 \001(\t\022\022\n\nhedge_flag\030\014 \001(\t"
  "\022\024\n\014bilateral_id\030\r \001(\t\022\021\n\tbid_price\030\016 \001("
  "\002\022\017\n\007bid_vol\030\017 \001(\004\022\021\n\task_price\030\020 \001(\002\022\017\n"
  "\007ask_vol\030\021 \001(\004\022\021\n\ttime_cond\030\022 \001(\t\022\025\n\rstr"
  "ategy_code\030\023 \001(\004\022\014\n\004text\030\024 \001(\t\022\024\n\014order_"
  "sys_id\030\025 \001(\t\022\022\n\ntrade_date\030\026 \001(\t\022\023\n\013inse"
  "rt_time\030\027 \001(\t\022\017\n\007bid_ytm\030\030 \001(\002\022\030\n\020bid_st"
  "rike_yeild\030\031 \001(\002\022\031\n\021bid_legsettl_type\030\032 "
  "\001(\004\022\031\n\021bid_delivery_type\030\033 \001(\004\022\033\n\023bid_cl"
  "earing_method\030\034 \001(\004\022\017\n\007ask_ytm\030\035 \001(\002\022\030\n\020"
  "ask_strike_yeild\030\036 \001(\002\022\031\n\021ask_legsettl_t"
  "ype\030\037 \001(\004\022\031\n\021ask_delivery_type\030  \001(\004\022\033\n\023"
  "ask_clearing_method\030! \001(\004\022\022\n\nquote_type\030"
  "\" \001(\004\022\021\n\tmax_floor\030# \001(\004\022\030\n\020valid_until_"
  "time\030$ \001(\t\022\025\n\rclient_ref_id\030% \001(\t\022\024\n\014rou"
  "ting_type\030& \001(\004\022\030\n\020market_indicator\030\' \001("
  "\004\022\023\n\013trading_day\030( \001(\t\022\026\n\016ask_vol_traded"
  "\030) \001(\004\022\025\n\rask_vol_total\030* \001(\004\022\026\n\016bid_vol"
  "_traded\030+ \001(\004\022\025\n\rbid_vol_total\030, \001(\004\022\033\n\023"
  "order_submit_status\030- \001(\t\022\024\n\014order_statu"
  "s\030. \001(\t\022\023\n\013update_time\030/ \001(\t\022\023\n\013cancel_t"
  "ime\0300 \001(\t\022\020\n\010ret_code\0301 \001(\004\022\017\n\007ret_msg\0302"
  " \001(\t\022\023\n\013action_flag\0303 \001(\t\022\024\n\014order_sourc"
  "e\0304 \001(\t\022\023\n\013sequence_no\0305 \001(\r\"\215\001\n\022ficc_Sy"
  "stemMonitor\022 \n\004head\030\001 \001(\0132\022.message_head"
  ".head\022\016\n\006status\030\002 \001(\r\022\013\n\003msg\030\003 \001(\t\022\021\n\tse"
  "nd_time\030\004 \001(\t\022\022\n\ntkernel_ip\030\005 \001(\t\022\021\n\ttra"
  "de_day\030\006 \001(\t\"u\n\024ficc_OrderAction_Req\022 \n\004"
  "head\030\001 \001(\0132\022.message_head.head\022\026\n\016order_"
  "inner_id\030\002 \001(\t\022\022\n\nquote_type\030\003 \001(\004\022\017\n\007us"
  "er_id\030\004 \001(\r\"\255\001\n\024ficc_OrderAction_Rsp\022 \n\004"
  "head\030\001 \001(\0132\022.message_head.head\022\026\n\016order_"
  "inner_id\030\002 \001(\t\022\021\n\tsecu_code\030\003 \001(\t\022\021\n\tsen"
  "d_time\030\004 \001(\t\022\024\n\014order_status\030\005 \001(\t\022\016\n\006er"
  "r_id\030\006 \001(\r\022\017\n\007err_msg\030\007 \001(\t\"S\n\032ficc_QryB"
  "ilateralOrder_Req\022 \n\004head\030\001 \001(\0132\022.messag"
  "e_head.head\022\023\n\013sequence_no\030\002 \001(\r\"J\n\021ficc"
  "_QryMatch_Req\022 \n\004head\030\001 \001(\0132\022.message_he"
  "ad.head\022\023\n\013sequence_no\030\002 \001(\r\"\210\006\n\016ficc_Ma"
  "tch_Rtn\022 \n\004head\030\001 \001(\0132\022.message_head.hea"
  "d\022\026\n\016order_inner_id\030\002 \001(\t\022\017\n\007ex_code\030\003 \001"
  "(\t\022\023\n\013trading_day\030\004 \001(\t\022\022\n\ntrade_acct\030\005 "
  "\001(\t\022\021\n\tfund_acct\030\006 \001(\t\022\017\n\007user_id\030\007 \001(\r\022"
  "\024\n\014order_sys_id\030\010 \001(\t\022\020\n\010trade_id\030\t \001(\t\022"
  "\021\n\tsecu_code\030\n \001(\t\022\021\n\tdirection\030\013 \001(\t\022\023\n"
  "\013offset_flag\030\014 \001(\t\022\022\n\nhedge_flag\030\r \001(\t\022\023"
  "\n\013order_price\030\016 \001(\002\022\023\n\013dirty_price\030\017 \001(\002"
  "\022\023\n\013trade_price\030\020 \001(\002\022\013\n\003ytm\030\021 \001(\002\022\022\n\nvo"
  "l_traded\030\022 \001(\004\022\022\n\ntrade_date\030\023 \001(\t\022\022\n\ntr"
  "ade_time\030\024 \001(\t\022\021\n\ttrade_fee\030\025 \001(\002\022\020\n\010cur"
  "rency\030\026 \001(\t\022\022\n\nmanual_fee\030\027 \001(\t\022\024\n\014delet"
  "ed_flag\030\030 \001(\t\022\023\n\013cover_price\030\031 \001(\002\022\022\n\nex"
  "_inst_id\030\032 \001(\t\022\021\n\tbroker_id\030\033 \001(\t\022\023\n\013inv"
  "estor_id\030\034 \001(\t\022\024\n\014bilateral_id\030\035 \001(\t\022\022\n\n"
  "quote_type\030\036 \001(\004\022\023\n\013settle_type\030\037 \001(\004\022\030\n"
  "\020counter_party_id\030  \001(\t\022\034\n\024counter_party"
  "_trader\030! \001(\t\022\034\n\024accrued_interest_amt\030\" "
  "\001(\002\022\023\n\013sequence_no\030# \001(\r\022\025\n\rstrategy_cod"
  "e\030$ \001(\004\"\250\002\n\034ficc_Cfets_Makemarket_Status"
  "\022 \n\004head\030\001 \001(\0132\022.message_head.head\022\021\n\tse"
  "cu_code\030\002 \001(\t\022\021\n\tsecu_type\030\003 \001(\t\022\021\n\tsecu"
  "_name\030\004 \001(\t\022\024\n\014quote_status\030\005 \001(\r\022\025\n\rlas"
  "t_rec_time\030\006 \001(\r\022\027\n\017market_time_day\030\007 \001("
  "\r\022\025\n\rtrade_vol_day\030\010 \001(\004\022\023\n\013last_update\030"
  "\t \001(\t\022\026\n\016max_ytm_spread\030\n \001(\002\022\017\n\007min_vol"
  "\030\013 \001(\004\022\022\n\nnotify_out\030\014 \001(\r\"\312\003\n\tficc_fund"
  "\022 \n\004head\030\001 \001(\0132\022.message_head.head\022\022\n\ntr"
  "ade_acct\030\002 \001(\t\022\020\n\010currency\030\003 \001(\t\022\021\n\tfund"
  "_acct\030\004 \001(\t\022\020\n\010last_bal\030\005 \001(\002\022\017\n\007balance"
  "\030\006 \001(\002\022\022\n\navail_fund\030\007 \001(\002\022\020\n\010get_fund\030\010"
  " \001(\002\022\023\n\013base_margin\030\t \001(\002\022\026\n\016income_expe"
  "nse\030\n \001(\002\022\022\n\nfroze_fund\030\013 \001(\002\022\016\n\006margin\030"
  "\014 \001(\002\022\013\n\003fee\030\r \001(\002\022\017\n\007reserve\030\016 \001(\002\022\017\n\007s"
  "urplus\030\017 \001(\002\022\025\n\rfloat_surplus\030\020 \001(\002\022\025\n\ri"
  "nte_integral\030\021 \001(\002\022\025\n\rpuni_integral\030\022 \001("
  "\002\022\021\n\tincr_inte\030\023 \001(\002\022\014\n\004arap\030\024 \001(\002\022\022\n\nri"
  "sk_level\030\025 \001(\r\022\014\n\004risk\030\026 \001(\002\022\021\n\ttrade_da"
  "y\030\027 \001(\t\"\373\006\n\rficc_position\022 \n\004head\030\001 \001(\0132"
  "\022.message_head.head\022\023\n\013trading_day\030\002 \001(\t"
  "\022\022\n\ntrade_acct\030\003 \001(\t\022\021\n\tsecu_code\030\004 \001(\t\022"
  "\026\n\016posi_direction\030\005 \001(\t\022\022\n\nhedge_flag\030\006 "
  "\001(\t\022\026\n\016posi_date_type\030\007 \001(\t\022\021\n\tfund_acct"
  "\030\010 \001(\t\022\017\n\007ex_code\030\t \001(\t\022\033\n\023posi_profit_b"
  "y_date\030\n \001(\002\022\034\n\024posi_profit_by_trade\030\013 \001"
  "(\002\022\034\n\024close_profit_by_date\030\014 \001(\002\022\035\n\025clos"
  "e_profit_by_trade\030\r \001(\002\022\025\n\rlast_position"
  "\030\016 \001(\004\022\020\n\010posi_vol\030\017 \001(\004\022\026\n\016today_positi"
  "on\030\020 \001(\004\022\027\n\017frozen_position\030\021 \001(\004\022\025\n\rfro"
  "zen_amount\030\022 \001(\002\022\020\n\010open_vol\030\023 \001(\004\022\021\n\tcl"
  "ose_vol\030\024 \001(\004\022\023\n\013open_amount\030\025 \001(\002\022\024\n\014cl"
  "ose_amount\030\026 \001(\002\022\021\n\tposi_cost\030\027 \001(\002\022\021\n\to"
  "pen_cost\030\030 \001(\002\022\022\n\npre_margin\030\031 \001(\002\022\022\n\nus"
  "e_margin\030\032 \001(\002\022\025\n\rfrozen_margin\030\033 \001(\002\022\023\n"
  "\013frozen_cash\030\034 \001(\002\022\022\n\nfrozen_fee\030\035 \001(\002\022\016"
  "\n\006adjust\030\036 \001(\002\022\021\n\ttrade_fee\030\037 \001(\002\022\034\n\024pre"
  "_settlement_price\030  \001(\002\022\023\n\013long_frozen\030!"
  " \001(\004\022\024\n\014short_frozen\030\" \001(\004\022\032\n\022long_froze"
  "n_amount\030# \001(\002\022\033\n\023short_frozen_amount\030$ "
  "\001(\002\022\032\n\022margin_rate_by_vol\030% \001(\002\022\034\n\024margi"
  "n_rate_by_money\030& \001(\002\"\314\007\n\034ficc_Exch_Bila"
  "teralOrder_Req\022 \n\004head\030\001 \001(\0132\022.message_h"
  "ead.head\022\022\n\ntrade_acct\030\002 \001(\t\022\021\n\tfund_acc"
  "t\030\003 \001(\t\022\017\n\007combino\030\004 \001(\t\022\017\n\007user_id\030\005 \001("
  "\r\022\017\n\007ex_code\030\006 \001(\t\022\026\n\016commodity_type\030\007 \001"
  "(\t\022\021\n\tsecu_code\030\010 \001(\t\022\021\n\tsecu_name\030\t \001(\t"
  "\022\030\n\020order_price_type\030\n \001(\t\022\023\n\013offset_fla"
  "g\030\013 \001(\t\022\022\n\nhedge_flag\030\014 \001(\t\022\025\n\rseat_orde"
  "r_id\030\r \001(\t\022\021\n\tbid_price\030\016 \001(\002\022\017\n\007bid_vol"
  "\030\017 \001(\004\022\021\n\task_price\030\020 \001(\002\022\017\n\007ask_vol\030\021 \001"
  "(\004\022\021\n\ttime_cond\030\022 \001(\t\022\025\n\rstrategy_code\030\023"
  " \001(\004\022\014\n\004text\030\024 \001(\t\022\024\n\014order_sys_id\030\025 \001(\t"
  "\022\022\n\ntrade_date\030\026 \001(\t\022\023\n\013insert_time\030\027 \001("
  "\t\022\017\n\007bid_ytm\030\030 \001(\002\022\030\n\020bid_strike_yeild\030\031"
  " \001(\002\022\031\n\021bid_legsettl_type\030\032 \001(\004\022\031\n\021bid_d"
  "elivery_type\030\033 \001(\004\022\033\n\023bid_clearing_metho"
  "d\030\034 \001(\004\022\017\n\007ask_ytm\030\035 \001(\002\022\030\n\020ask_strike_y"
  "eild\030\036 \001(\002\022\031\n\021ask_legsettl_type\030\037 \001(\004\022\031\n"
  "\021ask_delivery_type\030  \001(\004\022\033\n\023ask_clearing"
  "_method\030! \001(\004\022\022\n\nquote_type\030\" \001(\004\022\021\n\tmax"
  "_floor\030# \001(\004\022\030\n\020valid_until_time\030$ \001(\t\022\025"
  "\n\rclient_ref_id\030% \001(\t\022\024\n\014routing_type\030& "
  "\001(\004\022\030\n\020market_indicator\030\' \001(\004\022\024\n\014order_s"
  "ource\030( \001(\t\022\024\n\014secu_type_id\030) \001(\t\022\020\n\010mat"
  "urity\030* \001(\t\022\027\n\017issuer_party_id\030+ \001(\t\"\312\005\n"
  "\034ficc_Exch_BilateralOrder_Rtn\022 \n\004head\030\001 "
  "\001(\0132\022.message_head.head\022\024\n\014order_status\030"
  "\002 \001(\t\022\024\n\014acction_flag\030\003 \001(\t\022\030\n\020valid_unt"
  "il_time\030\004 \001(\t\022\025\n\rseat_order_id\030\005 \001(\t\022\024\n\014"
  "order_sys_id\030\006 \001(\t\022\023\n\013insert_date\030\007 \001(\t\022"
  "\023\n\013update_time\030\010 \001(\t\022\021\n\tsecu_code\030\t \001(\t\022"
  "\021\n\tmax_floor\030\n \001(\004\022\017\n\007bid_vol\030\013 \001(\004\022\026\n\016b"
  "id_vol_traded\030\014 \001(\004\022\025\n\rbid_vol_total\030\r \001"
  "(\004\022\017\n\007ask_vol\030\016 \001(\004\022\026\n\016ask_vol_traded\030\017 "
  "\001(\004\022\025\n\rask_vol_total\030\020 \001(\004\022\021\n\tbid_price\030"
  "\021 \001(\002\022\021\n\task_price\030\022 \001(\002\022\031\n\021bid_legsettl"
  "_type\030\023 \001(\004\022\031\n\021bid_delivery_type\030\024 \001(\004\022\033"
  "\n\023bid_clearing_method\030\025 \001(\004\022\017\n\007bid_ytm\030\026"
  " \001(\002\022\030\n\020bid_strike_yeild\030\027 \001(\002\022\031\n\021ask_le"
  "gsettl_type\030\030 \001(\004\022\031\n\021ask_delivery_type\030\031"
  " \001(\004\022\033\n\023ask_clearing_method\030\032 \001(\004\022\017\n\007ask"
  "_ytm\030\033 \001(\002\022\030\n\020ask_strike_yeild\030\034 \001(\002\022\021\n\t"
  "fund_acct\030\035 \001(\t\022\020\n\010trade_id\030\036 \001(\t\"\355\002\n\023fi"
  "cc_Exch_Match_Rtn\022 \n\004head\030\001 \001(\0132\022.messag"
  "e_head.head\022\020\n\010trade_id\030\002 \001(\t\022\022\n\ntrade_d"
  "ate\030\003 \001(\t\022\022\n\ntrade_time\030\004 \001(\t\022\024\n\014order_s"
  "ys_id\030\005 \001(\t\022\025\n\rseat_order_id\030\006 \001(\t\022\021\n\tse"
  "cu_code\030\007 \001(\t\022\023\n\013trade_price\030\010 \001(\002\022\034\n\024ac"
  "crued_interest_amt\030\t \001(\002\022\022\n\nvol_traded\030\n"
  " \001(\004\022\030\n\020counter_party_id\030\013 \001(\t\022\034\n\024counte"
  "r_party_trader\030\014 \001(\t\022\023\n\013investor_id\030\r \001("
  "\t\022\021\n\tfund_acct\030\016 \001(\t\022\023\n\013settle_type\030\017 \001("
  "\004\"\370\004\n\026ficc_Exch_Order_Action\022 \n\004head\030\001 \001"
  "(\0132\022.message_head.head\022\026\n\016order_inner_id"
  "\030\002 \001(\t\022\023\n\013investor_id\030\003 \001(\t\022\017\n\007user_id\030\004"
  " \001(\r\022\024\n\014acction_flag\030\005 \001(\t\022\r\n\005price\030\006 \001("
  "\002\022\013\n\003vol\030\007 \001(\004\022\021\n\tbroker_id\030\010 \001(\t\022\017\n\007ex_"
  "code\030\t \001(\t\022\024\n\014order_sys_id\030\n \001(\t\022\025\n\rstra"
  "tegy_code\030\013 \001(\004\022\022\n\ntrade_acct\030\014 \001(\t\022\021\n\ts"
  "ecu_code\030\r \001(\t\022\026\n\016commodity_type\030\016 \001(\t\022\022"
  "\n\nmatch_type\030\017 \001(\004\022\022\n\nquote_type\030\020 \001(\004\022\030"
  "\n\020valid_until_time\030\021 \001(\t\022\023\n\013insert_time\030"
  "\022 \001(\t\022\025\n\rclient_ref_id\030\023 \001(\t\022\030\n\020market_i"
  "ndicator\030\024 \001(\004\022\021\n\tdirection\030\025 \001(\t\022\024\n\014quo"
  "te_req_id\030\026 \001(\t\022\013\n\003ytm\030\027 \001(\002\022\024\n\014strike_y"
  "eild\030\030 \001(\002\022\026\n\016acction_status\030\031 \001(\t\022\022\n\nst"
  "atus_msg\030\032 \001(\t\022\024\n\014acction_date\030\033 \001(\t\022\024\n\014"
  "acction_time\030\034 \001(\t\022\020\n\010trade_id\030\035 \001(\t\"\332\007\n"
  "\023ficc_Exch_Order_Req\022 \n\004head\030\001 \001(\0132\022.mes"
  "sage_head.head\022\022\n\ntrade_acct\030\002 \001(\t\022\021\n\tfu"
  "nd_acct\030\003 \001(\t\022\017\n\007combino\030\004 \001(\t\022\023\n\013tradin"
  "g_day\030\005 \001(\t\022\017\n\007ex_code\030\006 \001(\t\022\021\n\tsecu_cod"
  "e\030\007 \001(\t\022\021\n\tsecu_name\030\010 \001(\t\022\030\n\020order_pric"
  "e_type\030\t \001(\t\022\021\n\tdirection\030\n \001(\t\022\023\n\013offse"
  "t_flag\030\013 \001(\t\022\022\n\nhedge_flag\030\014 \001(\t\022\r\n\005pric"
  "e\030\r \001(\002\022\013\n\003vol\030\016 \001(\004\022\021\n\ttime_cond\030\017 \001(\t\022"
  "\025\n\rstrategy_code\030\020 \001(\004\022\017\n\007user_id\030\021 \001(\r\022"
  "\025\n\rseat_order_id\030\022 \001(\t\022\024\n\014purchase_way\030\023"
  " \001(\t\022\014\n\004text\030\024 \001(\t\022\013\n\003ytm\030\025 \001(\002\022\024\n\014strik"
  "e_yeild\030\026 \001(\002\022\022\n\nquote_type\030\027 \001(\004\022\021\n\tmax"
  "_floor\030\030 \001(\004\022\025\n\rmin_tick_size\030\031 \001(\004\022\023\n\013s"
  "ettle_type\030\032 \001(\004\022\022\n\nmatch_type\030\033 \001(\004\022\025\n\r"
  "delivery_type\030\034 \001(\004\022\027\n\017clearing_method\030\035"
  " \001(\004\022\020\n\010quote_id\030\036 \001(\t\022\030\n\020valid_until_ti"
  "me\030\037 \001(\t\022\024\n\014mdentry_time\030  \001(\t\022\025\n\rclient"
  "_ref_id\030! \001(\t\022\024\n\014routing_type\030\" \001(\004\022\030\n\020m"
  "arket_indicator\030# \001(\004\022\037\n\027realtime_undert"
  "ake_flag\030$ \001(\004\022\032\n\022subject_party_type\030% \001"
  "(\004\022\026\n\016order_inner_id\030& \001(\t\022\024\n\014order_sys_"
  "id\030\' \001(\t\022\023\n\013insert_time\030( \001(\t\022\024\n\014order_s"
  "ource\030) \001(\t\022\021\n\treserver1\030* \001(\t\022\021\n\treserv"
  "er2\030+ \001(\t\022\021\n\treserver3\030, \001(\t\022\021\n\treserver"
  "4\030- \001(\t\022\020\n\010maturity\030. \001(\t\"\234\003\n\023ficc_Exch_"
  "Order_Rtn\022 \n\004head\030\001 \001(\0132\022.message_head.h"
  "ead\022\024\n\014order_status\030\002 \001(\t\022\025\n\rseat_order_"
  "id\030\003 \001(\t\022\024\n\014order_sys_id\030\004 \001(\t\022\023\n\013insert"
  "_date\030\005 \001(\t\022\023\n\013update_time\030\006 \001(\t\022\021\n\tsecu"
  "_code\030\007 \001(\t\022\021\n\tmax_floor\030\010 \001(\004\022\013\n\003vol\030\t "
  "\001(\004\022\022\n\nvol_traded\030\n \001(\004\022\021\n\tvol_total\030\013 \001"
  "(\004\022\r\n\005price\030\014 \001(\002\022\025\n\rlegsettl_type\030\r \001(\004"
  "\022\025\n\rdelivery_type\030\016 \001(\004\022\027\n\017clearing_meth"
  "od\030\017 \001(\004\022\013\n\003ytm\030\020 \001(\002\022\024\n\014strike_yeild\030\021 "
  "\001(\002\022\021\n\tfund_acct\030\022 \001(\t\022\020\n\010trade_id\030\023 \001(\t"
  "B%\n\025com.lhhj.common.protoB\014TradeServiceb"
  "\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ficc_2eproto_deps[1] = {
  &::descriptor_table_message_5fhead_2eproto,
};
static ::_pbi::once_flag descriptor_table_ficc_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ficc_2eproto = {
    false, false, 11327, descriptor_table_protodef_ficc_2eproto,
    "ficc.proto",
    &descriptor_table_ficc_2eproto_once, descriptor_table_ficc_2eproto_deps, 1, 20,
    schemas, file_default_instances, TableStruct_ficc_2eproto::offsets,
    file_level_metadata_ficc_2eproto, file_level_enum_descriptors_ficc_2eproto,
    file_level_service_descriptors_ficc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ficc_2eproto_getter() {
  return &descriptor_table_ficc_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ficc_2eproto(&descriptor_table_ficc_2eproto);
namespace ficc_message {

// ===================================================================

class ficc_Order_Req::_Internal {
 public:
  static const ::message_head::head& head(const ficc_Order_Req* msg);
};

const ::message_head::head&
ficc_Order_Req::_Internal::head(const ficc_Order_Req* msg) {
  return *msg->head_;
}
void ficc_Order_Req::clear_head() {
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
}
ficc_Order_Req::ficc_Order_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ficc_message.ficc_Order_Req)
}
ficc_Order_Req::ficc_Order_Req(const ficc_Order_Req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trade_acct_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trade_acct_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trade_acct().empty()) {
    trade_acct_.Set(from._internal_trade_acct(), 
      GetArenaForAllocation());
  }
  secu_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secu_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secu_code().empty()) {
    secu_code_.Set(from._internal_secu_code(), 
      GetArenaForAllocation());
  }
  order_price_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_price_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_price_type().empty()) {
    order_price_type_.Set(from._internal_order_price_type(), 
      GetArenaForAllocation());
  }
  direction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    direction_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_direction().empty()) {
    direction_.Set(from._internal_direction(), 
      GetArenaForAllocation());
  }
  offset_flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    offset_flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_offset_flag().empty()) {
    offset_flag_.Set(from._internal_offset_flag(), 
      GetArenaForAllocation());
  }
  hedge_flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hedge_flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hedge_flag().empty()) {
    hedge_flag_.Set(from._internal_hedge_flag(), 
      GetArenaForAllocation());
  }
  time_cond_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    time_cond_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_time_cond().empty()) {
    time_cond_.Set(from._internal_time_cond(), 
      GetArenaForAllocation());
  }
  purchase_way_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    purchase_way_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_purchase_way().empty()) {
    purchase_way_.Set(from._internal_purchase_way(), 
      GetArenaForAllocation());
  }
  text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    text_.Set(from._internal_text(), 
      GetArenaForAllocation());
  }
  valid_until_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    valid_until_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_valid_until_time().empty()) {
    valid_until_time_.Set(from._internal_valid_until_time(), 
      GetArenaForAllocation());
  }
  mdentry_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mdentry_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mdentry_time().empty()) {
    mdentry_time_.Set(from._internal_mdentry_time(), 
      GetArenaForAllocation());
  }
  client_ref_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    client_ref_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_ref_id().empty()) {
    client_ref_id_.Set(from._internal_client_ref_id(), 
      GetArenaForAllocation());
  }
  reserver1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reserver1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reserver1().empty()) {
    reserver1_.Set(from._internal_reserver1(), 
      GetArenaForAllocation());
  }
  quote_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    quote_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quote_id().empty()) {
    quote_id_.Set(from._internal_quote_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_head()) {
    head_ = new ::message_head::head(*from.head_);
  } else {
    head_ = nullptr;
  }
  ::memcpy(&vol_, &from.vol_,
    static_cast<size_t>(reinterpret_cast<char*>(&subject_party_type_) -
    reinterpret_cast<char*>(&vol_)) + sizeof(subject_party_type_));
  // @@protoc_insertion_point(copy_constructor:ficc_message.ficc_Order_Req)
}

inline void ficc_Order_Req::SharedCtor() {
trade_acct_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trade_acct_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secu_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secu_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
order_price_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_price_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
direction_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  direction_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
offset_flag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  offset_flag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
hedge_flag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hedge_flag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
time_cond_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  time_cond_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
purchase_way_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  purchase_way_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
text_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
valid_until_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  valid_until_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mdentry_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mdentry_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
client_ref_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  client_ref_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
reserver1_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reserver1_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
quote_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  quote_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&head_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&subject_party_type_) -
    reinterpret_cast<char*>(&head_)) + sizeof(subject_party_type_));
}

ficc_Order_Req::~ficc_Order_Req() {
  // @@protoc_insertion_point(destructor:ficc_message.ficc_Order_Req)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ficc_Order_Req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  trade_acct_.Destroy();
  secu_code_.Destroy();
  order_price_type_.Destroy();
  direction_.Destroy();
  offset_flag_.Destroy();
  hedge_flag_.Destroy();
  time_cond_.Destroy();
  purchase_way_.Destroy();
  text_.Destroy();
  valid_until_time_.Destroy();
  mdentry_time_.Destroy();
  client_ref_id_.Destroy();
  reserver1_.Destroy();
  quote_id_.Destroy();
  if (this != internal_default_instance()) delete head_;
}

void ficc_Order_Req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ficc_Order_Req::Clear() {
// @@protoc_insertion_point(message_clear_start:ficc_message.ficc_Order_Req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trade_acct_.ClearToEmpty();
  secu_code_.ClearToEmpty();
  order_price_type_.ClearToEmpty();
  direction_.ClearToEmpty();
  offset_flag_.ClearToEmpty();
  hedge_flag_.ClearToEmpty();
  time_cond_.ClearToEmpty();
  purchase_way_.ClearToEmpty();
  text_.ClearToEmpty();
  valid_until_time_.ClearToEmpty();
  mdentry_time_.ClearToEmpty();
  client_ref_id_.ClearToEmpty();
  reserver1_.ClearToEmpty();
  quote_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  ::memset(&vol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subject_party_type_) -
      reinterpret_cast<char*>(&vol_)) + sizeof(subject_party_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ficc_Order_Req::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message_head.head head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string trade_acct = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_trade_acct();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Req.trade_acct"));
        } else
          goto handle_unusual;
        continue;
      // string secu_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_secu_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Req.secu_code"));
        } else
          goto handle_unusual;
        continue;
      // string order_price_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_order_price_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Req.order_price_type"));
        } else
          goto handle_unusual;
        continue;
      // string direction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_direction();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Req.direction"));
        } else
          goto handle_unusual;
        continue;
      // string offset_flag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_offset_flag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Req.offset_flag"));
        } else
          goto handle_unusual;
        continue;
      // string hedge_flag = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_hedge_flag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Req.hedge_flag"));
        } else
          goto handle_unusual;
        continue;
      // float price = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 vol = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          vol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string time_cond = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_time_cond();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Req.time_cond"));
        } else
          goto handle_unusual;
        continue;
      // uint64 strategy_code = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          strategy_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 user_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string purchase_way = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_purchase_way();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Req.purchase_way"));
        } else
          goto handle_unusual;
        continue;
      // string text = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Req.text"));
        } else
          goto handle_unusual;
        continue;
      // float ytm = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          ytm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float strike_yeild = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          strike_yeild_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 quote_type = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          quote_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 max_floor = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          max_floor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 min_tick_size = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          min_tick_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 settle_type = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          settle_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 match_type = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          match_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 delivery_type = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          delivery_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 clearing_method = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          clearing_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string valid_until_time = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_valid_until_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Req.valid_until_time"));
        } else
          goto handle_unusual;
        continue;
      // string mdentry_time = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_mdentry_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Req.mdentry_time"));
        } else
          goto handle_unusual;
        continue;
      // string client_ref_id = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_client_ref_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Req.client_ref_id"));
        } else
          goto handle_unusual;
        continue;
      // uint64 routing_type = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          routing_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 market_indicator = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          market_indicator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 realtime_undertake_flag = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          realtime_undertake_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 subject_party_type = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          subject_party_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string reserver1 = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_reserver1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Req.reserver1"));
        } else
          goto handle_unusual;
        continue;
      // string quote_id = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          auto str = _internal_mutable_quote_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Req.quote_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ficc_Order_Req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ficc_message.ficc_Order_Req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // string trade_acct = 2;
  if (!this->_internal_trade_acct().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trade_acct().data(), static_cast<int>(this->_internal_trade_acct().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Req.trade_acct");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_trade_acct(), target);
  }

  // string secu_code = 3;
  if (!this->_internal_secu_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secu_code().data(), static_cast<int>(this->_internal_secu_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Req.secu_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_secu_code(), target);
  }

  // string order_price_type = 4;
  if (!this->_internal_order_price_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_price_type().data(), static_cast<int>(this->_internal_order_price_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Req.order_price_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_order_price_type(), target);
  }

  // string direction = 5;
  if (!this->_internal_direction().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_direction().data(), static_cast<int>(this->_internal_direction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Req.direction");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_direction(), target);
  }

  // string offset_flag = 6;
  if (!this->_internal_offset_flag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_offset_flag().data(), static_cast<int>(this->_internal_offset_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Req.offset_flag");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_offset_flag(), target);
  }

  // string hedge_flag = 7;
  if (!this->_internal_hedge_flag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hedge_flag().data(), static_cast<int>(this->_internal_hedge_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Req.hedge_flag");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_hedge_flag(), target);
  }

  // float price = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_price = this->_internal_price();
  uint32_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_price(), target);
  }

  // uint64 vol = 9;
  if (this->_internal_vol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_vol(), target);
  }

  // string time_cond = 10;
  if (!this->_internal_time_cond().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time_cond().data(), static_cast<int>(this->_internal_time_cond().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Req.time_cond");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_time_cond(), target);
  }

  // uint64 strategy_code = 11;
  if (this->_internal_strategy_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_strategy_code(), target);
  }

  // uint32 user_id = 12;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_user_id(), target);
  }

  // string purchase_way = 13;
  if (!this->_internal_purchase_way().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_purchase_way().data(), static_cast<int>(this->_internal_purchase_way().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Req.purchase_way");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_purchase_way(), target);
  }

  // string text = 14;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Req.text");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_text(), target);
  }

  // float ytm = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ytm = this->_internal_ytm();
  uint32_t raw_ytm;
  memcpy(&raw_ytm, &tmp_ytm, sizeof(tmp_ytm));
  if (raw_ytm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_ytm(), target);
  }

  // float strike_yeild = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_strike_yeild = this->_internal_strike_yeild();
  uint32_t raw_strike_yeild;
  memcpy(&raw_strike_yeild, &tmp_strike_yeild, sizeof(tmp_strike_yeild));
  if (raw_strike_yeild != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_strike_yeild(), target);
  }

  // uint64 quote_type = 17;
  if (this->_internal_quote_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(17, this->_internal_quote_type(), target);
  }

  // uint64 max_floor = 18;
  if (this->_internal_max_floor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(18, this->_internal_max_floor(), target);
  }

  // uint64 min_tick_size = 19;
  if (this->_internal_min_tick_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(19, this->_internal_min_tick_size(), target);
  }

  // uint64 settle_type = 20;
  if (this->_internal_settle_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(20, this->_internal_settle_type(), target);
  }

  // uint64 match_type = 21;
  if (this->_internal_match_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(21, this->_internal_match_type(), target);
  }

  // uint64 delivery_type = 22;
  if (this->_internal_delivery_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(22, this->_internal_delivery_type(), target);
  }

  // uint64 clearing_method = 23;
  if (this->_internal_clearing_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(23, this->_internal_clearing_method(), target);
  }

  // string valid_until_time = 24;
  if (!this->_internal_valid_until_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_valid_until_time().data(), static_cast<int>(this->_internal_valid_until_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Req.valid_until_time");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_valid_until_time(), target);
  }

  // string mdentry_time = 25;
  if (!this->_internal_mdentry_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mdentry_time().data(), static_cast<int>(this->_internal_mdentry_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Req.mdentry_time");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_mdentry_time(), target);
  }

  // string client_ref_id = 26;
  if (!this->_internal_client_ref_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_ref_id().data(), static_cast<int>(this->_internal_client_ref_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Req.client_ref_id");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_client_ref_id(), target);
  }

  // uint64 routing_type = 27;
  if (this->_internal_routing_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(27, this->_internal_routing_type(), target);
  }

  // uint64 market_indicator = 28;
  if (this->_internal_market_indicator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(28, this->_internal_market_indicator(), target);
  }

  // uint64 realtime_undertake_flag = 29;
  if (this->_internal_realtime_undertake_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(29, this->_internal_realtime_undertake_flag(), target);
  }

  // uint64 subject_party_type = 30;
  if (this->_internal_subject_party_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(30, this->_internal_subject_party_type(), target);
  }

  // string reserver1 = 31;
  if (!this->_internal_reserver1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reserver1().data(), static_cast<int>(this->_internal_reserver1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Req.reserver1");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_reserver1(), target);
  }

  // string quote_id = 32;
  if (!this->_internal_quote_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quote_id().data(), static_cast<int>(this->_internal_quote_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Req.quote_id");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_quote_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ficc_message.ficc_Order_Req)
  return target;
}

size_t ficc_Order_Req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ficc_message.ficc_Order_Req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trade_acct = 2;
  if (!this->_internal_trade_acct().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trade_acct());
  }

  // string secu_code = 3;
  if (!this->_internal_secu_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secu_code());
  }

  // string order_price_type = 4;
  if (!this->_internal_order_price_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_price_type());
  }

  // string direction = 5;
  if (!this->_internal_direction().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_direction());
  }

  // string offset_flag = 6;
  if (!this->_internal_offset_flag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_offset_flag());
  }

  // string hedge_flag = 7;
  if (!this->_internal_hedge_flag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hedge_flag());
  }

  // string time_cond = 10;
  if (!this->_internal_time_cond().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time_cond());
  }

  // string purchase_way = 13;
  if (!this->_internal_purchase_way().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_purchase_way());
  }

  // string text = 14;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string valid_until_time = 24;
  if (!this->_internal_valid_until_time().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_valid_until_time());
  }

  // string mdentry_time = 25;
  if (!this->_internal_mdentry_time().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mdentry_time());
  }

  // string client_ref_id = 26;
  if (!this->_internal_client_ref_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_ref_id());
  }

  // string reserver1 = 31;
  if (!this->_internal_reserver1().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reserver1());
  }

  // string quote_id = 32;
  if (!this->_internal_quote_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quote_id());
  }

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  // uint64 vol = 9;
  if (this->_internal_vol() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_vol());
  }

  // float price = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_price = this->_internal_price();
  uint32_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    total_size += 1 + 4;
  }

  // uint32 user_id = 12;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // uint64 strategy_code = 11;
  if (this->_internal_strategy_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_strategy_code());
  }

  // float ytm = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ytm = this->_internal_ytm();
  uint32_t raw_ytm;
  memcpy(&raw_ytm, &tmp_ytm, sizeof(tmp_ytm));
  if (raw_ytm != 0) {
    total_size += 1 + 4;
  }

  // float strike_yeild = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_strike_yeild = this->_internal_strike_yeild();
  uint32_t raw_strike_yeild;
  memcpy(&raw_strike_yeild, &tmp_strike_yeild, sizeof(tmp_strike_yeild));
  if (raw_strike_yeild != 0) {
    total_size += 2 + 4;
  }

  // uint64 quote_type = 17;
  if (this->_internal_quote_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_quote_type());
  }

  // uint64 max_floor = 18;
  if (this->_internal_max_floor() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_max_floor());
  }

  // uint64 min_tick_size = 19;
  if (this->_internal_min_tick_size() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_min_tick_size());
  }

  // uint64 settle_type = 20;
  if (this->_internal_settle_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_settle_type());
  }

  // uint64 match_type = 21;
  if (this->_internal_match_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_match_type());
  }

  // uint64 delivery_type = 22;
  if (this->_internal_delivery_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_delivery_type());
  }

  // uint64 clearing_method = 23;
  if (this->_internal_clearing_method() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_clearing_method());
  }

  // uint64 routing_type = 27;
  if (this->_internal_routing_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_routing_type());
  }

  // uint64 market_indicator = 28;
  if (this->_internal_market_indicator() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_market_indicator());
  }

  // uint64 realtime_undertake_flag = 29;
  if (this->_internal_realtime_undertake_flag() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_realtime_undertake_flag());
  }

  // uint64 subject_party_type = 30;
  if (this->_internal_subject_party_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_subject_party_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ficc_Order_Req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ficc_Order_Req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ficc_Order_Req::GetClassData() const { return &_class_data_; }

void ficc_Order_Req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ficc_Order_Req *>(to)->MergeFrom(
      static_cast<const ficc_Order_Req &>(from));
}


void ficc_Order_Req::MergeFrom(const ficc_Order_Req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ficc_message.ficc_Order_Req)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_trade_acct().empty()) {
    _internal_set_trade_acct(from._internal_trade_acct());
  }
  if (!from._internal_secu_code().empty()) {
    _internal_set_secu_code(from._internal_secu_code());
  }
  if (!from._internal_order_price_type().empty()) {
    _internal_set_order_price_type(from._internal_order_price_type());
  }
  if (!from._internal_direction().empty()) {
    _internal_set_direction(from._internal_direction());
  }
  if (!from._internal_offset_flag().empty()) {
    _internal_set_offset_flag(from._internal_offset_flag());
  }
  if (!from._internal_hedge_flag().empty()) {
    _internal_set_hedge_flag(from._internal_hedge_flag());
  }
  if (!from._internal_time_cond().empty()) {
    _internal_set_time_cond(from._internal_time_cond());
  }
  if (!from._internal_purchase_way().empty()) {
    _internal_set_purchase_way(from._internal_purchase_way());
  }
  if (!from._internal_text().empty()) {
    _internal_set_text(from._internal_text());
  }
  if (!from._internal_valid_until_time().empty()) {
    _internal_set_valid_until_time(from._internal_valid_until_time());
  }
  if (!from._internal_mdentry_time().empty()) {
    _internal_set_mdentry_time(from._internal_mdentry_time());
  }
  if (!from._internal_client_ref_id().empty()) {
    _internal_set_client_ref_id(from._internal_client_ref_id());
  }
  if (!from._internal_reserver1().empty()) {
    _internal_set_reserver1(from._internal_reserver1());
  }
  if (!from._internal_quote_id().empty()) {
    _internal_set_quote_id(from._internal_quote_id());
  }
  if (from._internal_has_head()) {
    _internal_mutable_head()->::message_head::head::MergeFrom(from._internal_head());
  }
  if (from._internal_vol() != 0) {
    _internal_set_vol(from._internal_vol());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_price = from._internal_price();
  uint32_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_strategy_code() != 0) {
    _internal_set_strategy_code(from._internal_strategy_code());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ytm = from._internal_ytm();
  uint32_t raw_ytm;
  memcpy(&raw_ytm, &tmp_ytm, sizeof(tmp_ytm));
  if (raw_ytm != 0) {
    _internal_set_ytm(from._internal_ytm());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_strike_yeild = from._internal_strike_yeild();
  uint32_t raw_strike_yeild;
  memcpy(&raw_strike_yeild, &tmp_strike_yeild, sizeof(tmp_strike_yeild));
  if (raw_strike_yeild != 0) {
    _internal_set_strike_yeild(from._internal_strike_yeild());
  }
  if (from._internal_quote_type() != 0) {
    _internal_set_quote_type(from._internal_quote_type());
  }
  if (from._internal_max_floor() != 0) {
    _internal_set_max_floor(from._internal_max_floor());
  }
  if (from._internal_min_tick_size() != 0) {
    _internal_set_min_tick_size(from._internal_min_tick_size());
  }
  if (from._internal_settle_type() != 0) {
    _internal_set_settle_type(from._internal_settle_type());
  }
  if (from._internal_match_type() != 0) {
    _internal_set_match_type(from._internal_match_type());
  }
  if (from._internal_delivery_type() != 0) {
    _internal_set_delivery_type(from._internal_delivery_type());
  }
  if (from._internal_clearing_method() != 0) {
    _internal_set_clearing_method(from._internal_clearing_method());
  }
  if (from._internal_routing_type() != 0) {
    _internal_set_routing_type(from._internal_routing_type());
  }
  if (from._internal_market_indicator() != 0) {
    _internal_set_market_indicator(from._internal_market_indicator());
  }
  if (from._internal_realtime_undertake_flag() != 0) {
    _internal_set_realtime_undertake_flag(from._internal_realtime_undertake_flag());
  }
  if (from._internal_subject_party_type() != 0) {
    _internal_set_subject_party_type(from._internal_subject_party_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ficc_Order_Req::CopyFrom(const ficc_Order_Req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ficc_message.ficc_Order_Req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ficc_Order_Req::IsInitialized() const {
  return true;
}

void ficc_Order_Req::InternalSwap(ficc_Order_Req* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trade_acct_, lhs_arena,
      &other->trade_acct_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &secu_code_, lhs_arena,
      &other->secu_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_price_type_, lhs_arena,
      &other->order_price_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &direction_, lhs_arena,
      &other->direction_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &offset_flag_, lhs_arena,
      &other->offset_flag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &hedge_flag_, lhs_arena,
      &other->hedge_flag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &time_cond_, lhs_arena,
      &other->time_cond_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &purchase_way_, lhs_arena,
      &other->purchase_way_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &valid_until_time_, lhs_arena,
      &other->valid_until_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &mdentry_time_, lhs_arena,
      &other->mdentry_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &client_ref_id_, lhs_arena,
      &other->client_ref_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &reserver1_, lhs_arena,
      &other->reserver1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &quote_id_, lhs_arena,
      &other->quote_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ficc_Order_Req, subject_party_type_)
      + sizeof(ficc_Order_Req::subject_party_type_)
      - PROTOBUF_FIELD_OFFSET(ficc_Order_Req, head_)>(
          reinterpret_cast<char*>(&head_),
          reinterpret_cast<char*>(&other->head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ficc_Order_Req::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ficc_2eproto_getter, &descriptor_table_ficc_2eproto_once,
      file_level_metadata_ficc_2eproto[0]);
}

// ===================================================================

class ficc_Order_Rsp::_Internal {
 public:
  static const ::message_head::head& head(const ficc_Order_Rsp* msg);
};

const ::message_head::head&
ficc_Order_Rsp::_Internal::head(const ficc_Order_Rsp* msg) {
  return *msg->head_;
}
void ficc_Order_Rsp::clear_head() {
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
}
ficc_Order_Rsp::ficc_Order_Rsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ficc_message.ficc_Order_Rsp)
}
ficc_Order_Rsp::ficc_Order_Rsp(const ficc_Order_Rsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trade_acct_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trade_acct_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trade_acct().empty()) {
    trade_acct_.Set(from._internal_trade_acct(), 
      GetArenaForAllocation());
  }
  fund_acct_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fund_acct_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fund_acct().empty()) {
    fund_acct_.Set(from._internal_fund_acct(), 
      GetArenaForAllocation());
  }
  combino_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    combino_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_combino().empty()) {
    combino_.Set(from._internal_combino(), 
      GetArenaForAllocation());
  }
  secu_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secu_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secu_code().empty()) {
    secu_code_.Set(from._internal_secu_code(), 
      GetArenaForAllocation());
  }
  order_inner_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_inner_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_inner_id().empty()) {
    order_inner_id_.Set(from._internal_order_inner_id(), 
      GetArenaForAllocation());
  }
  send_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    send_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_send_time().empty()) {
    send_time_.Set(from._internal_send_time(), 
      GetArenaForAllocation());
  }
  order_status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_status().empty()) {
    order_status_.Set(from._internal_order_status(), 
      GetArenaForAllocation());
  }
  err_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    err_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_err_msg().empty()) {
    err_msg_.Set(from._internal_err_msg(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_head()) {
    head_ = new ::message_head::head(*from.head_);
  } else {
    head_ = nullptr;
  }
  err_id_ = from.err_id_;
  // @@protoc_insertion_point(copy_constructor:ficc_message.ficc_Order_Rsp)
}

inline void ficc_Order_Rsp::SharedCtor() {
trade_acct_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trade_acct_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
fund_acct_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fund_acct_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
combino_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  combino_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secu_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secu_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
order_inner_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_inner_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
send_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  send_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
order_status_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_status_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
err_msg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  err_msg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&head_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_id_) -
    reinterpret_cast<char*>(&head_)) + sizeof(err_id_));
}

ficc_Order_Rsp::~ficc_Order_Rsp() {
  // @@protoc_insertion_point(destructor:ficc_message.ficc_Order_Rsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ficc_Order_Rsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  trade_acct_.Destroy();
  fund_acct_.Destroy();
  combino_.Destroy();
  secu_code_.Destroy();
  order_inner_id_.Destroy();
  send_time_.Destroy();
  order_status_.Destroy();
  err_msg_.Destroy();
  if (this != internal_default_instance()) delete head_;
}

void ficc_Order_Rsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ficc_Order_Rsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ficc_message.ficc_Order_Rsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trade_acct_.ClearToEmpty();
  fund_acct_.ClearToEmpty();
  combino_.ClearToEmpty();
  secu_code_.ClearToEmpty();
  order_inner_id_.ClearToEmpty();
  send_time_.ClearToEmpty();
  order_status_.ClearToEmpty();
  err_msg_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  err_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ficc_Order_Rsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message_head.head head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string trade_acct = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_trade_acct();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rsp.trade_acct"));
        } else
          goto handle_unusual;
        continue;
      // string fund_acct = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_fund_acct();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rsp.fund_acct"));
        } else
          goto handle_unusual;
        continue;
      // string combino = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_combino();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rsp.combino"));
        } else
          goto handle_unusual;
        continue;
      // string secu_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_secu_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rsp.secu_code"));
        } else
          goto handle_unusual;
        continue;
      // string order_inner_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_order_inner_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rsp.order_inner_id"));
        } else
          goto handle_unusual;
        continue;
      // string send_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_send_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rsp.send_time"));
        } else
          goto handle_unusual;
        continue;
      // string order_status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_order_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rsp.order_status"));
        } else
          goto handle_unusual;
        continue;
      // uint32 err_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          err_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string err_msg = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_err_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rsp.err_msg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ficc_Order_Rsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ficc_message.ficc_Order_Rsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // string trade_acct = 2;
  if (!this->_internal_trade_acct().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trade_acct().data(), static_cast<int>(this->_internal_trade_acct().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rsp.trade_acct");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_trade_acct(), target);
  }

  // string fund_acct = 3;
  if (!this->_internal_fund_acct().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fund_acct().data(), static_cast<int>(this->_internal_fund_acct().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rsp.fund_acct");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_fund_acct(), target);
  }

  // string combino = 4;
  if (!this->_internal_combino().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_combino().data(), static_cast<int>(this->_internal_combino().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rsp.combino");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_combino(), target);
  }

  // string secu_code = 5;
  if (!this->_internal_secu_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secu_code().data(), static_cast<int>(this->_internal_secu_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rsp.secu_code");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_secu_code(), target);
  }

  // string order_inner_id = 6;
  if (!this->_internal_order_inner_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_inner_id().data(), static_cast<int>(this->_internal_order_inner_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rsp.order_inner_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_order_inner_id(), target);
  }

  // string send_time = 7;
  if (!this->_internal_send_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_send_time().data(), static_cast<int>(this->_internal_send_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rsp.send_time");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_send_time(), target);
  }

  // string order_status = 8;
  if (!this->_internal_order_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_status().data(), static_cast<int>(this->_internal_order_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rsp.order_status");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_order_status(), target);
  }

  // uint32 err_id = 9;
  if (this->_internal_err_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_err_id(), target);
  }

  // string err_msg = 10;
  if (!this->_internal_err_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err_msg().data(), static_cast<int>(this->_internal_err_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rsp.err_msg");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_err_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ficc_message.ficc_Order_Rsp)
  return target;
}

size_t ficc_Order_Rsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ficc_message.ficc_Order_Rsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trade_acct = 2;
  if (!this->_internal_trade_acct().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trade_acct());
  }

  // string fund_acct = 3;
  if (!this->_internal_fund_acct().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fund_acct());
  }

  // string combino = 4;
  if (!this->_internal_combino().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_combino());
  }

  // string secu_code = 5;
  if (!this->_internal_secu_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secu_code());
  }

  // string order_inner_id = 6;
  if (!this->_internal_order_inner_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_inner_id());
  }

  // string send_time = 7;
  if (!this->_internal_send_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_send_time());
  }

  // string order_status = 8;
  if (!this->_internal_order_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_status());
  }

  // string err_msg = 10;
  if (!this->_internal_err_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_msg());
  }

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  // uint32 err_id = 9;
  if (this->_internal_err_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_err_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ficc_Order_Rsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ficc_Order_Rsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ficc_Order_Rsp::GetClassData() const { return &_class_data_; }

void ficc_Order_Rsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ficc_Order_Rsp *>(to)->MergeFrom(
      static_cast<const ficc_Order_Rsp &>(from));
}


void ficc_Order_Rsp::MergeFrom(const ficc_Order_Rsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ficc_message.ficc_Order_Rsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_trade_acct().empty()) {
    _internal_set_trade_acct(from._internal_trade_acct());
  }
  if (!from._internal_fund_acct().empty()) {
    _internal_set_fund_acct(from._internal_fund_acct());
  }
  if (!from._internal_combino().empty()) {
    _internal_set_combino(from._internal_combino());
  }
  if (!from._internal_secu_code().empty()) {
    _internal_set_secu_code(from._internal_secu_code());
  }
  if (!from._internal_order_inner_id().empty()) {
    _internal_set_order_inner_id(from._internal_order_inner_id());
  }
  if (!from._internal_send_time().empty()) {
    _internal_set_send_time(from._internal_send_time());
  }
  if (!from._internal_order_status().empty()) {
    _internal_set_order_status(from._internal_order_status());
  }
  if (!from._internal_err_msg().empty()) {
    _internal_set_err_msg(from._internal_err_msg());
  }
  if (from._internal_has_head()) {
    _internal_mutable_head()->::message_head::head::MergeFrom(from._internal_head());
  }
  if (from._internal_err_id() != 0) {
    _internal_set_err_id(from._internal_err_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ficc_Order_Rsp::CopyFrom(const ficc_Order_Rsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ficc_message.ficc_Order_Rsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ficc_Order_Rsp::IsInitialized() const {
  return true;
}

void ficc_Order_Rsp::InternalSwap(ficc_Order_Rsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trade_acct_, lhs_arena,
      &other->trade_acct_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &fund_acct_, lhs_arena,
      &other->fund_acct_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &combino_, lhs_arena,
      &other->combino_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &secu_code_, lhs_arena,
      &other->secu_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_inner_id_, lhs_arena,
      &other->order_inner_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &send_time_, lhs_arena,
      &other->send_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_status_, lhs_arena,
      &other->order_status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &err_msg_, lhs_arena,
      &other->err_msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ficc_Order_Rsp, err_id_)
      + sizeof(ficc_Order_Rsp::err_id_)
      - PROTOBUF_FIELD_OFFSET(ficc_Order_Rsp, head_)>(
          reinterpret_cast<char*>(&head_),
          reinterpret_cast<char*>(&other->head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ficc_Order_Rsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ficc_2eproto_getter, &descriptor_table_ficc_2eproto_once,
      file_level_metadata_ficc_2eproto[1]);
}

// ===================================================================

class ficc_Order_Rtn::_Internal {
 public:
  static const ::message_head::head& head(const ficc_Order_Rtn* msg);
};

const ::message_head::head&
ficc_Order_Rtn::_Internal::head(const ficc_Order_Rtn* msg) {
  return *msg->head_;
}
void ficc_Order_Rtn::clear_head() {
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
}
ficc_Order_Rtn::ficc_Order_Rtn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ficc_message.ficc_Order_Rtn)
}
ficc_Order_Rtn::ficc_Order_Rtn(const ficc_Order_Rtn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trade_acct_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trade_acct_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trade_acct().empty()) {
    trade_acct_.Set(from._internal_trade_acct(), 
      GetArenaForAllocation());
  }
  fund_acct_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fund_acct_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fund_acct().empty()) {
    fund_acct_.Set(from._internal_fund_acct(), 
      GetArenaForAllocation());
  }
  combino_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    combino_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_combino().empty()) {
    combino_.Set(from._internal_combino(), 
      GetArenaForAllocation());
  }
  trading_day_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trading_day_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trading_day().empty()) {
    trading_day_.Set(from._internal_trading_day(), 
      GetArenaForAllocation());
  }
  ex_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ex_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ex_code().empty()) {
    ex_code_.Set(from._internal_ex_code(), 
      GetArenaForAllocation());
  }
  secu_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secu_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secu_code().empty()) {
    secu_code_.Set(from._internal_secu_code(), 
      GetArenaForAllocation());
  }
  secu_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secu_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secu_name().empty()) {
    secu_name_.Set(from._internal_secu_name(), 
      GetArenaForAllocation());
  }
  order_price_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_price_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_price_type().empty()) {
    order_price_type_.Set(from._internal_order_price_type(), 
      GetArenaForAllocation());
  }
  direction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    direction_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_direction().empty()) {
    direction_.Set(from._internal_direction(), 
      GetArenaForAllocation());
  }
  offset_flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    offset_flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_offset_flag().empty()) {
    offset_flag_.Set(from._internal_offset_flag(), 
      GetArenaForAllocation());
  }
  hedge_flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hedge_flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hedge_flag().empty()) {
    hedge_flag_.Set(from._internal_hedge_flag(), 
      GetArenaForAllocation());
  }
  time_cond_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    time_cond_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_time_cond().empty()) {
    time_cond_.Set(from._internal_time_cond(), 
      GetArenaForAllocation());
  }
  bilateral_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bilateral_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bilateral_id().empty()) {
    bilateral_id_.Set(from._internal_bilateral_id(), 
      GetArenaForAllocation());
  }
  purchase_way_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    purchase_way_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_purchase_way().empty()) {
    purchase_way_.Set(from._internal_purchase_way(), 
      GetArenaForAllocation());
  }
  text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    text_.Set(from._internal_text(), 
      GetArenaForAllocation());
  }
  quote_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    quote_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quote_id().empty()) {
    quote_id_.Set(from._internal_quote_id(), 
      GetArenaForAllocation());
  }
  valid_until_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    valid_until_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_valid_until_time().empty()) {
    valid_until_time_.Set(from._internal_valid_until_time(), 
      GetArenaForAllocation());
  }
  mdentry_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mdentry_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mdentry_time().empty()) {
    mdentry_time_.Set(from._internal_mdentry_time(), 
      GetArenaForAllocation());
  }
  client_ref_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    client_ref_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_ref_id().empty()) {
    client_ref_id_.Set(from._internal_client_ref_id(), 
      GetArenaForAllocation());
  }
  order_inner_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_inner_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_inner_id().empty()) {
    order_inner_id_.Set(from._internal_order_inner_id(), 
      GetArenaForAllocation());
  }
  order_sys_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_sys_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_sys_id().empty()) {
    order_sys_id_.Set(from._internal_order_sys_id(), 
      GetArenaForAllocation());
  }
  insert_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    insert_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_insert_time().empty()) {
    insert_time_.Set(from._internal_insert_time(), 
      GetArenaForAllocation());
  }
  order_submit_status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_submit_status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_submit_status().empty()) {
    order_submit_status_.Set(from._internal_order_submit_status(), 
      GetArenaForAllocation());
  }
  order_status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_status().empty()) {
    order_status_.Set(from._internal_order_status(), 
      GetArenaForAllocation());
  }
  trade_date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trade_date_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trade_date().empty()) {
    trade_date_.Set(from._internal_trade_date(), 
      GetArenaForAllocation());
  }
  update_date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    update_date_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_update_date().empty()) {
    update_date_.Set(from._internal_update_date(), 
      GetArenaForAllocation());
  }
  update_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    update_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_update_time().empty()) {
    update_time_.Set(from._internal_update_time(), 
      GetArenaForAllocation());
  }
  cancel_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cancel_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cancel_time().empty()) {
    cancel_time_.Set(from._internal_cancel_time(), 
      GetArenaForAllocation());
  }
  ret_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ret_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ret_msg().empty()) {
    ret_msg_.Set(from._internal_ret_msg(), 
      GetArenaForAllocation());
  }
  order_source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_source().empty()) {
    order_source_.Set(from._internal_order_source(), 
      GetArenaForAllocation());
  }
  client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    client_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_id().empty()) {
    client_id_.Set(from._internal_client_id(), 
      GetArenaForAllocation());
  }
  reserver1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reserver1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reserver1().empty()) {
    reserver1_.Set(from._internal_reserver1(), 
      GetArenaForAllocation());
  }
  reserver2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reserver2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reserver2().empty()) {
    reserver2_.Set(from._internal_reserver2(), 
      GetArenaForAllocation());
  }
  reserver3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reserver3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reserver3().empty()) {
    reserver3_.Set(from._internal_reserver3(), 
      GetArenaForAllocation());
  }
  reserver4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reserver4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reserver4().empty()) {
    reserver4_.Set(from._internal_reserver4(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_head()) {
    head_ = new ::message_head::head(*from.head_);
  } else {
    head_ = nullptr;
  }
  ::memcpy(&vol_, &from.vol_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_no_) -
    reinterpret_cast<char*>(&vol_)) + sizeof(sequence_no_));
  // @@protoc_insertion_point(copy_constructor:ficc_message.ficc_Order_Rtn)
}

inline void ficc_Order_Rtn::SharedCtor() {
trade_acct_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trade_acct_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
fund_acct_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fund_acct_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
combino_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  combino_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
trading_day_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trading_day_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ex_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ex_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secu_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secu_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secu_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secu_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
order_price_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_price_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
direction_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  direction_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
offset_flag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  offset_flag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
hedge_flag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hedge_flag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
time_cond_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  time_cond_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bilateral_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bilateral_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
purchase_way_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  purchase_way_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
text_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
quote_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  quote_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
valid_until_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  valid_until_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mdentry_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mdentry_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
client_ref_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  client_ref_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
order_inner_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_inner_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
order_sys_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_sys_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
insert_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  insert_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
order_submit_status_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_submit_status_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
order_status_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_status_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
trade_date_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trade_date_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
update_date_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  update_date_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
update_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  update_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cancel_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cancel_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ret_msg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ret_msg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
order_source_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_source_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
client_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  client_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
reserver1_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reserver1_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
reserver2_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reserver2_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
reserver3_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reserver3_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
reserver4_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reserver4_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&head_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sequence_no_) -
    reinterpret_cast<char*>(&head_)) + sizeof(sequence_no_));
}

ficc_Order_Rtn::~ficc_Order_Rtn() {
  // @@protoc_insertion_point(destructor:ficc_message.ficc_Order_Rtn)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ficc_Order_Rtn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  trade_acct_.Destroy();
  fund_acct_.Destroy();
  combino_.Destroy();
  trading_day_.Destroy();
  ex_code_.Destroy();
  secu_code_.Destroy();
  secu_name_.Destroy();
  order_price_type_.Destroy();
  direction_.Destroy();
  offset_flag_.Destroy();
  hedge_flag_.Destroy();
  time_cond_.Destroy();
  bilateral_id_.Destroy();
  purchase_way_.Destroy();
  text_.Destroy();
  quote_id_.Destroy();
  valid_until_time_.Destroy();
  mdentry_time_.Destroy();
  client_ref_id_.Destroy();
  order_inner_id_.Destroy();
  order_sys_id_.Destroy();
  insert_time_.Destroy();
  order_submit_status_.Destroy();
  order_status_.Destroy();
  trade_date_.Destroy();
  update_date_.Destroy();
  update_time_.Destroy();
  cancel_time_.Destroy();
  ret_msg_.Destroy();
  order_source_.Destroy();
  client_id_.Destroy();
  reserver1_.Destroy();
  reserver2_.Destroy();
  reserver3_.Destroy();
  reserver4_.Destroy();
  if (this != internal_default_instance()) delete head_;
}

void ficc_Order_Rtn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ficc_Order_Rtn::Clear() {
// @@protoc_insertion_point(message_clear_start:ficc_message.ficc_Order_Rtn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trade_acct_.ClearToEmpty();
  fund_acct_.ClearToEmpty();
  combino_.ClearToEmpty();
  trading_day_.ClearToEmpty();
  ex_code_.ClearToEmpty();
  secu_code_.ClearToEmpty();
  secu_name_.ClearToEmpty();
  order_price_type_.ClearToEmpty();
  direction_.ClearToEmpty();
  offset_flag_.ClearToEmpty();
  hedge_flag_.ClearToEmpty();
  time_cond_.ClearToEmpty();
  bilateral_id_.ClearToEmpty();
  purchase_way_.ClearToEmpty();
  text_.ClearToEmpty();
  quote_id_.ClearToEmpty();
  valid_until_time_.ClearToEmpty();
  mdentry_time_.ClearToEmpty();
  client_ref_id_.ClearToEmpty();
  order_inner_id_.ClearToEmpty();
  order_sys_id_.ClearToEmpty();
  insert_time_.ClearToEmpty();
  order_submit_status_.ClearToEmpty();
  order_status_.ClearToEmpty();
  trade_date_.ClearToEmpty();
  update_date_.ClearToEmpty();
  update_time_.ClearToEmpty();
  cancel_time_.ClearToEmpty();
  ret_msg_.ClearToEmpty();
  order_source_.ClearToEmpty();
  client_id_.ClearToEmpty();
  reserver1_.ClearToEmpty();
  reserver2_.ClearToEmpty();
  reserver3_.ClearToEmpty();
  reserver4_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  ::memset(&vol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_no_) -
      reinterpret_cast<char*>(&vol_)) + sizeof(sequence_no_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ficc_Order_Rtn::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message_head.head head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string trade_acct = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_trade_acct();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.trade_acct"));
        } else
          goto handle_unusual;
        continue;
      // string fund_acct = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_fund_acct();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.fund_acct"));
        } else
          goto handle_unusual;
        continue;
      // string combino = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_combino();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.combino"));
        } else
          goto handle_unusual;
        continue;
      // string trading_day = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_trading_day();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.trading_day"));
        } else
          goto handle_unusual;
        continue;
      // string ex_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_ex_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.ex_code"));
        } else
          goto handle_unusual;
        continue;
      // string secu_code = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_secu_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.secu_code"));
        } else
          goto handle_unusual;
        continue;
      // string secu_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_secu_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.secu_name"));
        } else
          goto handle_unusual;
        continue;
      // string order_price_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_order_price_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.order_price_type"));
        } else
          goto handle_unusual;
        continue;
      // string direction = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_direction();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.direction"));
        } else
          goto handle_unusual;
        continue;
      // string offset_flag = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_offset_flag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.offset_flag"));
        } else
          goto handle_unusual;
        continue;
      // string hedge_flag = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_hedge_flag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.hedge_flag"));
        } else
          goto handle_unusual;
        continue;
      // float price = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 vol = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          vol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string time_cond = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_time_cond();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.time_cond"));
        } else
          goto handle_unusual;
        continue;
      // uint64 strategy_code = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          strategy_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 user_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string bilateral_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_bilateral_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.bilateral_id"));
        } else
          goto handle_unusual;
        continue;
      // string purchase_way = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_purchase_way();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.purchase_way"));
        } else
          goto handle_unusual;
        continue;
      // string text = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.text"));
        } else
          goto handle_unusual;
        continue;
      // float ytm = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 173)) {
          ytm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float strike_yeild = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 181)) {
          strike_yeild_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 quote_type = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          quote_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 max_floor = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          max_floor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 min_tick_size = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          min_tick_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 settle_type = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          settle_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 match_type = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          match_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 delivery_type = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          delivery_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 clearing_method = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          clearing_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string quote_id = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_quote_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.quote_id"));
        } else
          goto handle_unusual;
        continue;
      // string valid_until_time = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_valid_until_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.valid_until_time"));
        } else
          goto handle_unusual;
        continue;
      // string mdentry_time = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          auto str = _internal_mutable_mdentry_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.mdentry_time"));
        } else
          goto handle_unusual;
        continue;
      // string client_ref_id = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_client_ref_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.client_ref_id"));
        } else
          goto handle_unusual;
        continue;
      // uint64 routing_type = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          routing_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 market_indicator = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          market_indicator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 realtime_undertake_flag = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          realtime_undertake_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 subject_party_type = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          subject_party_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string order_inner_id = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_order_inner_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.order_inner_id"));
        } else
          goto handle_unusual;
        continue;
      // string order_sys_id = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_order_sys_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.order_sys_id"));
        } else
          goto handle_unusual;
        continue;
      // string insert_time = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_insert_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.insert_time"));
        } else
          goto handle_unusual;
        continue;
      // float trade_price = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          trade_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float avg_trade_price = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          avg_trade_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 vol_traded = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          vol_traded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 vol_total = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          vol_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string order_submit_status = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_order_submit_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.order_submit_status"));
        } else
          goto handle_unusual;
        continue;
      // string order_status = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_order_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.order_status"));
        } else
          goto handle_unusual;
        continue;
      // string trade_date = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_trade_date();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.trade_date"));
        } else
          goto handle_unusual;
        continue;
      // string update_date = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_update_date();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.update_date"));
        } else
          goto handle_unusual;
        continue;
      // string update_time = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_update_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.update_time"));
        } else
          goto handle_unusual;
        continue;
      // string cancel_time = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_cancel_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.cancel_time"));
        } else
          goto handle_unusual;
        continue;
      // uint64 ret_code = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ret_msg = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_ret_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.ret_msg"));
        } else
          goto handle_unusual;
        continue;
      // uint64 settlement_id = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          settlement_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string order_source = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_order_source();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.order_source"));
        } else
          goto handle_unusual;
        continue;
      // string client_id = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_client_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.client_id"));
        } else
          goto handle_unusual;
        continue;
      // string reserver1 = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_reserver1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.reserver1"));
        } else
          goto handle_unusual;
        continue;
      // string reserver2 = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_reserver2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.reserver2"));
        } else
          goto handle_unusual;
        continue;
      // string reserver3 = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_reserver3();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.reserver3"));
        } else
          goto handle_unusual;
        continue;
      // string reserver4 = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_reserver4();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Order_Rtn.reserver4"));
        } else
          goto handle_unusual;
        continue;
      // uint32 sequence_no = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          sequence_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ficc_Order_Rtn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ficc_message.ficc_Order_Rtn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // string trade_acct = 2;
  if (!this->_internal_trade_acct().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trade_acct().data(), static_cast<int>(this->_internal_trade_acct().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.trade_acct");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_trade_acct(), target);
  }

  // string fund_acct = 3;
  if (!this->_internal_fund_acct().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fund_acct().data(), static_cast<int>(this->_internal_fund_acct().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.fund_acct");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_fund_acct(), target);
  }

  // string combino = 4;
  if (!this->_internal_combino().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_combino().data(), static_cast<int>(this->_internal_combino().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.combino");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_combino(), target);
  }

  // string trading_day = 5;
  if (!this->_internal_trading_day().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trading_day().data(), static_cast<int>(this->_internal_trading_day().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.trading_day");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_trading_day(), target);
  }

  // string ex_code = 6;
  if (!this->_internal_ex_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ex_code().data(), static_cast<int>(this->_internal_ex_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.ex_code");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_ex_code(), target);
  }

  // string secu_code = 7;
  if (!this->_internal_secu_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secu_code().data(), static_cast<int>(this->_internal_secu_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.secu_code");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_secu_code(), target);
  }

  // string secu_name = 8;
  if (!this->_internal_secu_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secu_name().data(), static_cast<int>(this->_internal_secu_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.secu_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_secu_name(), target);
  }

  // string order_price_type = 9;
  if (!this->_internal_order_price_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_price_type().data(), static_cast<int>(this->_internal_order_price_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.order_price_type");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_order_price_type(), target);
  }

  // string direction = 10;
  if (!this->_internal_direction().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_direction().data(), static_cast<int>(this->_internal_direction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.direction");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_direction(), target);
  }

  // string offset_flag = 11;
  if (!this->_internal_offset_flag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_offset_flag().data(), static_cast<int>(this->_internal_offset_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.offset_flag");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_offset_flag(), target);
  }

  // string hedge_flag = 12;
  if (!this->_internal_hedge_flag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hedge_flag().data(), static_cast<int>(this->_internal_hedge_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.hedge_flag");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_hedge_flag(), target);
  }

  // float price = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_price = this->_internal_price();
  uint32_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_price(), target);
  }

  // uint64 vol = 14;
  if (this->_internal_vol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(14, this->_internal_vol(), target);
  }

  // string time_cond = 15;
  if (!this->_internal_time_cond().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time_cond().data(), static_cast<int>(this->_internal_time_cond().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.time_cond");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_time_cond(), target);
  }

  // uint64 strategy_code = 16;
  if (this->_internal_strategy_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(16, this->_internal_strategy_code(), target);
  }

  // uint32 user_id = 17;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_user_id(), target);
  }

  // string bilateral_id = 18;
  if (!this->_internal_bilateral_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bilateral_id().data(), static_cast<int>(this->_internal_bilateral_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.bilateral_id");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_bilateral_id(), target);
  }

  // string purchase_way = 19;
  if (!this->_internal_purchase_way().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_purchase_way().data(), static_cast<int>(this->_internal_purchase_way().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.purchase_way");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_purchase_way(), target);
  }

  // string text = 20;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.text");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_text(), target);
  }

  // float ytm = 21;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ytm = this->_internal_ytm();
  uint32_t raw_ytm;
  memcpy(&raw_ytm, &tmp_ytm, sizeof(tmp_ytm));
  if (raw_ytm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(21, this->_internal_ytm(), target);
  }

  // float strike_yeild = 22;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_strike_yeild = this->_internal_strike_yeild();
  uint32_t raw_strike_yeild;
  memcpy(&raw_strike_yeild, &tmp_strike_yeild, sizeof(tmp_strike_yeild));
  if (raw_strike_yeild != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(22, this->_internal_strike_yeild(), target);
  }

  // uint64 quote_type = 23;
  if (this->_internal_quote_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(23, this->_internal_quote_type(), target);
  }

  // uint64 max_floor = 24;
  if (this->_internal_max_floor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(24, this->_internal_max_floor(), target);
  }

  // uint64 min_tick_size = 25;
  if (this->_internal_min_tick_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(25, this->_internal_min_tick_size(), target);
  }

  // uint64 settle_type = 26;
  if (this->_internal_settle_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(26, this->_internal_settle_type(), target);
  }

  // uint64 match_type = 27;
  if (this->_internal_match_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(27, this->_internal_match_type(), target);
  }

  // uint64 delivery_type = 28;
  if (this->_internal_delivery_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(28, this->_internal_delivery_type(), target);
  }

  // uint64 clearing_method = 29;
  if (this->_internal_clearing_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(29, this->_internal_clearing_method(), target);
  }

  // string quote_id = 30;
  if (!this->_internal_quote_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quote_id().data(), static_cast<int>(this->_internal_quote_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.quote_id");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_quote_id(), target);
  }

  // string valid_until_time = 31;
  if (!this->_internal_valid_until_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_valid_until_time().data(), static_cast<int>(this->_internal_valid_until_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.valid_until_time");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_valid_until_time(), target);
  }

  // string mdentry_time = 32;
  if (!this->_internal_mdentry_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mdentry_time().data(), static_cast<int>(this->_internal_mdentry_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.mdentry_time");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_mdentry_time(), target);
  }

  // string client_ref_id = 33;
  if (!this->_internal_client_ref_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_ref_id().data(), static_cast<int>(this->_internal_client_ref_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.client_ref_id");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_client_ref_id(), target);
  }

  // uint64 routing_type = 34;
  if (this->_internal_routing_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(34, this->_internal_routing_type(), target);
  }

  // uint64 market_indicator = 35;
  if (this->_internal_market_indicator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(35, this->_internal_market_indicator(), target);
  }

  // uint64 realtime_undertake_flag = 36;
  if (this->_internal_realtime_undertake_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(36, this->_internal_realtime_undertake_flag(), target);
  }

  // uint64 subject_party_type = 37;
  if (this->_internal_subject_party_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(37, this->_internal_subject_party_type(), target);
  }

  // string order_inner_id = 38;
  if (!this->_internal_order_inner_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_inner_id().data(), static_cast<int>(this->_internal_order_inner_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.order_inner_id");
    target = stream->WriteStringMaybeAliased(
        38, this->_internal_order_inner_id(), target);
  }

  // string order_sys_id = 39;
  if (!this->_internal_order_sys_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_sys_id().data(), static_cast<int>(this->_internal_order_sys_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.order_sys_id");
    target = stream->WriteStringMaybeAliased(
        39, this->_internal_order_sys_id(), target);
  }

  // string insert_time = 40;
  if (!this->_internal_insert_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_insert_time().data(), static_cast<int>(this->_internal_insert_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.insert_time");
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_insert_time(), target);
  }

  // float trade_price = 41;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_trade_price = this->_internal_trade_price();
  uint32_t raw_trade_price;
  memcpy(&raw_trade_price, &tmp_trade_price, sizeof(tmp_trade_price));
  if (raw_trade_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(41, this->_internal_trade_price(), target);
  }

  // float avg_trade_price = 42;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_avg_trade_price = this->_internal_avg_trade_price();
  uint32_t raw_avg_trade_price;
  memcpy(&raw_avg_trade_price, &tmp_avg_trade_price, sizeof(tmp_avg_trade_price));
  if (raw_avg_trade_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(42, this->_internal_avg_trade_price(), target);
  }

  // uint64 vol_traded = 43;
  if (this->_internal_vol_traded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(43, this->_internal_vol_traded(), target);
  }

  // uint64 vol_total = 44;
  if (this->_internal_vol_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(44, this->_internal_vol_total(), target);
  }

  // string order_submit_status = 45;
  if (!this->_internal_order_submit_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_submit_status().data(), static_cast<int>(this->_internal_order_submit_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.order_submit_status");
    target = stream->WriteStringMaybeAliased(
        45, this->_internal_order_submit_status(), target);
  }

  // string order_status = 46;
  if (!this->_internal_order_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_status().data(), static_cast<int>(this->_internal_order_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.order_status");
    target = stream->WriteStringMaybeAliased(
        46, this->_internal_order_status(), target);
  }

  // string trade_date = 47;
  if (!this->_internal_trade_date().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trade_date().data(), static_cast<int>(this->_internal_trade_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.trade_date");
    target = stream->WriteStringMaybeAliased(
        47, this->_internal_trade_date(), target);
  }

  // string update_date = 48;
  if (!this->_internal_update_date().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_update_date().data(), static_cast<int>(this->_internal_update_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.update_date");
    target = stream->WriteStringMaybeAliased(
        48, this->_internal_update_date(), target);
  }

  // string update_time = 49;
  if (!this->_internal_update_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_update_time().data(), static_cast<int>(this->_internal_update_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.update_time");
    target = stream->WriteStringMaybeAliased(
        49, this->_internal_update_time(), target);
  }

  // string cancel_time = 50;
  if (!this->_internal_cancel_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cancel_time().data(), static_cast<int>(this->_internal_cancel_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.cancel_time");
    target = stream->WriteStringMaybeAliased(
        50, this->_internal_cancel_time(), target);
  }

  // uint64 ret_code = 51;
  if (this->_internal_ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(51, this->_internal_ret_code(), target);
  }

  // string ret_msg = 52;
  if (!this->_internal_ret_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ret_msg().data(), static_cast<int>(this->_internal_ret_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.ret_msg");
    target = stream->WriteStringMaybeAliased(
        52, this->_internal_ret_msg(), target);
  }

  // uint64 settlement_id = 53;
  if (this->_internal_settlement_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(53, this->_internal_settlement_id(), target);
  }

  // string order_source = 54;
  if (!this->_internal_order_source().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_source().data(), static_cast<int>(this->_internal_order_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.order_source");
    target = stream->WriteStringMaybeAliased(
        54, this->_internal_order_source(), target);
  }

  // string client_id = 55;
  if (!this->_internal_client_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.client_id");
    target = stream->WriteStringMaybeAliased(
        55, this->_internal_client_id(), target);
  }

  // string reserver1 = 56;
  if (!this->_internal_reserver1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reserver1().data(), static_cast<int>(this->_internal_reserver1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.reserver1");
    target = stream->WriteStringMaybeAliased(
        56, this->_internal_reserver1(), target);
  }

  // string reserver2 = 57;
  if (!this->_internal_reserver2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reserver2().data(), static_cast<int>(this->_internal_reserver2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.reserver2");
    target = stream->WriteStringMaybeAliased(
        57, this->_internal_reserver2(), target);
  }

  // string reserver3 = 58;
  if (!this->_internal_reserver3().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reserver3().data(), static_cast<int>(this->_internal_reserver3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.reserver3");
    target = stream->WriteStringMaybeAliased(
        58, this->_internal_reserver3(), target);
  }

  // string reserver4 = 59;
  if (!this->_internal_reserver4().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reserver4().data(), static_cast<int>(this->_internal_reserver4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Order_Rtn.reserver4");
    target = stream->WriteStringMaybeAliased(
        59, this->_internal_reserver4(), target);
  }

  // uint32 sequence_no = 60;
  if (this->_internal_sequence_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(60, this->_internal_sequence_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ficc_message.ficc_Order_Rtn)
  return target;
}

size_t ficc_Order_Rtn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ficc_message.ficc_Order_Rtn)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trade_acct = 2;
  if (!this->_internal_trade_acct().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trade_acct());
  }

  // string fund_acct = 3;
  if (!this->_internal_fund_acct().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fund_acct());
  }

  // string combino = 4;
  if (!this->_internal_combino().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_combino());
  }

  // string trading_day = 5;
  if (!this->_internal_trading_day().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trading_day());
  }

  // string ex_code = 6;
  if (!this->_internal_ex_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ex_code());
  }

  // string secu_code = 7;
  if (!this->_internal_secu_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secu_code());
  }

  // string secu_name = 8;
  if (!this->_internal_secu_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secu_name());
  }

  // string order_price_type = 9;
  if (!this->_internal_order_price_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_price_type());
  }

  // string direction = 10;
  if (!this->_internal_direction().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_direction());
  }

  // string offset_flag = 11;
  if (!this->_internal_offset_flag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_offset_flag());
  }

  // string hedge_flag = 12;
  if (!this->_internal_hedge_flag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hedge_flag());
  }

  // string time_cond = 15;
  if (!this->_internal_time_cond().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time_cond());
  }

  // string bilateral_id = 18;
  if (!this->_internal_bilateral_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bilateral_id());
  }

  // string purchase_way = 19;
  if (!this->_internal_purchase_way().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_purchase_way());
  }

  // string text = 20;
  if (!this->_internal_text().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string quote_id = 30;
  if (!this->_internal_quote_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quote_id());
  }

  // string valid_until_time = 31;
  if (!this->_internal_valid_until_time().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_valid_until_time());
  }

  // string mdentry_time = 32;
  if (!this->_internal_mdentry_time().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mdentry_time());
  }

  // string client_ref_id = 33;
  if (!this->_internal_client_ref_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_ref_id());
  }

  // string order_inner_id = 38;
  if (!this->_internal_order_inner_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_inner_id());
  }

  // string order_sys_id = 39;
  if (!this->_internal_order_sys_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_sys_id());
  }

  // string insert_time = 40;
  if (!this->_internal_insert_time().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_insert_time());
  }

  // string order_submit_status = 45;
  if (!this->_internal_order_submit_status().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_submit_status());
  }

  // string order_status = 46;
  if (!this->_internal_order_status().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_status());
  }

  // string trade_date = 47;
  if (!this->_internal_trade_date().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trade_date());
  }

  // string update_date = 48;
  if (!this->_internal_update_date().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_update_date());
  }

  // string update_time = 49;
  if (!this->_internal_update_time().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_update_time());
  }

  // string cancel_time = 50;
  if (!this->_internal_cancel_time().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cancel_time());
  }

  // string ret_msg = 52;
  if (!this->_internal_ret_msg().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ret_msg());
  }

  // string order_source = 54;
  if (!this->_internal_order_source().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_source());
  }

  // string client_id = 55;
  if (!this->_internal_client_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  // string reserver1 = 56;
  if (!this->_internal_reserver1().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reserver1());
  }

  // string reserver2 = 57;
  if (!this->_internal_reserver2().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reserver2());
  }

  // string reserver3 = 58;
  if (!this->_internal_reserver3().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reserver3());
  }

  // string reserver4 = 59;
  if (!this->_internal_reserver4().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reserver4());
  }

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  // uint64 vol = 14;
  if (this->_internal_vol() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_vol());
  }

  // float price = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_price = this->_internal_price();
  uint32_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    total_size += 1 + 4;
  }

  // uint32 user_id = 17;
  if (this->_internal_user_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  // uint64 strategy_code = 16;
  if (this->_internal_strategy_code() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_strategy_code());
  }

  // float ytm = 21;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ytm = this->_internal_ytm();
  uint32_t raw_ytm;
  memcpy(&raw_ytm, &tmp_ytm, sizeof(tmp_ytm));
  if (raw_ytm != 0) {
    total_size += 2 + 4;
  }

  // float strike_yeild = 22;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_strike_yeild = this->_internal_strike_yeild();
  uint32_t raw_strike_yeild;
  memcpy(&raw_strike_yeild, &tmp_strike_yeild, sizeof(tmp_strike_yeild));
  if (raw_strike_yeild != 0) {
    total_size += 2 + 4;
  }

  // uint64 quote_type = 23;
  if (this->_internal_quote_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_quote_type());
  }

  // uint64 max_floor = 24;
  if (this->_internal_max_floor() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_max_floor());
  }

  // uint64 min_tick_size = 25;
  if (this->_internal_min_tick_size() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_min_tick_size());
  }

  // uint64 settle_type = 26;
  if (this->_internal_settle_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_settle_type());
  }

  // uint64 match_type = 27;
  if (this->_internal_match_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_match_type());
  }

  // uint64 delivery_type = 28;
  if (this->_internal_delivery_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_delivery_type());
  }

  // uint64 clearing_method = 29;
  if (this->_internal_clearing_method() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_clearing_method());
  }

  // uint64 routing_type = 34;
  if (this->_internal_routing_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_routing_type());
  }

  // uint64 market_indicator = 35;
  if (this->_internal_market_indicator() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_market_indicator());
  }

  // uint64 realtime_undertake_flag = 36;
  if (this->_internal_realtime_undertake_flag() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_realtime_undertake_flag());
  }

  // uint64 subject_party_type = 37;
  if (this->_internal_subject_party_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_subject_party_type());
  }

  // float trade_price = 41;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_trade_price = this->_internal_trade_price();
  uint32_t raw_trade_price;
  memcpy(&raw_trade_price, &tmp_trade_price, sizeof(tmp_trade_price));
  if (raw_trade_price != 0) {
    total_size += 2 + 4;
  }

  // float avg_trade_price = 42;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_avg_trade_price = this->_internal_avg_trade_price();
  uint32_t raw_avg_trade_price;
  memcpy(&raw_avg_trade_price, &tmp_avg_trade_price, sizeof(tmp_avg_trade_price));
  if (raw_avg_trade_price != 0) {
    total_size += 2 + 4;
  }

  // uint64 vol_traded = 43;
  if (this->_internal_vol_traded() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_vol_traded());
  }

  // uint64 vol_total = 44;
  if (this->_internal_vol_total() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_vol_total());
  }

  // uint64 ret_code = 51;
  if (this->_internal_ret_code() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_ret_code());
  }

  // uint64 settlement_id = 53;
  if (this->_internal_settlement_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_settlement_id());
  }

  // uint32 sequence_no = 60;
  if (this->_internal_sequence_no() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_sequence_no());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ficc_Order_Rtn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ficc_Order_Rtn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ficc_Order_Rtn::GetClassData() const { return &_class_data_; }

void ficc_Order_Rtn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ficc_Order_Rtn *>(to)->MergeFrom(
      static_cast<const ficc_Order_Rtn &>(from));
}


void ficc_Order_Rtn::MergeFrom(const ficc_Order_Rtn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ficc_message.ficc_Order_Rtn)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_trade_acct().empty()) {
    _internal_set_trade_acct(from._internal_trade_acct());
  }
  if (!from._internal_fund_acct().empty()) {
    _internal_set_fund_acct(from._internal_fund_acct());
  }
  if (!from._internal_combino().empty()) {
    _internal_set_combino(from._internal_combino());
  }
  if (!from._internal_trading_day().empty()) {
    _internal_set_trading_day(from._internal_trading_day());
  }
  if (!from._internal_ex_code().empty()) {
    _internal_set_ex_code(from._internal_ex_code());
  }
  if (!from._internal_secu_code().empty()) {
    _internal_set_secu_code(from._internal_secu_code());
  }
  if (!from._internal_secu_name().empty()) {
    _internal_set_secu_name(from._internal_secu_name());
  }
  if (!from._internal_order_price_type().empty()) {
    _internal_set_order_price_type(from._internal_order_price_type());
  }
  if (!from._internal_direction().empty()) {
    _internal_set_direction(from._internal_direction());
  }
  if (!from._internal_offset_flag().empty()) {
    _internal_set_offset_flag(from._internal_offset_flag());
  }
  if (!from._internal_hedge_flag().empty()) {
    _internal_set_hedge_flag(from._internal_hedge_flag());
  }
  if (!from._internal_time_cond().empty()) {
    _internal_set_time_cond(from._internal_time_cond());
  }
  if (!from._internal_bilateral_id().empty()) {
    _internal_set_bilateral_id(from._internal_bilateral_id());
  }
  if (!from._internal_purchase_way().empty()) {
    _internal_set_purchase_way(from._internal_purchase_way());
  }
  if (!from._internal_text().empty()) {
    _internal_set_text(from._internal_text());
  }
  if (!from._internal_quote_id().empty()) {
    _internal_set_quote_id(from._internal_quote_id());
  }
  if (!from._internal_valid_until_time().empty()) {
    _internal_set_valid_until_time(from._internal_valid_until_time());
  }
  if (!from._internal_mdentry_time().empty()) {
    _internal_set_mdentry_time(from._internal_mdentry_time());
  }
  if (!from._internal_client_ref_id().empty()) {
    _internal_set_client_ref_id(from._internal_client_ref_id());
  }
  if (!from._internal_order_inner_id().empty()) {
    _internal_set_order_inner_id(from._internal_order_inner_id());
  }
  if (!from._internal_order_sys_id().empty()) {
    _internal_set_order_sys_id(from._internal_order_sys_id());
  }
  if (!from._internal_insert_time().empty()) {
    _internal_set_insert_time(from._internal_insert_time());
  }
  if (!from._internal_order_submit_status().empty()) {
    _internal_set_order_submit_status(from._internal_order_submit_status());
  }
  if (!from._internal_order_status().empty()) {
    _internal_set_order_status(from._internal_order_status());
  }
  if (!from._internal_trade_date().empty()) {
    _internal_set_trade_date(from._internal_trade_date());
  }
  if (!from._internal_update_date().empty()) {
    _internal_set_update_date(from._internal_update_date());
  }
  if (!from._internal_update_time().empty()) {
    _internal_set_update_time(from._internal_update_time());
  }
  if (!from._internal_cancel_time().empty()) {
    _internal_set_cancel_time(from._internal_cancel_time());
  }
  if (!from._internal_ret_msg().empty()) {
    _internal_set_ret_msg(from._internal_ret_msg());
  }
  if (!from._internal_order_source().empty()) {
    _internal_set_order_source(from._internal_order_source());
  }
  if (!from._internal_client_id().empty()) {
    _internal_set_client_id(from._internal_client_id());
  }
  if (!from._internal_reserver1().empty()) {
    _internal_set_reserver1(from._internal_reserver1());
  }
  if (!from._internal_reserver2().empty()) {
    _internal_set_reserver2(from._internal_reserver2());
  }
  if (!from._internal_reserver3().empty()) {
    _internal_set_reserver3(from._internal_reserver3());
  }
  if (!from._internal_reserver4().empty()) {
    _internal_set_reserver4(from._internal_reserver4());
  }
  if (from._internal_has_head()) {
    _internal_mutable_head()->::message_head::head::MergeFrom(from._internal_head());
  }
  if (from._internal_vol() != 0) {
    _internal_set_vol(from._internal_vol());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_price = from._internal_price();
  uint32_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_strategy_code() != 0) {
    _internal_set_strategy_code(from._internal_strategy_code());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ytm = from._internal_ytm();
  uint32_t raw_ytm;
  memcpy(&raw_ytm, &tmp_ytm, sizeof(tmp_ytm));
  if (raw_ytm != 0) {
    _internal_set_ytm(from._internal_ytm());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_strike_yeild = from._internal_strike_yeild();
  uint32_t raw_strike_yeild;
  memcpy(&raw_strike_yeild, &tmp_strike_yeild, sizeof(tmp_strike_yeild));
  if (raw_strike_yeild != 0) {
    _internal_set_strike_yeild(from._internal_strike_yeild());
  }
  if (from._internal_quote_type() != 0) {
    _internal_set_quote_type(from._internal_quote_type());
  }
  if (from._internal_max_floor() != 0) {
    _internal_set_max_floor(from._internal_max_floor());
  }
  if (from._internal_min_tick_size() != 0) {
    _internal_set_min_tick_size(from._internal_min_tick_size());
  }
  if (from._internal_settle_type() != 0) {
    _internal_set_settle_type(from._internal_settle_type());
  }
  if (from._internal_match_type() != 0) {
    _internal_set_match_type(from._internal_match_type());
  }
  if (from._internal_delivery_type() != 0) {
    _internal_set_delivery_type(from._internal_delivery_type());
  }
  if (from._internal_clearing_method() != 0) {
    _internal_set_clearing_method(from._internal_clearing_method());
  }
  if (from._internal_routing_type() != 0) {
    _internal_set_routing_type(from._internal_routing_type());
  }
  if (from._internal_market_indicator() != 0) {
    _internal_set_market_indicator(from._internal_market_indicator());
  }
  if (from._internal_realtime_undertake_flag() != 0) {
    _internal_set_realtime_undertake_flag(from._internal_realtime_undertake_flag());
  }
  if (from._internal_subject_party_type() != 0) {
    _internal_set_subject_party_type(from._internal_subject_party_type());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_trade_price = from._internal_trade_price();
  uint32_t raw_trade_price;
  memcpy(&raw_trade_price, &tmp_trade_price, sizeof(tmp_trade_price));
  if (raw_trade_price != 0) {
    _internal_set_trade_price(from._internal_trade_price());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_avg_trade_price = from._internal_avg_trade_price();
  uint32_t raw_avg_trade_price;
  memcpy(&raw_avg_trade_price, &tmp_avg_trade_price, sizeof(tmp_avg_trade_price));
  if (raw_avg_trade_price != 0) {
    _internal_set_avg_trade_price(from._internal_avg_trade_price());
  }
  if (from._internal_vol_traded() != 0) {
    _internal_set_vol_traded(from._internal_vol_traded());
  }
  if (from._internal_vol_total() != 0) {
    _internal_set_vol_total(from._internal_vol_total());
  }
  if (from._internal_ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
  if (from._internal_settlement_id() != 0) {
    _internal_set_settlement_id(from._internal_settlement_id());
  }
  if (from._internal_sequence_no() != 0) {
    _internal_set_sequence_no(from._internal_sequence_no());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ficc_Order_Rtn::CopyFrom(const ficc_Order_Rtn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ficc_message.ficc_Order_Rtn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ficc_Order_Rtn::IsInitialized() const {
  return true;
}

void ficc_Order_Rtn::InternalSwap(ficc_Order_Rtn* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trade_acct_, lhs_arena,
      &other->trade_acct_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &fund_acct_, lhs_arena,
      &other->fund_acct_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &combino_, lhs_arena,
      &other->combino_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trading_day_, lhs_arena,
      &other->trading_day_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ex_code_, lhs_arena,
      &other->ex_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &secu_code_, lhs_arena,
      &other->secu_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &secu_name_, lhs_arena,
      &other->secu_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_price_type_, lhs_arena,
      &other->order_price_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &direction_, lhs_arena,
      &other->direction_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &offset_flag_, lhs_arena,
      &other->offset_flag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &hedge_flag_, lhs_arena,
      &other->hedge_flag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &time_cond_, lhs_arena,
      &other->time_cond_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &bilateral_id_, lhs_arena,
      &other->bilateral_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &purchase_way_, lhs_arena,
      &other->purchase_way_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &quote_id_, lhs_arena,
      &other->quote_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &valid_until_time_, lhs_arena,
      &other->valid_until_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &mdentry_time_, lhs_arena,
      &other->mdentry_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &client_ref_id_, lhs_arena,
      &other->client_ref_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_inner_id_, lhs_arena,
      &other->order_inner_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_sys_id_, lhs_arena,
      &other->order_sys_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &insert_time_, lhs_arena,
      &other->insert_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_submit_status_, lhs_arena,
      &other->order_submit_status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_status_, lhs_arena,
      &other->order_status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trade_date_, lhs_arena,
      &other->trade_date_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &update_date_, lhs_arena,
      &other->update_date_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &update_time_, lhs_arena,
      &other->update_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &cancel_time_, lhs_arena,
      &other->cancel_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ret_msg_, lhs_arena,
      &other->ret_msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_source_, lhs_arena,
      &other->order_source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &client_id_, lhs_arena,
      &other->client_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &reserver1_, lhs_arena,
      &other->reserver1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &reserver2_, lhs_arena,
      &other->reserver2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &reserver3_, lhs_arena,
      &other->reserver3_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &reserver4_, lhs_arena,
      &other->reserver4_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ficc_Order_Rtn, sequence_no_)
      + sizeof(ficc_Order_Rtn::sequence_no_)
      - PROTOBUF_FIELD_OFFSET(ficc_Order_Rtn, head_)>(
          reinterpret_cast<char*>(&head_),
          reinterpret_cast<char*>(&other->head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ficc_Order_Rtn::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ficc_2eproto_getter, &descriptor_table_ficc_2eproto_once,
      file_level_metadata_ficc_2eproto[2]);
}

// ===================================================================

class ficc_BilateralOrder_Req::_Internal {
 public:
  static const ::message_head::head& head(const ficc_BilateralOrder_Req* msg);
};

const ::message_head::head&
ficc_BilateralOrder_Req::_Internal::head(const ficc_BilateralOrder_Req* msg) {
  return *msg->head_;
}
void ficc_BilateralOrder_Req::clear_head() {
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
}
ficc_BilateralOrder_Req::ficc_BilateralOrder_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ficc_message.ficc_BilateralOrder_Req)
}
ficc_BilateralOrder_Req::ficc_BilateralOrder_Req(const ficc_BilateralOrder_Req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trade_acct_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trade_acct_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trade_acct().empty()) {
    trade_acct_.Set(from._internal_trade_acct(), 
      GetArenaForAllocation());
  }
  secu_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secu_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secu_code().empty()) {
    secu_code_.Set(from._internal_secu_code(), 
      GetArenaForAllocation());
  }
  order_price_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_price_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_price_type().empty()) {
    order_price_type_.Set(from._internal_order_price_type(), 
      GetArenaForAllocation());
  }
  time_cond_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    time_cond_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_time_cond().empty()) {
    time_cond_.Set(from._internal_time_cond(), 
      GetArenaForAllocation());
  }
  text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    text_.Set(from._internal_text(), 
      GetArenaForAllocation());
  }
  order_sys_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_sys_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_sys_id().empty()) {
    order_sys_id_.Set(from._internal_order_sys_id(), 
      GetArenaForAllocation());
  }
  valid_until_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    valid_until_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_valid_until_time().empty()) {
    valid_until_time_.Set(from._internal_valid_until_time(), 
      GetArenaForAllocation());
  }
  client_ref_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    client_ref_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_ref_id().empty()) {
    client_ref_id_.Set(from._internal_client_ref_id(), 
      GetArenaForAllocation());
  }
  reserver1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reserver1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reserver1().empty()) {
    reserver1_.Set(from._internal_reserver1(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_head()) {
    head_ = new ::message_head::head(*from.head_);
  } else {
    head_ = nullptr;
  }
  ::memcpy(&bid_vol_, &from.bid_vol_,
    static_cast<size_t>(reinterpret_cast<char*>(&ask_strike_yeild_) -
    reinterpret_cast<char*>(&bid_vol_)) + sizeof(ask_strike_yeild_));
  // @@protoc_insertion_point(copy_constructor:ficc_message.ficc_BilateralOrder_Req)
}

inline void ficc_BilateralOrder_Req::SharedCtor() {
trade_acct_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trade_acct_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secu_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secu_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
order_price_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_price_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
time_cond_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  time_cond_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
text_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
order_sys_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_sys_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
valid_until_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  valid_until_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
client_ref_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  client_ref_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
reserver1_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reserver1_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&head_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ask_strike_yeild_) -
    reinterpret_cast<char*>(&head_)) + sizeof(ask_strike_yeild_));
}

ficc_BilateralOrder_Req::~ficc_BilateralOrder_Req() {
  // @@protoc_insertion_point(destructor:ficc_message.ficc_BilateralOrder_Req)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ficc_BilateralOrder_Req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  trade_acct_.Destroy();
  secu_code_.Destroy();
  order_price_type_.Destroy();
  time_cond_.Destroy();
  text_.Destroy();
  order_sys_id_.Destroy();
  valid_until_time_.Destroy();
  client_ref_id_.Destroy();
  reserver1_.Destroy();
  if (this != internal_default_instance()) delete head_;
}

void ficc_BilateralOrder_Req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ficc_BilateralOrder_Req::Clear() {
// @@protoc_insertion_point(message_clear_start:ficc_message.ficc_BilateralOrder_Req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trade_acct_.ClearToEmpty();
  secu_code_.ClearToEmpty();
  order_price_type_.ClearToEmpty();
  time_cond_.ClearToEmpty();
  text_.ClearToEmpty();
  order_sys_id_.ClearToEmpty();
  valid_until_time_.ClearToEmpty();
  client_ref_id_.ClearToEmpty();
  reserver1_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  ::memset(&bid_vol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ask_strike_yeild_) -
      reinterpret_cast<char*>(&bid_vol_)) + sizeof(ask_strike_yeild_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ficc_BilateralOrder_Req::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message_head.head head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string trade_acct = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_trade_acct();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Req.trade_acct"));
        } else
          goto handle_unusual;
        continue;
      // string secu_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_secu_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Req.secu_code"));
        } else
          goto handle_unusual;
        continue;
      // string order_price_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_order_price_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Req.order_price_type"));
        } else
          goto handle_unusual;
        continue;
      // float bid_price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          bid_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 bid_vol = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          bid_vol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float ask_price = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          ask_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 ask_vol = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          ask_vol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string time_cond = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_time_cond();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Req.time_cond"));
        } else
          goto handle_unusual;
        continue;
      // uint32 user_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 strategy_code = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          strategy_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Req.text"));
        } else
          goto handle_unusual;
        continue;
      // string order_sys_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_order_sys_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Req.order_sys_id"));
        } else
          goto handle_unusual;
        continue;
      // float bid_ytm = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          bid_ytm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float bid_strike_yeild = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          bid_strike_yeild_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 bid_legsettl_type = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          bid_legsettl_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 bid_delivery_type = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          bid_delivery_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 bid_clearing_method = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          bid_clearing_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float ask_ytm = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          ask_ytm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float ask_strike_yeild = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          ask_strike_yeild_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 ask_legsettl_type = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          ask_legsettl_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ask_delivery_type = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          ask_delivery_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ask_clearing_method = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          ask_clearing_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 quote_type = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          quote_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 max_floor = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          max_floor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string valid_until_time = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_valid_until_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Req.valid_until_time"));
        } else
          goto handle_unusual;
        continue;
      // string client_ref_id = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_client_ref_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Req.client_ref_id"));
        } else
          goto handle_unusual;
        continue;
      // uint64 routing_type = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          routing_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 market_indicator = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          market_indicator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string reserver1 = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_reserver1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Req.reserver1"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ficc_BilateralOrder_Req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ficc_message.ficc_BilateralOrder_Req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // string trade_acct = 2;
  if (!this->_internal_trade_acct().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trade_acct().data(), static_cast<int>(this->_internal_trade_acct().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Req.trade_acct");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_trade_acct(), target);
  }

  // string secu_code = 3;
  if (!this->_internal_secu_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secu_code().data(), static_cast<int>(this->_internal_secu_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Req.secu_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_secu_code(), target);
  }

  // string order_price_type = 4;
  if (!this->_internal_order_price_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_price_type().data(), static_cast<int>(this->_internal_order_price_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Req.order_price_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_order_price_type(), target);
  }

  // float bid_price = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_price = this->_internal_bid_price();
  uint32_t raw_bid_price;
  memcpy(&raw_bid_price, &tmp_bid_price, sizeof(tmp_bid_price));
  if (raw_bid_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_bid_price(), target);
  }

  // uint64 bid_vol = 6;
  if (this->_internal_bid_vol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_bid_vol(), target);
  }

  // float ask_price = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_price = this->_internal_ask_price();
  uint32_t raw_ask_price;
  memcpy(&raw_ask_price, &tmp_ask_price, sizeof(tmp_ask_price));
  if (raw_ask_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_ask_price(), target);
  }

  // uint64 ask_vol = 8;
  if (this->_internal_ask_vol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_ask_vol(), target);
  }

  // string time_cond = 9;
  if (!this->_internal_time_cond().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time_cond().data(), static_cast<int>(this->_internal_time_cond().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Req.time_cond");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_time_cond(), target);
  }

  // uint32 user_id = 10;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_user_id(), target);
  }

  // uint64 strategy_code = 11;
  if (this->_internal_strategy_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_strategy_code(), target);
  }

  // string text = 12;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Req.text");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_text(), target);
  }

  // string order_sys_id = 13;
  if (!this->_internal_order_sys_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_sys_id().data(), static_cast<int>(this->_internal_order_sys_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Req.order_sys_id");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_order_sys_id(), target);
  }

  // float bid_ytm = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_ytm = this->_internal_bid_ytm();
  uint32_t raw_bid_ytm;
  memcpy(&raw_bid_ytm, &tmp_bid_ytm, sizeof(tmp_bid_ytm));
  if (raw_bid_ytm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_bid_ytm(), target);
  }

  // float bid_strike_yeild = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_strike_yeild = this->_internal_bid_strike_yeild();
  uint32_t raw_bid_strike_yeild;
  memcpy(&raw_bid_strike_yeild, &tmp_bid_strike_yeild, sizeof(tmp_bid_strike_yeild));
  if (raw_bid_strike_yeild != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_bid_strike_yeild(), target);
  }

  // uint64 bid_legsettl_type = 16;
  if (this->_internal_bid_legsettl_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(16, this->_internal_bid_legsettl_type(), target);
  }

  // uint64 bid_delivery_type = 17;
  if (this->_internal_bid_delivery_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(17, this->_internal_bid_delivery_type(), target);
  }

  // uint64 bid_clearing_method = 18;
  if (this->_internal_bid_clearing_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(18, this->_internal_bid_clearing_method(), target);
  }

  // float ask_ytm = 19;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_ytm = this->_internal_ask_ytm();
  uint32_t raw_ask_ytm;
  memcpy(&raw_ask_ytm, &tmp_ask_ytm, sizeof(tmp_ask_ytm));
  if (raw_ask_ytm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(19, this->_internal_ask_ytm(), target);
  }

  // float ask_strike_yeild = 20;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_strike_yeild = this->_internal_ask_strike_yeild();
  uint32_t raw_ask_strike_yeild;
  memcpy(&raw_ask_strike_yeild, &tmp_ask_strike_yeild, sizeof(tmp_ask_strike_yeild));
  if (raw_ask_strike_yeild != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(20, this->_internal_ask_strike_yeild(), target);
  }

  // uint64 ask_legsettl_type = 21;
  if (this->_internal_ask_legsettl_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(21, this->_internal_ask_legsettl_type(), target);
  }

  // uint64 ask_delivery_type = 22;
  if (this->_internal_ask_delivery_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(22, this->_internal_ask_delivery_type(), target);
  }

  // uint64 ask_clearing_method = 23;
  if (this->_internal_ask_clearing_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(23, this->_internal_ask_clearing_method(), target);
  }

  // uint64 quote_type = 24;
  if (this->_internal_quote_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(24, this->_internal_quote_type(), target);
  }

  // uint64 max_floor = 25;
  if (this->_internal_max_floor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(25, this->_internal_max_floor(), target);
  }

  // string valid_until_time = 26;
  if (!this->_internal_valid_until_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_valid_until_time().data(), static_cast<int>(this->_internal_valid_until_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Req.valid_until_time");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_valid_until_time(), target);
  }

  // string client_ref_id = 27;
  if (!this->_internal_client_ref_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_ref_id().data(), static_cast<int>(this->_internal_client_ref_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Req.client_ref_id");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_client_ref_id(), target);
  }

  // uint64 routing_type = 28;
  if (this->_internal_routing_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(28, this->_internal_routing_type(), target);
  }

  // uint64 market_indicator = 29;
  if (this->_internal_market_indicator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(29, this->_internal_market_indicator(), target);
  }

  // string reserver1 = 30;
  if (!this->_internal_reserver1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reserver1().data(), static_cast<int>(this->_internal_reserver1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Req.reserver1");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_reserver1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ficc_message.ficc_BilateralOrder_Req)
  return target;
}

size_t ficc_BilateralOrder_Req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ficc_message.ficc_BilateralOrder_Req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trade_acct = 2;
  if (!this->_internal_trade_acct().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trade_acct());
  }

  // string secu_code = 3;
  if (!this->_internal_secu_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secu_code());
  }

  // string order_price_type = 4;
  if (!this->_internal_order_price_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_price_type());
  }

  // string time_cond = 9;
  if (!this->_internal_time_cond().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time_cond());
  }

  // string text = 12;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string order_sys_id = 13;
  if (!this->_internal_order_sys_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_sys_id());
  }

  // string valid_until_time = 26;
  if (!this->_internal_valid_until_time().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_valid_until_time());
  }

  // string client_ref_id = 27;
  if (!this->_internal_client_ref_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_ref_id());
  }

  // string reserver1 = 30;
  if (!this->_internal_reserver1().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reserver1());
  }

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  // uint64 bid_vol = 6;
  if (this->_internal_bid_vol() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bid_vol());
  }

  // float bid_price = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_price = this->_internal_bid_price();
  uint32_t raw_bid_price;
  memcpy(&raw_bid_price, &tmp_bid_price, sizeof(tmp_bid_price));
  if (raw_bid_price != 0) {
    total_size += 1 + 4;
  }

  // float ask_price = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_price = this->_internal_ask_price();
  uint32_t raw_ask_price;
  memcpy(&raw_ask_price, &tmp_ask_price, sizeof(tmp_ask_price));
  if (raw_ask_price != 0) {
    total_size += 1 + 4;
  }

  // uint64 ask_vol = 8;
  if (this->_internal_ask_vol() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ask_vol());
  }

  // uint64 strategy_code = 11;
  if (this->_internal_strategy_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_strategy_code());
  }

  // uint32 user_id = 10;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // float bid_ytm = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_ytm = this->_internal_bid_ytm();
  uint32_t raw_bid_ytm;
  memcpy(&raw_bid_ytm, &tmp_bid_ytm, sizeof(tmp_bid_ytm));
  if (raw_bid_ytm != 0) {
    total_size += 1 + 4;
  }

  // uint64 bid_legsettl_type = 16;
  if (this->_internal_bid_legsettl_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_bid_legsettl_type());
  }

  // uint64 bid_delivery_type = 17;
  if (this->_internal_bid_delivery_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_bid_delivery_type());
  }

  // float bid_strike_yeild = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_strike_yeild = this->_internal_bid_strike_yeild();
  uint32_t raw_bid_strike_yeild;
  memcpy(&raw_bid_strike_yeild, &tmp_bid_strike_yeild, sizeof(tmp_bid_strike_yeild));
  if (raw_bid_strike_yeild != 0) {
    total_size += 1 + 4;
  }

  // float ask_ytm = 19;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_ytm = this->_internal_ask_ytm();
  uint32_t raw_ask_ytm;
  memcpy(&raw_ask_ytm, &tmp_ask_ytm, sizeof(tmp_ask_ytm));
  if (raw_ask_ytm != 0) {
    total_size += 2 + 4;
  }

  // uint64 bid_clearing_method = 18;
  if (this->_internal_bid_clearing_method() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_bid_clearing_method());
  }

  // uint64 ask_legsettl_type = 21;
  if (this->_internal_ask_legsettl_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_ask_legsettl_type());
  }

  // uint64 ask_delivery_type = 22;
  if (this->_internal_ask_delivery_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_ask_delivery_type());
  }

  // uint64 ask_clearing_method = 23;
  if (this->_internal_ask_clearing_method() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_ask_clearing_method());
  }

  // uint64 quote_type = 24;
  if (this->_internal_quote_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_quote_type());
  }

  // uint64 max_floor = 25;
  if (this->_internal_max_floor() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_max_floor());
  }

  // uint64 routing_type = 28;
  if (this->_internal_routing_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_routing_type());
  }

  // uint64 market_indicator = 29;
  if (this->_internal_market_indicator() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_market_indicator());
  }

  // float ask_strike_yeild = 20;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_strike_yeild = this->_internal_ask_strike_yeild();
  uint32_t raw_ask_strike_yeild;
  memcpy(&raw_ask_strike_yeild, &tmp_ask_strike_yeild, sizeof(tmp_ask_strike_yeild));
  if (raw_ask_strike_yeild != 0) {
    total_size += 2 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ficc_BilateralOrder_Req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ficc_BilateralOrder_Req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ficc_BilateralOrder_Req::GetClassData() const { return &_class_data_; }

void ficc_BilateralOrder_Req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ficc_BilateralOrder_Req *>(to)->MergeFrom(
      static_cast<const ficc_BilateralOrder_Req &>(from));
}


void ficc_BilateralOrder_Req::MergeFrom(const ficc_BilateralOrder_Req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ficc_message.ficc_BilateralOrder_Req)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_trade_acct().empty()) {
    _internal_set_trade_acct(from._internal_trade_acct());
  }
  if (!from._internal_secu_code().empty()) {
    _internal_set_secu_code(from._internal_secu_code());
  }
  if (!from._internal_order_price_type().empty()) {
    _internal_set_order_price_type(from._internal_order_price_type());
  }
  if (!from._internal_time_cond().empty()) {
    _internal_set_time_cond(from._internal_time_cond());
  }
  if (!from._internal_text().empty()) {
    _internal_set_text(from._internal_text());
  }
  if (!from._internal_order_sys_id().empty()) {
    _internal_set_order_sys_id(from._internal_order_sys_id());
  }
  if (!from._internal_valid_until_time().empty()) {
    _internal_set_valid_until_time(from._internal_valid_until_time());
  }
  if (!from._internal_client_ref_id().empty()) {
    _internal_set_client_ref_id(from._internal_client_ref_id());
  }
  if (!from._internal_reserver1().empty()) {
    _internal_set_reserver1(from._internal_reserver1());
  }
  if (from._internal_has_head()) {
    _internal_mutable_head()->::message_head::head::MergeFrom(from._internal_head());
  }
  if (from._internal_bid_vol() != 0) {
    _internal_set_bid_vol(from._internal_bid_vol());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_price = from._internal_bid_price();
  uint32_t raw_bid_price;
  memcpy(&raw_bid_price, &tmp_bid_price, sizeof(tmp_bid_price));
  if (raw_bid_price != 0) {
    _internal_set_bid_price(from._internal_bid_price());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_price = from._internal_ask_price();
  uint32_t raw_ask_price;
  memcpy(&raw_ask_price, &tmp_ask_price, sizeof(tmp_ask_price));
  if (raw_ask_price != 0) {
    _internal_set_ask_price(from._internal_ask_price());
  }
  if (from._internal_ask_vol() != 0) {
    _internal_set_ask_vol(from._internal_ask_vol());
  }
  if (from._internal_strategy_code() != 0) {
    _internal_set_strategy_code(from._internal_strategy_code());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_ytm = from._internal_bid_ytm();
  uint32_t raw_bid_ytm;
  memcpy(&raw_bid_ytm, &tmp_bid_ytm, sizeof(tmp_bid_ytm));
  if (raw_bid_ytm != 0) {
    _internal_set_bid_ytm(from._internal_bid_ytm());
  }
  if (from._internal_bid_legsettl_type() != 0) {
    _internal_set_bid_legsettl_type(from._internal_bid_legsettl_type());
  }
  if (from._internal_bid_delivery_type() != 0) {
    _internal_set_bid_delivery_type(from._internal_bid_delivery_type());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_strike_yeild = from._internal_bid_strike_yeild();
  uint32_t raw_bid_strike_yeild;
  memcpy(&raw_bid_strike_yeild, &tmp_bid_strike_yeild, sizeof(tmp_bid_strike_yeild));
  if (raw_bid_strike_yeild != 0) {
    _internal_set_bid_strike_yeild(from._internal_bid_strike_yeild());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_ytm = from._internal_ask_ytm();
  uint32_t raw_ask_ytm;
  memcpy(&raw_ask_ytm, &tmp_ask_ytm, sizeof(tmp_ask_ytm));
  if (raw_ask_ytm != 0) {
    _internal_set_ask_ytm(from._internal_ask_ytm());
  }
  if (from._internal_bid_clearing_method() != 0) {
    _internal_set_bid_clearing_method(from._internal_bid_clearing_method());
  }
  if (from._internal_ask_legsettl_type() != 0) {
    _internal_set_ask_legsettl_type(from._internal_ask_legsettl_type());
  }
  if (from._internal_ask_delivery_type() != 0) {
    _internal_set_ask_delivery_type(from._internal_ask_delivery_type());
  }
  if (from._internal_ask_clearing_method() != 0) {
    _internal_set_ask_clearing_method(from._internal_ask_clearing_method());
  }
  if (from._internal_quote_type() != 0) {
    _internal_set_quote_type(from._internal_quote_type());
  }
  if (from._internal_max_floor() != 0) {
    _internal_set_max_floor(from._internal_max_floor());
  }
  if (from._internal_routing_type() != 0) {
    _internal_set_routing_type(from._internal_routing_type());
  }
  if (from._internal_market_indicator() != 0) {
    _internal_set_market_indicator(from._internal_market_indicator());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_strike_yeild = from._internal_ask_strike_yeild();
  uint32_t raw_ask_strike_yeild;
  memcpy(&raw_ask_strike_yeild, &tmp_ask_strike_yeild, sizeof(tmp_ask_strike_yeild));
  if (raw_ask_strike_yeild != 0) {
    _internal_set_ask_strike_yeild(from._internal_ask_strike_yeild());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ficc_BilateralOrder_Req::CopyFrom(const ficc_BilateralOrder_Req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ficc_message.ficc_BilateralOrder_Req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ficc_BilateralOrder_Req::IsInitialized() const {
  return true;
}

void ficc_BilateralOrder_Req::InternalSwap(ficc_BilateralOrder_Req* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trade_acct_, lhs_arena,
      &other->trade_acct_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &secu_code_, lhs_arena,
      &other->secu_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_price_type_, lhs_arena,
      &other->order_price_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &time_cond_, lhs_arena,
      &other->time_cond_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_sys_id_, lhs_arena,
      &other->order_sys_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &valid_until_time_, lhs_arena,
      &other->valid_until_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &client_ref_id_, lhs_arena,
      &other->client_ref_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &reserver1_, lhs_arena,
      &other->reserver1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ficc_BilateralOrder_Req, ask_strike_yeild_)
      + sizeof(ficc_BilateralOrder_Req::ask_strike_yeild_)
      - PROTOBUF_FIELD_OFFSET(ficc_BilateralOrder_Req, head_)>(
          reinterpret_cast<char*>(&head_),
          reinterpret_cast<char*>(&other->head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ficc_BilateralOrder_Req::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ficc_2eproto_getter, &descriptor_table_ficc_2eproto_once,
      file_level_metadata_ficc_2eproto[3]);
}

// ===================================================================

class ficc_BilateralOrder_Rtn::_Internal {
 public:
  static const ::message_head::head& head(const ficc_BilateralOrder_Rtn* msg);
};

const ::message_head::head&
ficc_BilateralOrder_Rtn::_Internal::head(const ficc_BilateralOrder_Rtn* msg) {
  return *msg->head_;
}
void ficc_BilateralOrder_Rtn::clear_head() {
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
}
ficc_BilateralOrder_Rtn::ficc_BilateralOrder_Rtn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ficc_message.ficc_BilateralOrder_Rtn)
}
ficc_BilateralOrder_Rtn::ficc_BilateralOrder_Rtn(const ficc_BilateralOrder_Rtn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trade_acct_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trade_acct_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trade_acct().empty()) {
    trade_acct_.Set(from._internal_trade_acct(), 
      GetArenaForAllocation());
  }
  fund_acct_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fund_acct_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fund_acct().empty()) {
    fund_acct_.Set(from._internal_fund_acct(), 
      GetArenaForAllocation());
  }
  combino_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    combino_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_combino().empty()) {
    combino_.Set(from._internal_combino(), 
      GetArenaForAllocation());
  }
  ex_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ex_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ex_code().empty()) {
    ex_code_.Set(from._internal_ex_code(), 
      GetArenaForAllocation());
  }
  commodity_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    commodity_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_commodity_type().empty()) {
    commodity_type_.Set(from._internal_commodity_type(), 
      GetArenaForAllocation());
  }
  secu_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secu_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secu_code().empty()) {
    secu_code_.Set(from._internal_secu_code(), 
      GetArenaForAllocation());
  }
  secu_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secu_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secu_name().empty()) {
    secu_name_.Set(from._internal_secu_name(), 
      GetArenaForAllocation());
  }
  order_price_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_price_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_price_type().empty()) {
    order_price_type_.Set(from._internal_order_price_type(), 
      GetArenaForAllocation());
  }
  offset_flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    offset_flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_offset_flag().empty()) {
    offset_flag_.Set(from._internal_offset_flag(), 
      GetArenaForAllocation());
  }
  hedge_flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hedge_flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hedge_flag().empty()) {
    hedge_flag_.Set(from._internal_hedge_flag(), 
      GetArenaForAllocation());
  }
  bilateral_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bilateral_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bilateral_id().empty()) {
    bilateral_id_.Set(from._internal_bilateral_id(), 
      GetArenaForAllocation());
  }
  time_cond_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    time_cond_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_time_cond().empty()) {
    time_cond_.Set(from._internal_time_cond(), 
      GetArenaForAllocation());
  }
  text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    text_.Set(from._internal_text(), 
      GetArenaForAllocation());
  }
  order_sys_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_sys_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_sys_id().empty()) {
    order_sys_id_.Set(from._internal_order_sys_id(), 
      GetArenaForAllocation());
  }
  trade_date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trade_date_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trade_date().empty()) {
    trade_date_.Set(from._internal_trade_date(), 
      GetArenaForAllocation());
  }
  insert_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    insert_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_insert_time().empty()) {
    insert_time_.Set(from._internal_insert_time(), 
      GetArenaForAllocation());
  }
  valid_until_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    valid_until_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_valid_until_time().empty()) {
    valid_until_time_.Set(from._internal_valid_until_time(), 
      GetArenaForAllocation());
  }
  client_ref_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    client_ref_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_ref_id().empty()) {
    client_ref_id_.Set(from._internal_client_ref_id(), 
      GetArenaForAllocation());
  }
  trading_day_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trading_day_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trading_day().empty()) {
    trading_day_.Set(from._internal_trading_day(), 
      GetArenaForAllocation());
  }
  order_submit_status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_submit_status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_submit_status().empty()) {
    order_submit_status_.Set(from._internal_order_submit_status(), 
      GetArenaForAllocation());
  }
  order_status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_status().empty()) {
    order_status_.Set(from._internal_order_status(), 
      GetArenaForAllocation());
  }
  update_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    update_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_update_time().empty()) {
    update_time_.Set(from._internal_update_time(), 
      GetArenaForAllocation());
  }
  cancel_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cancel_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cancel_time().empty()) {
    cancel_time_.Set(from._internal_cancel_time(), 
      GetArenaForAllocation());
  }
  ret_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ret_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ret_msg().empty()) {
    ret_msg_.Set(from._internal_ret_msg(), 
      GetArenaForAllocation());
  }
  action_flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action_flag().empty()) {
    action_flag_.Set(from._internal_action_flag(), 
      GetArenaForAllocation());
  }
  order_source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_source().empty()) {
    order_source_.Set(from._internal_order_source(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_head()) {
    head_ = new ::message_head::head(*from.head_);
  } else {
    head_ = nullptr;
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_code_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(ret_code_));
  // @@protoc_insertion_point(copy_constructor:ficc_message.ficc_BilateralOrder_Rtn)
}

inline void ficc_BilateralOrder_Rtn::SharedCtor() {
trade_acct_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trade_acct_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
fund_acct_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fund_acct_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
combino_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  combino_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ex_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ex_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
commodity_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  commodity_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secu_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secu_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secu_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secu_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
order_price_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_price_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
offset_flag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  offset_flag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
hedge_flag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hedge_flag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bilateral_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bilateral_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
time_cond_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  time_cond_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
text_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
order_sys_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_sys_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
trade_date_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trade_date_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
insert_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  insert_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
valid_until_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  valid_until_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
client_ref_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  client_ref_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
trading_day_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trading_day_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
order_submit_status_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_submit_status_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
order_status_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_status_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
update_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  update_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cancel_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cancel_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ret_msg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ret_msg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
action_flag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_flag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
order_source_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_source_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&head_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ret_code_) -
    reinterpret_cast<char*>(&head_)) + sizeof(ret_code_));
}

ficc_BilateralOrder_Rtn::~ficc_BilateralOrder_Rtn() {
  // @@protoc_insertion_point(destructor:ficc_message.ficc_BilateralOrder_Rtn)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ficc_BilateralOrder_Rtn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  trade_acct_.Destroy();
  fund_acct_.Destroy();
  combino_.Destroy();
  ex_code_.Destroy();
  commodity_type_.Destroy();
  secu_code_.Destroy();
  secu_name_.Destroy();
  order_price_type_.Destroy();
  offset_flag_.Destroy();
  hedge_flag_.Destroy();
  bilateral_id_.Destroy();
  time_cond_.Destroy();
  text_.Destroy();
  order_sys_id_.Destroy();
  trade_date_.Destroy();
  insert_time_.Destroy();
  valid_until_time_.Destroy();
  client_ref_id_.Destroy();
  trading_day_.Destroy();
  order_submit_status_.Destroy();
  order_status_.Destroy();
  update_time_.Destroy();
  cancel_time_.Destroy();
  ret_msg_.Destroy();
  action_flag_.Destroy();
  order_source_.Destroy();
  if (this != internal_default_instance()) delete head_;
}

void ficc_BilateralOrder_Rtn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ficc_BilateralOrder_Rtn::Clear() {
// @@protoc_insertion_point(message_clear_start:ficc_message.ficc_BilateralOrder_Rtn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trade_acct_.ClearToEmpty();
  fund_acct_.ClearToEmpty();
  combino_.ClearToEmpty();
  ex_code_.ClearToEmpty();
  commodity_type_.ClearToEmpty();
  secu_code_.ClearToEmpty();
  secu_name_.ClearToEmpty();
  order_price_type_.ClearToEmpty();
  offset_flag_.ClearToEmpty();
  hedge_flag_.ClearToEmpty();
  bilateral_id_.ClearToEmpty();
  time_cond_.ClearToEmpty();
  text_.ClearToEmpty();
  order_sys_id_.ClearToEmpty();
  trade_date_.ClearToEmpty();
  insert_time_.ClearToEmpty();
  valid_until_time_.ClearToEmpty();
  client_ref_id_.ClearToEmpty();
  trading_day_.ClearToEmpty();
  order_submit_status_.ClearToEmpty();
  order_status_.ClearToEmpty();
  update_time_.ClearToEmpty();
  cancel_time_.ClearToEmpty();
  ret_msg_.ClearToEmpty();
  action_flag_.ClearToEmpty();
  order_source_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_code_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(ret_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ficc_BilateralOrder_Rtn::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message_head.head head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string trade_acct = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_trade_acct();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Rtn.trade_acct"));
        } else
          goto handle_unusual;
        continue;
      // string fund_acct = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_fund_acct();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Rtn.fund_acct"));
        } else
          goto handle_unusual;
        continue;
      // string combino = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_combino();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Rtn.combino"));
        } else
          goto handle_unusual;
        continue;
      // uint32 user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ex_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_ex_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Rtn.ex_code"));
        } else
          goto handle_unusual;
        continue;
      // string commodity_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_commodity_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Rtn.commodity_type"));
        } else
          goto handle_unusual;
        continue;
      // string secu_code = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_secu_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Rtn.secu_code"));
        } else
          goto handle_unusual;
        continue;
      // string secu_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_secu_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Rtn.secu_name"));
        } else
          goto handle_unusual;
        continue;
      // string order_price_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_order_price_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Rtn.order_price_type"));
        } else
          goto handle_unusual;
        continue;
      // string offset_flag = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_offset_flag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Rtn.offset_flag"));
        } else
          goto handle_unusual;
        continue;
      // string hedge_flag = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_hedge_flag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Rtn.hedge_flag"));
        } else
          goto handle_unusual;
        continue;
      // string bilateral_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_bilateral_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Rtn.bilateral_id"));
        } else
          goto handle_unusual;
        continue;
      // float bid_price = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          bid_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 bid_vol = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          bid_vol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float ask_price = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          ask_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 ask_vol = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          ask_vol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string time_cond = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_time_cond();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Rtn.time_cond"));
        } else
          goto handle_unusual;
        continue;
      // uint64 strategy_code = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          strategy_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Rtn.text"));
        } else
          goto handle_unusual;
        continue;
      // string order_sys_id = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_order_sys_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Rtn.order_sys_id"));
        } else
          goto handle_unusual;
        continue;
      // string trade_date = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_trade_date();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Rtn.trade_date"));
        } else
          goto handle_unusual;
        continue;
      // string insert_time = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_insert_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Rtn.insert_time"));
        } else
          goto handle_unusual;
        continue;
      // float bid_ytm = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 197)) {
          bid_ytm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float bid_strike_yeild = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 205)) {
          bid_strike_yeild_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 bid_legsettl_type = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          bid_legsettl_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 bid_delivery_type = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          bid_delivery_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 bid_clearing_method = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          bid_clearing_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float ask_ytm = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 237)) {
          ask_ytm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float ask_strike_yeild = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 245)) {
          ask_strike_yeild_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 ask_legsettl_type = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          ask_legsettl_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ask_delivery_type = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          ask_delivery_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ask_clearing_method = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ask_clearing_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 quote_type = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          quote_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 max_floor = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          max_floor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string valid_until_time = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_valid_until_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Rtn.valid_until_time"));
        } else
          goto handle_unusual;
        continue;
      // string client_ref_id = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_client_ref_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Rtn.client_ref_id"));
        } else
          goto handle_unusual;
        continue;
      // uint64 routing_type = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          routing_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 market_indicator = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          market_indicator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string trading_day = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_trading_day();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Rtn.trading_day"));
        } else
          goto handle_unusual;
        continue;
      // uint64 ask_vol_traded = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          ask_vol_traded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ask_vol_total = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          ask_vol_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 bid_vol_traded = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          bid_vol_traded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 bid_vol_total = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          bid_vol_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string order_submit_status = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_order_submit_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Rtn.order_submit_status"));
        } else
          goto handle_unusual;
        continue;
      // string order_status = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_order_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Rtn.order_status"));
        } else
          goto handle_unusual;
        continue;
      // string update_time = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_update_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Rtn.update_time"));
        } else
          goto handle_unusual;
        continue;
      // string cancel_time = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_cancel_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Rtn.cancel_time"));
        } else
          goto handle_unusual;
        continue;
      // uint64 ret_code = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ret_msg = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_ret_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Rtn.ret_msg"));
        } else
          goto handle_unusual;
        continue;
      // string action_flag = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_action_flag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Rtn.action_flag"));
        } else
          goto handle_unusual;
        continue;
      // string order_source = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_order_source();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_BilateralOrder_Rtn.order_source"));
        } else
          goto handle_unusual;
        continue;
      // uint32 sequence_no = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          sequence_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ficc_BilateralOrder_Rtn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ficc_message.ficc_BilateralOrder_Rtn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // string trade_acct = 2;
  if (!this->_internal_trade_acct().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trade_acct().data(), static_cast<int>(this->_internal_trade_acct().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Rtn.trade_acct");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_trade_acct(), target);
  }

  // string fund_acct = 3;
  if (!this->_internal_fund_acct().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fund_acct().data(), static_cast<int>(this->_internal_fund_acct().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Rtn.fund_acct");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_fund_acct(), target);
  }

  // string combino = 4;
  if (!this->_internal_combino().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_combino().data(), static_cast<int>(this->_internal_combino().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Rtn.combino");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_combino(), target);
  }

  // uint32 user_id = 5;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_user_id(), target);
  }

  // string ex_code = 6;
  if (!this->_internal_ex_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ex_code().data(), static_cast<int>(this->_internal_ex_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Rtn.ex_code");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_ex_code(), target);
  }

  // string commodity_type = 7;
  if (!this->_internal_commodity_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_commodity_type().data(), static_cast<int>(this->_internal_commodity_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Rtn.commodity_type");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_commodity_type(), target);
  }

  // string secu_code = 8;
  if (!this->_internal_secu_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secu_code().data(), static_cast<int>(this->_internal_secu_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Rtn.secu_code");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_secu_code(), target);
  }

  // string secu_name = 9;
  if (!this->_internal_secu_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secu_name().data(), static_cast<int>(this->_internal_secu_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Rtn.secu_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_secu_name(), target);
  }

  // string order_price_type = 10;
  if (!this->_internal_order_price_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_price_type().data(), static_cast<int>(this->_internal_order_price_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Rtn.order_price_type");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_order_price_type(), target);
  }

  // string offset_flag = 11;
  if (!this->_internal_offset_flag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_offset_flag().data(), static_cast<int>(this->_internal_offset_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Rtn.offset_flag");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_offset_flag(), target);
  }

  // string hedge_flag = 12;
  if (!this->_internal_hedge_flag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hedge_flag().data(), static_cast<int>(this->_internal_hedge_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Rtn.hedge_flag");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_hedge_flag(), target);
  }

  // string bilateral_id = 13;
  if (!this->_internal_bilateral_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bilateral_id().data(), static_cast<int>(this->_internal_bilateral_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Rtn.bilateral_id");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_bilateral_id(), target);
  }

  // float bid_price = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_price = this->_internal_bid_price();
  uint32_t raw_bid_price;
  memcpy(&raw_bid_price, &tmp_bid_price, sizeof(tmp_bid_price));
  if (raw_bid_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_bid_price(), target);
  }

  // uint64 bid_vol = 15;
  if (this->_internal_bid_vol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(15, this->_internal_bid_vol(), target);
  }

  // float ask_price = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_price = this->_internal_ask_price();
  uint32_t raw_ask_price;
  memcpy(&raw_ask_price, &tmp_ask_price, sizeof(tmp_ask_price));
  if (raw_ask_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_ask_price(), target);
  }

  // uint64 ask_vol = 17;
  if (this->_internal_ask_vol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(17, this->_internal_ask_vol(), target);
  }

  // string time_cond = 18;
  if (!this->_internal_time_cond().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time_cond().data(), static_cast<int>(this->_internal_time_cond().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Rtn.time_cond");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_time_cond(), target);
  }

  // uint64 strategy_code = 19;
  if (this->_internal_strategy_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(19, this->_internal_strategy_code(), target);
  }

  // string text = 20;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Rtn.text");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_text(), target);
  }

  // string order_sys_id = 21;
  if (!this->_internal_order_sys_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_sys_id().data(), static_cast<int>(this->_internal_order_sys_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Rtn.order_sys_id");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_order_sys_id(), target);
  }

  // string trade_date = 22;
  if (!this->_internal_trade_date().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trade_date().data(), static_cast<int>(this->_internal_trade_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Rtn.trade_date");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_trade_date(), target);
  }

  // string insert_time = 23;
  if (!this->_internal_insert_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_insert_time().data(), static_cast<int>(this->_internal_insert_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Rtn.insert_time");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_insert_time(), target);
  }

  // float bid_ytm = 24;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_ytm = this->_internal_bid_ytm();
  uint32_t raw_bid_ytm;
  memcpy(&raw_bid_ytm, &tmp_bid_ytm, sizeof(tmp_bid_ytm));
  if (raw_bid_ytm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(24, this->_internal_bid_ytm(), target);
  }

  // float bid_strike_yeild = 25;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_strike_yeild = this->_internal_bid_strike_yeild();
  uint32_t raw_bid_strike_yeild;
  memcpy(&raw_bid_strike_yeild, &tmp_bid_strike_yeild, sizeof(tmp_bid_strike_yeild));
  if (raw_bid_strike_yeild != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(25, this->_internal_bid_strike_yeild(), target);
  }

  // uint64 bid_legsettl_type = 26;
  if (this->_internal_bid_legsettl_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(26, this->_internal_bid_legsettl_type(), target);
  }

  // uint64 bid_delivery_type = 27;
  if (this->_internal_bid_delivery_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(27, this->_internal_bid_delivery_type(), target);
  }

  // uint64 bid_clearing_method = 28;
  if (this->_internal_bid_clearing_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(28, this->_internal_bid_clearing_method(), target);
  }

  // float ask_ytm = 29;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_ytm = this->_internal_ask_ytm();
  uint32_t raw_ask_ytm;
  memcpy(&raw_ask_ytm, &tmp_ask_ytm, sizeof(tmp_ask_ytm));
  if (raw_ask_ytm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(29, this->_internal_ask_ytm(), target);
  }

  // float ask_strike_yeild = 30;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_strike_yeild = this->_internal_ask_strike_yeild();
  uint32_t raw_ask_strike_yeild;
  memcpy(&raw_ask_strike_yeild, &tmp_ask_strike_yeild, sizeof(tmp_ask_strike_yeild));
  if (raw_ask_strike_yeild != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(30, this->_internal_ask_strike_yeild(), target);
  }

  // uint64 ask_legsettl_type = 31;
  if (this->_internal_ask_legsettl_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(31, this->_internal_ask_legsettl_type(), target);
  }

  // uint64 ask_delivery_type = 32;
  if (this->_internal_ask_delivery_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(32, this->_internal_ask_delivery_type(), target);
  }

  // uint64 ask_clearing_method = 33;
  if (this->_internal_ask_clearing_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(33, this->_internal_ask_clearing_method(), target);
  }

  // uint64 quote_type = 34;
  if (this->_internal_quote_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(34, this->_internal_quote_type(), target);
  }

  // uint64 max_floor = 35;
  if (this->_internal_max_floor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(35, this->_internal_max_floor(), target);
  }

  // string valid_until_time = 36;
  if (!this->_internal_valid_until_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_valid_until_time().data(), static_cast<int>(this->_internal_valid_until_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Rtn.valid_until_time");
    target = stream->WriteStringMaybeAliased(
        36, this->_internal_valid_until_time(), target);
  }

  // string client_ref_id = 37;
  if (!this->_internal_client_ref_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_ref_id().data(), static_cast<int>(this->_internal_client_ref_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Rtn.client_ref_id");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_client_ref_id(), target);
  }

  // uint64 routing_type = 38;
  if (this->_internal_routing_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(38, this->_internal_routing_type(), target);
  }

  // uint64 market_indicator = 39;
  if (this->_internal_market_indicator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(39, this->_internal_market_indicator(), target);
  }

  // string trading_day = 40;
  if (!this->_internal_trading_day().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trading_day().data(), static_cast<int>(this->_internal_trading_day().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Rtn.trading_day");
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_trading_day(), target);
  }

  // uint64 ask_vol_traded = 41;
  if (this->_internal_ask_vol_traded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(41, this->_internal_ask_vol_traded(), target);
  }

  // uint64 ask_vol_total = 42;
  if (this->_internal_ask_vol_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(42, this->_internal_ask_vol_total(), target);
  }

  // uint64 bid_vol_traded = 43;
  if (this->_internal_bid_vol_traded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(43, this->_internal_bid_vol_traded(), target);
  }

  // uint64 bid_vol_total = 44;
  if (this->_internal_bid_vol_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(44, this->_internal_bid_vol_total(), target);
  }

  // string order_submit_status = 45;
  if (!this->_internal_order_submit_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_submit_status().data(), static_cast<int>(this->_internal_order_submit_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Rtn.order_submit_status");
    target = stream->WriteStringMaybeAliased(
        45, this->_internal_order_submit_status(), target);
  }

  // string order_status = 46;
  if (!this->_internal_order_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_status().data(), static_cast<int>(this->_internal_order_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Rtn.order_status");
    target = stream->WriteStringMaybeAliased(
        46, this->_internal_order_status(), target);
  }

  // string update_time = 47;
  if (!this->_internal_update_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_update_time().data(), static_cast<int>(this->_internal_update_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Rtn.update_time");
    target = stream->WriteStringMaybeAliased(
        47, this->_internal_update_time(), target);
  }

  // string cancel_time = 48;
  if (!this->_internal_cancel_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cancel_time().data(), static_cast<int>(this->_internal_cancel_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Rtn.cancel_time");
    target = stream->WriteStringMaybeAliased(
        48, this->_internal_cancel_time(), target);
  }

  // uint64 ret_code = 49;
  if (this->_internal_ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(49, this->_internal_ret_code(), target);
  }

  // string ret_msg = 50;
  if (!this->_internal_ret_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ret_msg().data(), static_cast<int>(this->_internal_ret_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Rtn.ret_msg");
    target = stream->WriteStringMaybeAliased(
        50, this->_internal_ret_msg(), target);
  }

  // string action_flag = 51;
  if (!this->_internal_action_flag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action_flag().data(), static_cast<int>(this->_internal_action_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Rtn.action_flag");
    target = stream->WriteStringMaybeAliased(
        51, this->_internal_action_flag(), target);
  }

  // string order_source = 52;
  if (!this->_internal_order_source().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_source().data(), static_cast<int>(this->_internal_order_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_BilateralOrder_Rtn.order_source");
    target = stream->WriteStringMaybeAliased(
        52, this->_internal_order_source(), target);
  }

  // uint32 sequence_no = 53;
  if (this->_internal_sequence_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(53, this->_internal_sequence_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ficc_message.ficc_BilateralOrder_Rtn)
  return target;
}

size_t ficc_BilateralOrder_Rtn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ficc_message.ficc_BilateralOrder_Rtn)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trade_acct = 2;
  if (!this->_internal_trade_acct().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trade_acct());
  }

  // string fund_acct = 3;
  if (!this->_internal_fund_acct().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fund_acct());
  }

  // string combino = 4;
  if (!this->_internal_combino().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_combino());
  }

  // string ex_code = 6;
  if (!this->_internal_ex_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ex_code());
  }

  // string commodity_type = 7;
  if (!this->_internal_commodity_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_commodity_type());
  }

  // string secu_code = 8;
  if (!this->_internal_secu_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secu_code());
  }

  // string secu_name = 9;
  if (!this->_internal_secu_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secu_name());
  }

  // string order_price_type = 10;
  if (!this->_internal_order_price_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_price_type());
  }

  // string offset_flag = 11;
  if (!this->_internal_offset_flag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_offset_flag());
  }

  // string hedge_flag = 12;
  if (!this->_internal_hedge_flag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hedge_flag());
  }

  // string bilateral_id = 13;
  if (!this->_internal_bilateral_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bilateral_id());
  }

  // string time_cond = 18;
  if (!this->_internal_time_cond().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time_cond());
  }

  // string text = 20;
  if (!this->_internal_text().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string order_sys_id = 21;
  if (!this->_internal_order_sys_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_sys_id());
  }

  // string trade_date = 22;
  if (!this->_internal_trade_date().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trade_date());
  }

  // string insert_time = 23;
  if (!this->_internal_insert_time().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_insert_time());
  }

  // string valid_until_time = 36;
  if (!this->_internal_valid_until_time().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_valid_until_time());
  }

  // string client_ref_id = 37;
  if (!this->_internal_client_ref_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_ref_id());
  }

  // string trading_day = 40;
  if (!this->_internal_trading_day().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trading_day());
  }

  // string order_submit_status = 45;
  if (!this->_internal_order_submit_status().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_submit_status());
  }

  // string order_status = 46;
  if (!this->_internal_order_status().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_status());
  }

  // string update_time = 47;
  if (!this->_internal_update_time().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_update_time());
  }

  // string cancel_time = 48;
  if (!this->_internal_cancel_time().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cancel_time());
  }

  // string ret_msg = 50;
  if (!this->_internal_ret_msg().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ret_msg());
  }

  // string action_flag = 51;
  if (!this->_internal_action_flag().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action_flag());
  }

  // string order_source = 52;
  if (!this->_internal_order_source().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_source());
  }

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  // uint32 user_id = 5;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // float bid_price = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_price = this->_internal_bid_price();
  uint32_t raw_bid_price;
  memcpy(&raw_bid_price, &tmp_bid_price, sizeof(tmp_bid_price));
  if (raw_bid_price != 0) {
    total_size += 1 + 4;
  }

  // uint64 bid_vol = 15;
  if (this->_internal_bid_vol() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bid_vol());
  }

  // uint64 ask_vol = 17;
  if (this->_internal_ask_vol() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_ask_vol());
  }

  // uint64 strategy_code = 19;
  if (this->_internal_strategy_code() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_strategy_code());
  }

  // float ask_price = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_price = this->_internal_ask_price();
  uint32_t raw_ask_price;
  memcpy(&raw_ask_price, &tmp_ask_price, sizeof(tmp_ask_price));
  if (raw_ask_price != 0) {
    total_size += 2 + 4;
  }

  // float bid_ytm = 24;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_ytm = this->_internal_bid_ytm();
  uint32_t raw_bid_ytm;
  memcpy(&raw_bid_ytm, &tmp_bid_ytm, sizeof(tmp_bid_ytm));
  if (raw_bid_ytm != 0) {
    total_size += 2 + 4;
  }

  // uint64 bid_legsettl_type = 26;
  if (this->_internal_bid_legsettl_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_bid_legsettl_type());
  }

  // uint64 bid_delivery_type = 27;
  if (this->_internal_bid_delivery_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_bid_delivery_type());
  }

  // float bid_strike_yeild = 25;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_strike_yeild = this->_internal_bid_strike_yeild();
  uint32_t raw_bid_strike_yeild;
  memcpy(&raw_bid_strike_yeild, &tmp_bid_strike_yeild, sizeof(tmp_bid_strike_yeild));
  if (raw_bid_strike_yeild != 0) {
    total_size += 2 + 4;
  }

  // float ask_ytm = 29;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_ytm = this->_internal_ask_ytm();
  uint32_t raw_ask_ytm;
  memcpy(&raw_ask_ytm, &tmp_ask_ytm, sizeof(tmp_ask_ytm));
  if (raw_ask_ytm != 0) {
    total_size += 2 + 4;
  }

  // uint64 bid_clearing_method = 28;
  if (this->_internal_bid_clearing_method() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_bid_clearing_method());
  }

  // uint64 ask_legsettl_type = 31;
  if (this->_internal_ask_legsettl_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_ask_legsettl_type());
  }

  // uint64 ask_delivery_type = 32;
  if (this->_internal_ask_delivery_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_ask_delivery_type());
  }

  // uint64 ask_clearing_method = 33;
  if (this->_internal_ask_clearing_method() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_ask_clearing_method());
  }

  // uint64 quote_type = 34;
  if (this->_internal_quote_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_quote_type());
  }

  // uint64 max_floor = 35;
  if (this->_internal_max_floor() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_max_floor());
  }

  // uint64 routing_type = 38;
  if (this->_internal_routing_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_routing_type());
  }

  // uint64 market_indicator = 39;
  if (this->_internal_market_indicator() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_market_indicator());
  }

  // uint64 ask_vol_traded = 41;
  if (this->_internal_ask_vol_traded() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_ask_vol_traded());
  }

  // float ask_strike_yeild = 30;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_strike_yeild = this->_internal_ask_strike_yeild();
  uint32_t raw_ask_strike_yeild;
  memcpy(&raw_ask_strike_yeild, &tmp_ask_strike_yeild, sizeof(tmp_ask_strike_yeild));
  if (raw_ask_strike_yeild != 0) {
    total_size += 2 + 4;
  }

  // uint32 sequence_no = 53;
  if (this->_internal_sequence_no() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_sequence_no());
  }

  // uint64 ask_vol_total = 42;
  if (this->_internal_ask_vol_total() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_ask_vol_total());
  }

  // uint64 bid_vol_traded = 43;
  if (this->_internal_bid_vol_traded() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_bid_vol_traded());
  }

  // uint64 bid_vol_total = 44;
  if (this->_internal_bid_vol_total() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_bid_vol_total());
  }

  // uint64 ret_code = 49;
  if (this->_internal_ret_code() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_ret_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ficc_BilateralOrder_Rtn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ficc_BilateralOrder_Rtn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ficc_BilateralOrder_Rtn::GetClassData() const { return &_class_data_; }

void ficc_BilateralOrder_Rtn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ficc_BilateralOrder_Rtn *>(to)->MergeFrom(
      static_cast<const ficc_BilateralOrder_Rtn &>(from));
}


void ficc_BilateralOrder_Rtn::MergeFrom(const ficc_BilateralOrder_Rtn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ficc_message.ficc_BilateralOrder_Rtn)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_trade_acct().empty()) {
    _internal_set_trade_acct(from._internal_trade_acct());
  }
  if (!from._internal_fund_acct().empty()) {
    _internal_set_fund_acct(from._internal_fund_acct());
  }
  if (!from._internal_combino().empty()) {
    _internal_set_combino(from._internal_combino());
  }
  if (!from._internal_ex_code().empty()) {
    _internal_set_ex_code(from._internal_ex_code());
  }
  if (!from._internal_commodity_type().empty()) {
    _internal_set_commodity_type(from._internal_commodity_type());
  }
  if (!from._internal_secu_code().empty()) {
    _internal_set_secu_code(from._internal_secu_code());
  }
  if (!from._internal_secu_name().empty()) {
    _internal_set_secu_name(from._internal_secu_name());
  }
  if (!from._internal_order_price_type().empty()) {
    _internal_set_order_price_type(from._internal_order_price_type());
  }
  if (!from._internal_offset_flag().empty()) {
    _internal_set_offset_flag(from._internal_offset_flag());
  }
  if (!from._internal_hedge_flag().empty()) {
    _internal_set_hedge_flag(from._internal_hedge_flag());
  }
  if (!from._internal_bilateral_id().empty()) {
    _internal_set_bilateral_id(from._internal_bilateral_id());
  }
  if (!from._internal_time_cond().empty()) {
    _internal_set_time_cond(from._internal_time_cond());
  }
  if (!from._internal_text().empty()) {
    _internal_set_text(from._internal_text());
  }
  if (!from._internal_order_sys_id().empty()) {
    _internal_set_order_sys_id(from._internal_order_sys_id());
  }
  if (!from._internal_trade_date().empty()) {
    _internal_set_trade_date(from._internal_trade_date());
  }
  if (!from._internal_insert_time().empty()) {
    _internal_set_insert_time(from._internal_insert_time());
  }
  if (!from._internal_valid_until_time().empty()) {
    _internal_set_valid_until_time(from._internal_valid_until_time());
  }
  if (!from._internal_client_ref_id().empty()) {
    _internal_set_client_ref_id(from._internal_client_ref_id());
  }
  if (!from._internal_trading_day().empty()) {
    _internal_set_trading_day(from._internal_trading_day());
  }
  if (!from._internal_order_submit_status().empty()) {
    _internal_set_order_submit_status(from._internal_order_submit_status());
  }
  if (!from._internal_order_status().empty()) {
    _internal_set_order_status(from._internal_order_status());
  }
  if (!from._internal_update_time().empty()) {
    _internal_set_update_time(from._internal_update_time());
  }
  if (!from._internal_cancel_time().empty()) {
    _internal_set_cancel_time(from._internal_cancel_time());
  }
  if (!from._internal_ret_msg().empty()) {
    _internal_set_ret_msg(from._internal_ret_msg());
  }
  if (!from._internal_action_flag().empty()) {
    _internal_set_action_flag(from._internal_action_flag());
  }
  if (!from._internal_order_source().empty()) {
    _internal_set_order_source(from._internal_order_source());
  }
  if (from._internal_has_head()) {
    _internal_mutable_head()->::message_head::head::MergeFrom(from._internal_head());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_price = from._internal_bid_price();
  uint32_t raw_bid_price;
  memcpy(&raw_bid_price, &tmp_bid_price, sizeof(tmp_bid_price));
  if (raw_bid_price != 0) {
    _internal_set_bid_price(from._internal_bid_price());
  }
  if (from._internal_bid_vol() != 0) {
    _internal_set_bid_vol(from._internal_bid_vol());
  }
  if (from._internal_ask_vol() != 0) {
    _internal_set_ask_vol(from._internal_ask_vol());
  }
  if (from._internal_strategy_code() != 0) {
    _internal_set_strategy_code(from._internal_strategy_code());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_price = from._internal_ask_price();
  uint32_t raw_ask_price;
  memcpy(&raw_ask_price, &tmp_ask_price, sizeof(tmp_ask_price));
  if (raw_ask_price != 0) {
    _internal_set_ask_price(from._internal_ask_price());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_ytm = from._internal_bid_ytm();
  uint32_t raw_bid_ytm;
  memcpy(&raw_bid_ytm, &tmp_bid_ytm, sizeof(tmp_bid_ytm));
  if (raw_bid_ytm != 0) {
    _internal_set_bid_ytm(from._internal_bid_ytm());
  }
  if (from._internal_bid_legsettl_type() != 0) {
    _internal_set_bid_legsettl_type(from._internal_bid_legsettl_type());
  }
  if (from._internal_bid_delivery_type() != 0) {
    _internal_set_bid_delivery_type(from._internal_bid_delivery_type());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_strike_yeild = from._internal_bid_strike_yeild();
  uint32_t raw_bid_strike_yeild;
  memcpy(&raw_bid_strike_yeild, &tmp_bid_strike_yeild, sizeof(tmp_bid_strike_yeild));
  if (raw_bid_strike_yeild != 0) {
    _internal_set_bid_strike_yeild(from._internal_bid_strike_yeild());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_ytm = from._internal_ask_ytm();
  uint32_t raw_ask_ytm;
  memcpy(&raw_ask_ytm, &tmp_ask_ytm, sizeof(tmp_ask_ytm));
  if (raw_ask_ytm != 0) {
    _internal_set_ask_ytm(from._internal_ask_ytm());
  }
  if (from._internal_bid_clearing_method() != 0) {
    _internal_set_bid_clearing_method(from._internal_bid_clearing_method());
  }
  if (from._internal_ask_legsettl_type() != 0) {
    _internal_set_ask_legsettl_type(from._internal_ask_legsettl_type());
  }
  if (from._internal_ask_delivery_type() != 0) {
    _internal_set_ask_delivery_type(from._internal_ask_delivery_type());
  }
  if (from._internal_ask_clearing_method() != 0) {
    _internal_set_ask_clearing_method(from._internal_ask_clearing_method());
  }
  if (from._internal_quote_type() != 0) {
    _internal_set_quote_type(from._internal_quote_type());
  }
  if (from._internal_max_floor() != 0) {
    _internal_set_max_floor(from._internal_max_floor());
  }
  if (from._internal_routing_type() != 0) {
    _internal_set_routing_type(from._internal_routing_type());
  }
  if (from._internal_market_indicator() != 0) {
    _internal_set_market_indicator(from._internal_market_indicator());
  }
  if (from._internal_ask_vol_traded() != 0) {
    _internal_set_ask_vol_traded(from._internal_ask_vol_traded());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_strike_yeild = from._internal_ask_strike_yeild();
  uint32_t raw_ask_strike_yeild;
  memcpy(&raw_ask_strike_yeild, &tmp_ask_strike_yeild, sizeof(tmp_ask_strike_yeild));
  if (raw_ask_strike_yeild != 0) {
    _internal_set_ask_strike_yeild(from._internal_ask_strike_yeild());
  }
  if (from._internal_sequence_no() != 0) {
    _internal_set_sequence_no(from._internal_sequence_no());
  }
  if (from._internal_ask_vol_total() != 0) {
    _internal_set_ask_vol_total(from._internal_ask_vol_total());
  }
  if (from._internal_bid_vol_traded() != 0) {
    _internal_set_bid_vol_traded(from._internal_bid_vol_traded());
  }
  if (from._internal_bid_vol_total() != 0) {
    _internal_set_bid_vol_total(from._internal_bid_vol_total());
  }
  if (from._internal_ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ficc_BilateralOrder_Rtn::CopyFrom(const ficc_BilateralOrder_Rtn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ficc_message.ficc_BilateralOrder_Rtn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ficc_BilateralOrder_Rtn::IsInitialized() const {
  return true;
}

void ficc_BilateralOrder_Rtn::InternalSwap(ficc_BilateralOrder_Rtn* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trade_acct_, lhs_arena,
      &other->trade_acct_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &fund_acct_, lhs_arena,
      &other->fund_acct_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &combino_, lhs_arena,
      &other->combino_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ex_code_, lhs_arena,
      &other->ex_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &commodity_type_, lhs_arena,
      &other->commodity_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &secu_code_, lhs_arena,
      &other->secu_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &secu_name_, lhs_arena,
      &other->secu_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_price_type_, lhs_arena,
      &other->order_price_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &offset_flag_, lhs_arena,
      &other->offset_flag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &hedge_flag_, lhs_arena,
      &other->hedge_flag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &bilateral_id_, lhs_arena,
      &other->bilateral_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &time_cond_, lhs_arena,
      &other->time_cond_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_sys_id_, lhs_arena,
      &other->order_sys_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trade_date_, lhs_arena,
      &other->trade_date_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &insert_time_, lhs_arena,
      &other->insert_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &valid_until_time_, lhs_arena,
      &other->valid_until_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &client_ref_id_, lhs_arena,
      &other->client_ref_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trading_day_, lhs_arena,
      &other->trading_day_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_submit_status_, lhs_arena,
      &other->order_submit_status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_status_, lhs_arena,
      &other->order_status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &update_time_, lhs_arena,
      &other->update_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &cancel_time_, lhs_arena,
      &other->cancel_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ret_msg_, lhs_arena,
      &other->ret_msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &action_flag_, lhs_arena,
      &other->action_flag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_source_, lhs_arena,
      &other->order_source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ficc_BilateralOrder_Rtn, ret_code_)
      + sizeof(ficc_BilateralOrder_Rtn::ret_code_)
      - PROTOBUF_FIELD_OFFSET(ficc_BilateralOrder_Rtn, head_)>(
          reinterpret_cast<char*>(&head_),
          reinterpret_cast<char*>(&other->head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ficc_BilateralOrder_Rtn::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ficc_2eproto_getter, &descriptor_table_ficc_2eproto_once,
      file_level_metadata_ficc_2eproto[4]);
}

// ===================================================================

class ficc_SystemMonitor::_Internal {
 public:
  static const ::message_head::head& head(const ficc_SystemMonitor* msg);
};

const ::message_head::head&
ficc_SystemMonitor::_Internal::head(const ficc_SystemMonitor* msg) {
  return *msg->head_;
}
void ficc_SystemMonitor::clear_head() {
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
}
ficc_SystemMonitor::ficc_SystemMonitor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ficc_message.ficc_SystemMonitor)
}
ficc_SystemMonitor::ficc_SystemMonitor(const ficc_SystemMonitor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(from._internal_msg(), 
      GetArenaForAllocation());
  }
  send_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    send_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_send_time().empty()) {
    send_time_.Set(from._internal_send_time(), 
      GetArenaForAllocation());
  }
  tkernel_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tkernel_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tkernel_ip().empty()) {
    tkernel_ip_.Set(from._internal_tkernel_ip(), 
      GetArenaForAllocation());
  }
  trade_day_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trade_day_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trade_day().empty()) {
    trade_day_.Set(from._internal_trade_day(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_head()) {
    head_ = new ::message_head::head(*from.head_);
  } else {
    head_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ficc_message.ficc_SystemMonitor)
}

inline void ficc_SystemMonitor::SharedCtor() {
msg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
send_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  send_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
tkernel_ip_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tkernel_ip_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
trade_day_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trade_day_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&head_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&head_)) + sizeof(status_));
}

ficc_SystemMonitor::~ficc_SystemMonitor() {
  // @@protoc_insertion_point(destructor:ficc_message.ficc_SystemMonitor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ficc_SystemMonitor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.Destroy();
  send_time_.Destroy();
  tkernel_ip_.Destroy();
  trade_day_.Destroy();
  if (this != internal_default_instance()) delete head_;
}

void ficc_SystemMonitor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ficc_SystemMonitor::Clear() {
// @@protoc_insertion_point(message_clear_start:ficc_message.ficc_SystemMonitor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  send_time_.ClearToEmpty();
  tkernel_ip_.ClearToEmpty();
  trade_day_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  status_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ficc_SystemMonitor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message_head.head head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_SystemMonitor.msg"));
        } else
          goto handle_unusual;
        continue;
      // string send_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_send_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_SystemMonitor.send_time"));
        } else
          goto handle_unusual;
        continue;
      // string tkernel_ip = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_tkernel_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_SystemMonitor.tkernel_ip"));
        } else
          goto handle_unusual;
        continue;
      // string trade_day = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_trade_day();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_SystemMonitor.trade_day"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ficc_SystemMonitor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ficc_message.ficc_SystemMonitor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // uint32 status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_status(), target);
  }

  // string msg = 3;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_SystemMonitor.msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  // string send_time = 4;
  if (!this->_internal_send_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_send_time().data(), static_cast<int>(this->_internal_send_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_SystemMonitor.send_time");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_send_time(), target);
  }

  // string tkernel_ip = 5;
  if (!this->_internal_tkernel_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tkernel_ip().data(), static_cast<int>(this->_internal_tkernel_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_SystemMonitor.tkernel_ip");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_tkernel_ip(), target);
  }

  // string trade_day = 6;
  if (!this->_internal_trade_day().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trade_day().data(), static_cast<int>(this->_internal_trade_day().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_SystemMonitor.trade_day");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_trade_day(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ficc_message.ficc_SystemMonitor)
  return target;
}

size_t ficc_SystemMonitor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ficc_message.ficc_SystemMonitor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 3;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string send_time = 4;
  if (!this->_internal_send_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_send_time());
  }

  // string tkernel_ip = 5;
  if (!this->_internal_tkernel_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tkernel_ip());
  }

  // string trade_day = 6;
  if (!this->_internal_trade_day().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trade_day());
  }

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  // uint32 status = 2;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ficc_SystemMonitor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ficc_SystemMonitor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ficc_SystemMonitor::GetClassData() const { return &_class_data_; }

void ficc_SystemMonitor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ficc_SystemMonitor *>(to)->MergeFrom(
      static_cast<const ficc_SystemMonitor &>(from));
}


void ficc_SystemMonitor::MergeFrom(const ficc_SystemMonitor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ficc_message.ficc_SystemMonitor)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (!from._internal_send_time().empty()) {
    _internal_set_send_time(from._internal_send_time());
  }
  if (!from._internal_tkernel_ip().empty()) {
    _internal_set_tkernel_ip(from._internal_tkernel_ip());
  }
  if (!from._internal_trade_day().empty()) {
    _internal_set_trade_day(from._internal_trade_day());
  }
  if (from._internal_has_head()) {
    _internal_mutable_head()->::message_head::head::MergeFrom(from._internal_head());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ficc_SystemMonitor::CopyFrom(const ficc_SystemMonitor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ficc_message.ficc_SystemMonitor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ficc_SystemMonitor::IsInitialized() const {
  return true;
}

void ficc_SystemMonitor::InternalSwap(ficc_SystemMonitor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &send_time_, lhs_arena,
      &other->send_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &tkernel_ip_, lhs_arena,
      &other->tkernel_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trade_day_, lhs_arena,
      &other->trade_day_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ficc_SystemMonitor, status_)
      + sizeof(ficc_SystemMonitor::status_)
      - PROTOBUF_FIELD_OFFSET(ficc_SystemMonitor, head_)>(
          reinterpret_cast<char*>(&head_),
          reinterpret_cast<char*>(&other->head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ficc_SystemMonitor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ficc_2eproto_getter, &descriptor_table_ficc_2eproto_once,
      file_level_metadata_ficc_2eproto[5]);
}

// ===================================================================

class ficc_OrderAction_Req::_Internal {
 public:
  static const ::message_head::head& head(const ficc_OrderAction_Req* msg);
};

const ::message_head::head&
ficc_OrderAction_Req::_Internal::head(const ficc_OrderAction_Req* msg) {
  return *msg->head_;
}
void ficc_OrderAction_Req::clear_head() {
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
}
ficc_OrderAction_Req::ficc_OrderAction_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ficc_message.ficc_OrderAction_Req)
}
ficc_OrderAction_Req::ficc_OrderAction_Req(const ficc_OrderAction_Req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  order_inner_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_inner_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_inner_id().empty()) {
    order_inner_id_.Set(from._internal_order_inner_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_head()) {
    head_ = new ::message_head::head(*from.head_);
  } else {
    head_ = nullptr;
  }
  ::memcpy(&quote_type_, &from.quote_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&quote_type_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:ficc_message.ficc_OrderAction_Req)
}

inline void ficc_OrderAction_Req::SharedCtor() {
order_inner_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_inner_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&head_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&head_)) + sizeof(user_id_));
}

ficc_OrderAction_Req::~ficc_OrderAction_Req() {
  // @@protoc_insertion_point(destructor:ficc_message.ficc_OrderAction_Req)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ficc_OrderAction_Req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  order_inner_id_.Destroy();
  if (this != internal_default_instance()) delete head_;
}

void ficc_OrderAction_Req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ficc_OrderAction_Req::Clear() {
// @@protoc_insertion_point(message_clear_start:ficc_message.ficc_OrderAction_Req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_inner_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  ::memset(&quote_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&quote_type_)) + sizeof(user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ficc_OrderAction_Req::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message_head.head head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string order_inner_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_order_inner_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_OrderAction_Req.order_inner_id"));
        } else
          goto handle_unusual;
        continue;
      // uint64 quote_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          quote_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ficc_OrderAction_Req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ficc_message.ficc_OrderAction_Req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // string order_inner_id = 2;
  if (!this->_internal_order_inner_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_inner_id().data(), static_cast<int>(this->_internal_order_inner_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_OrderAction_Req.order_inner_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_order_inner_id(), target);
  }

  // uint64 quote_type = 3;
  if (this->_internal_quote_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_quote_type(), target);
  }

  // uint32 user_id = 4;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ficc_message.ficc_OrderAction_Req)
  return target;
}

size_t ficc_OrderAction_Req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ficc_message.ficc_OrderAction_Req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string order_inner_id = 2;
  if (!this->_internal_order_inner_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_inner_id());
  }

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  // uint64 quote_type = 3;
  if (this->_internal_quote_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_quote_type());
  }

  // uint32 user_id = 4;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ficc_OrderAction_Req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ficc_OrderAction_Req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ficc_OrderAction_Req::GetClassData() const { return &_class_data_; }

void ficc_OrderAction_Req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ficc_OrderAction_Req *>(to)->MergeFrom(
      static_cast<const ficc_OrderAction_Req &>(from));
}


void ficc_OrderAction_Req::MergeFrom(const ficc_OrderAction_Req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ficc_message.ficc_OrderAction_Req)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_order_inner_id().empty()) {
    _internal_set_order_inner_id(from._internal_order_inner_id());
  }
  if (from._internal_has_head()) {
    _internal_mutable_head()->::message_head::head::MergeFrom(from._internal_head());
  }
  if (from._internal_quote_type() != 0) {
    _internal_set_quote_type(from._internal_quote_type());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ficc_OrderAction_Req::CopyFrom(const ficc_OrderAction_Req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ficc_message.ficc_OrderAction_Req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ficc_OrderAction_Req::IsInitialized() const {
  return true;
}

void ficc_OrderAction_Req::InternalSwap(ficc_OrderAction_Req* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_inner_id_, lhs_arena,
      &other->order_inner_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ficc_OrderAction_Req, user_id_)
      + sizeof(ficc_OrderAction_Req::user_id_)
      - PROTOBUF_FIELD_OFFSET(ficc_OrderAction_Req, head_)>(
          reinterpret_cast<char*>(&head_),
          reinterpret_cast<char*>(&other->head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ficc_OrderAction_Req::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ficc_2eproto_getter, &descriptor_table_ficc_2eproto_once,
      file_level_metadata_ficc_2eproto[6]);
}

// ===================================================================

class ficc_OrderAction_Rsp::_Internal {
 public:
  static const ::message_head::head& head(const ficc_OrderAction_Rsp* msg);
};

const ::message_head::head&
ficc_OrderAction_Rsp::_Internal::head(const ficc_OrderAction_Rsp* msg) {
  return *msg->head_;
}
void ficc_OrderAction_Rsp::clear_head() {
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
}
ficc_OrderAction_Rsp::ficc_OrderAction_Rsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ficc_message.ficc_OrderAction_Rsp)
}
ficc_OrderAction_Rsp::ficc_OrderAction_Rsp(const ficc_OrderAction_Rsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  order_inner_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_inner_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_inner_id().empty()) {
    order_inner_id_.Set(from._internal_order_inner_id(), 
      GetArenaForAllocation());
  }
  secu_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secu_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secu_code().empty()) {
    secu_code_.Set(from._internal_secu_code(), 
      GetArenaForAllocation());
  }
  send_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    send_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_send_time().empty()) {
    send_time_.Set(from._internal_send_time(), 
      GetArenaForAllocation());
  }
  order_status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_status().empty()) {
    order_status_.Set(from._internal_order_status(), 
      GetArenaForAllocation());
  }
  err_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    err_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_err_msg().empty()) {
    err_msg_.Set(from._internal_err_msg(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_head()) {
    head_ = new ::message_head::head(*from.head_);
  } else {
    head_ = nullptr;
  }
  err_id_ = from.err_id_;
  // @@protoc_insertion_point(copy_constructor:ficc_message.ficc_OrderAction_Rsp)
}

inline void ficc_OrderAction_Rsp::SharedCtor() {
order_inner_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_inner_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secu_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secu_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
send_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  send_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
order_status_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_status_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
err_msg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  err_msg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&head_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_id_) -
    reinterpret_cast<char*>(&head_)) + sizeof(err_id_));
}

ficc_OrderAction_Rsp::~ficc_OrderAction_Rsp() {
  // @@protoc_insertion_point(destructor:ficc_message.ficc_OrderAction_Rsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ficc_OrderAction_Rsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  order_inner_id_.Destroy();
  secu_code_.Destroy();
  send_time_.Destroy();
  order_status_.Destroy();
  err_msg_.Destroy();
  if (this != internal_default_instance()) delete head_;
}

void ficc_OrderAction_Rsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ficc_OrderAction_Rsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ficc_message.ficc_OrderAction_Rsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_inner_id_.ClearToEmpty();
  secu_code_.ClearToEmpty();
  send_time_.ClearToEmpty();
  order_status_.ClearToEmpty();
  err_msg_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  err_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ficc_OrderAction_Rsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message_head.head head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string order_inner_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_order_inner_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_OrderAction_Rsp.order_inner_id"));
        } else
          goto handle_unusual;
        continue;
      // string secu_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_secu_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_OrderAction_Rsp.secu_code"));
        } else
          goto handle_unusual;
        continue;
      // string send_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_send_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_OrderAction_Rsp.send_time"));
        } else
          goto handle_unusual;
        continue;
      // string order_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_order_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_OrderAction_Rsp.order_status"));
        } else
          goto handle_unusual;
        continue;
      // uint32 err_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          err_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string err_msg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_err_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_OrderAction_Rsp.err_msg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ficc_OrderAction_Rsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ficc_message.ficc_OrderAction_Rsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // string order_inner_id = 2;
  if (!this->_internal_order_inner_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_inner_id().data(), static_cast<int>(this->_internal_order_inner_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_OrderAction_Rsp.order_inner_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_order_inner_id(), target);
  }

  // string secu_code = 3;
  if (!this->_internal_secu_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secu_code().data(), static_cast<int>(this->_internal_secu_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_OrderAction_Rsp.secu_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_secu_code(), target);
  }

  // string send_time = 4;
  if (!this->_internal_send_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_send_time().data(), static_cast<int>(this->_internal_send_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_OrderAction_Rsp.send_time");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_send_time(), target);
  }

  // string order_status = 5;
  if (!this->_internal_order_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_status().data(), static_cast<int>(this->_internal_order_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_OrderAction_Rsp.order_status");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_order_status(), target);
  }

  // uint32 err_id = 6;
  if (this->_internal_err_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_err_id(), target);
  }

  // string err_msg = 7;
  if (!this->_internal_err_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err_msg().data(), static_cast<int>(this->_internal_err_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_OrderAction_Rsp.err_msg");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_err_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ficc_message.ficc_OrderAction_Rsp)
  return target;
}

size_t ficc_OrderAction_Rsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ficc_message.ficc_OrderAction_Rsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string order_inner_id = 2;
  if (!this->_internal_order_inner_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_inner_id());
  }

  // string secu_code = 3;
  if (!this->_internal_secu_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secu_code());
  }

  // string send_time = 4;
  if (!this->_internal_send_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_send_time());
  }

  // string order_status = 5;
  if (!this->_internal_order_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_status());
  }

  // string err_msg = 7;
  if (!this->_internal_err_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_msg());
  }

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  // uint32 err_id = 6;
  if (this->_internal_err_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_err_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ficc_OrderAction_Rsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ficc_OrderAction_Rsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ficc_OrderAction_Rsp::GetClassData() const { return &_class_data_; }

void ficc_OrderAction_Rsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ficc_OrderAction_Rsp *>(to)->MergeFrom(
      static_cast<const ficc_OrderAction_Rsp &>(from));
}


void ficc_OrderAction_Rsp::MergeFrom(const ficc_OrderAction_Rsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ficc_message.ficc_OrderAction_Rsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_order_inner_id().empty()) {
    _internal_set_order_inner_id(from._internal_order_inner_id());
  }
  if (!from._internal_secu_code().empty()) {
    _internal_set_secu_code(from._internal_secu_code());
  }
  if (!from._internal_send_time().empty()) {
    _internal_set_send_time(from._internal_send_time());
  }
  if (!from._internal_order_status().empty()) {
    _internal_set_order_status(from._internal_order_status());
  }
  if (!from._internal_err_msg().empty()) {
    _internal_set_err_msg(from._internal_err_msg());
  }
  if (from._internal_has_head()) {
    _internal_mutable_head()->::message_head::head::MergeFrom(from._internal_head());
  }
  if (from._internal_err_id() != 0) {
    _internal_set_err_id(from._internal_err_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ficc_OrderAction_Rsp::CopyFrom(const ficc_OrderAction_Rsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ficc_message.ficc_OrderAction_Rsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ficc_OrderAction_Rsp::IsInitialized() const {
  return true;
}

void ficc_OrderAction_Rsp::InternalSwap(ficc_OrderAction_Rsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_inner_id_, lhs_arena,
      &other->order_inner_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &secu_code_, lhs_arena,
      &other->secu_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &send_time_, lhs_arena,
      &other->send_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_status_, lhs_arena,
      &other->order_status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &err_msg_, lhs_arena,
      &other->err_msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ficc_OrderAction_Rsp, err_id_)
      + sizeof(ficc_OrderAction_Rsp::err_id_)
      - PROTOBUF_FIELD_OFFSET(ficc_OrderAction_Rsp, head_)>(
          reinterpret_cast<char*>(&head_),
          reinterpret_cast<char*>(&other->head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ficc_OrderAction_Rsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ficc_2eproto_getter, &descriptor_table_ficc_2eproto_once,
      file_level_metadata_ficc_2eproto[7]);
}

// ===================================================================

class ficc_QryBilateralOrder_Req::_Internal {
 public:
  static const ::message_head::head& head(const ficc_QryBilateralOrder_Req* msg);
};

const ::message_head::head&
ficc_QryBilateralOrder_Req::_Internal::head(const ficc_QryBilateralOrder_Req* msg) {
  return *msg->head_;
}
void ficc_QryBilateralOrder_Req::clear_head() {
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
}
ficc_QryBilateralOrder_Req::ficc_QryBilateralOrder_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ficc_message.ficc_QryBilateralOrder_Req)
}
ficc_QryBilateralOrder_Req::ficc_QryBilateralOrder_Req(const ficc_QryBilateralOrder_Req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_head()) {
    head_ = new ::message_head::head(*from.head_);
  } else {
    head_ = nullptr;
  }
  sequence_no_ = from.sequence_no_;
  // @@protoc_insertion_point(copy_constructor:ficc_message.ficc_QryBilateralOrder_Req)
}

inline void ficc_QryBilateralOrder_Req::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&head_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sequence_no_) -
    reinterpret_cast<char*>(&head_)) + sizeof(sequence_no_));
}

ficc_QryBilateralOrder_Req::~ficc_QryBilateralOrder_Req() {
  // @@protoc_insertion_point(destructor:ficc_message.ficc_QryBilateralOrder_Req)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ficc_QryBilateralOrder_Req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete head_;
}

void ficc_QryBilateralOrder_Req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ficc_QryBilateralOrder_Req::Clear() {
// @@protoc_insertion_point(message_clear_start:ficc_message.ficc_QryBilateralOrder_Req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  sequence_no_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ficc_QryBilateralOrder_Req::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message_head.head head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sequence_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          sequence_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ficc_QryBilateralOrder_Req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ficc_message.ficc_QryBilateralOrder_Req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // uint32 sequence_no = 2;
  if (this->_internal_sequence_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sequence_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ficc_message.ficc_QryBilateralOrder_Req)
  return target;
}

size_t ficc_QryBilateralOrder_Req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ficc_message.ficc_QryBilateralOrder_Req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  // uint32 sequence_no = 2;
  if (this->_internal_sequence_no() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sequence_no());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ficc_QryBilateralOrder_Req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ficc_QryBilateralOrder_Req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ficc_QryBilateralOrder_Req::GetClassData() const { return &_class_data_; }

void ficc_QryBilateralOrder_Req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ficc_QryBilateralOrder_Req *>(to)->MergeFrom(
      static_cast<const ficc_QryBilateralOrder_Req &>(from));
}


void ficc_QryBilateralOrder_Req::MergeFrom(const ficc_QryBilateralOrder_Req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ficc_message.ficc_QryBilateralOrder_Req)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_head()) {
    _internal_mutable_head()->::message_head::head::MergeFrom(from._internal_head());
  }
  if (from._internal_sequence_no() != 0) {
    _internal_set_sequence_no(from._internal_sequence_no());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ficc_QryBilateralOrder_Req::CopyFrom(const ficc_QryBilateralOrder_Req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ficc_message.ficc_QryBilateralOrder_Req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ficc_QryBilateralOrder_Req::IsInitialized() const {
  return true;
}

void ficc_QryBilateralOrder_Req::InternalSwap(ficc_QryBilateralOrder_Req* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ficc_QryBilateralOrder_Req, sequence_no_)
      + sizeof(ficc_QryBilateralOrder_Req::sequence_no_)
      - PROTOBUF_FIELD_OFFSET(ficc_QryBilateralOrder_Req, head_)>(
          reinterpret_cast<char*>(&head_),
          reinterpret_cast<char*>(&other->head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ficc_QryBilateralOrder_Req::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ficc_2eproto_getter, &descriptor_table_ficc_2eproto_once,
      file_level_metadata_ficc_2eproto[8]);
}

// ===================================================================

class ficc_QryMatch_Req::_Internal {
 public:
  static const ::message_head::head& head(const ficc_QryMatch_Req* msg);
};

const ::message_head::head&
ficc_QryMatch_Req::_Internal::head(const ficc_QryMatch_Req* msg) {
  return *msg->head_;
}
void ficc_QryMatch_Req::clear_head() {
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
}
ficc_QryMatch_Req::ficc_QryMatch_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ficc_message.ficc_QryMatch_Req)
}
ficc_QryMatch_Req::ficc_QryMatch_Req(const ficc_QryMatch_Req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_head()) {
    head_ = new ::message_head::head(*from.head_);
  } else {
    head_ = nullptr;
  }
  sequence_no_ = from.sequence_no_;
  // @@protoc_insertion_point(copy_constructor:ficc_message.ficc_QryMatch_Req)
}

inline void ficc_QryMatch_Req::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&head_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sequence_no_) -
    reinterpret_cast<char*>(&head_)) + sizeof(sequence_no_));
}

ficc_QryMatch_Req::~ficc_QryMatch_Req() {
  // @@protoc_insertion_point(destructor:ficc_message.ficc_QryMatch_Req)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ficc_QryMatch_Req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete head_;
}

void ficc_QryMatch_Req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ficc_QryMatch_Req::Clear() {
// @@protoc_insertion_point(message_clear_start:ficc_message.ficc_QryMatch_Req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  sequence_no_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ficc_QryMatch_Req::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message_head.head head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sequence_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          sequence_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ficc_QryMatch_Req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ficc_message.ficc_QryMatch_Req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // uint32 sequence_no = 2;
  if (this->_internal_sequence_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sequence_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ficc_message.ficc_QryMatch_Req)
  return target;
}

size_t ficc_QryMatch_Req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ficc_message.ficc_QryMatch_Req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  // uint32 sequence_no = 2;
  if (this->_internal_sequence_no() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sequence_no());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ficc_QryMatch_Req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ficc_QryMatch_Req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ficc_QryMatch_Req::GetClassData() const { return &_class_data_; }

void ficc_QryMatch_Req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ficc_QryMatch_Req *>(to)->MergeFrom(
      static_cast<const ficc_QryMatch_Req &>(from));
}


void ficc_QryMatch_Req::MergeFrom(const ficc_QryMatch_Req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ficc_message.ficc_QryMatch_Req)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_head()) {
    _internal_mutable_head()->::message_head::head::MergeFrom(from._internal_head());
  }
  if (from._internal_sequence_no() != 0) {
    _internal_set_sequence_no(from._internal_sequence_no());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ficc_QryMatch_Req::CopyFrom(const ficc_QryMatch_Req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ficc_message.ficc_QryMatch_Req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ficc_QryMatch_Req::IsInitialized() const {
  return true;
}

void ficc_QryMatch_Req::InternalSwap(ficc_QryMatch_Req* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ficc_QryMatch_Req, sequence_no_)
      + sizeof(ficc_QryMatch_Req::sequence_no_)
      - PROTOBUF_FIELD_OFFSET(ficc_QryMatch_Req, head_)>(
          reinterpret_cast<char*>(&head_),
          reinterpret_cast<char*>(&other->head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ficc_QryMatch_Req::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ficc_2eproto_getter, &descriptor_table_ficc_2eproto_once,
      file_level_metadata_ficc_2eproto[9]);
}

// ===================================================================

class ficc_Match_Rtn::_Internal {
 public:
  static const ::message_head::head& head(const ficc_Match_Rtn* msg);
};

const ::message_head::head&
ficc_Match_Rtn::_Internal::head(const ficc_Match_Rtn* msg) {
  return *msg->head_;
}
void ficc_Match_Rtn::clear_head() {
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
}
ficc_Match_Rtn::ficc_Match_Rtn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ficc_message.ficc_Match_Rtn)
}
ficc_Match_Rtn::ficc_Match_Rtn(const ficc_Match_Rtn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  order_inner_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_inner_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_inner_id().empty()) {
    order_inner_id_.Set(from._internal_order_inner_id(), 
      GetArenaForAllocation());
  }
  ex_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ex_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ex_code().empty()) {
    ex_code_.Set(from._internal_ex_code(), 
      GetArenaForAllocation());
  }
  trading_day_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trading_day_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trading_day().empty()) {
    trading_day_.Set(from._internal_trading_day(), 
      GetArenaForAllocation());
  }
  trade_acct_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trade_acct_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trade_acct().empty()) {
    trade_acct_.Set(from._internal_trade_acct(), 
      GetArenaForAllocation());
  }
  fund_acct_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fund_acct_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fund_acct().empty()) {
    fund_acct_.Set(from._internal_fund_acct(), 
      GetArenaForAllocation());
  }
  order_sys_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_sys_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_sys_id().empty()) {
    order_sys_id_.Set(from._internal_order_sys_id(), 
      GetArenaForAllocation());
  }
  trade_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trade_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trade_id().empty()) {
    trade_id_.Set(from._internal_trade_id(), 
      GetArenaForAllocation());
  }
  secu_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secu_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secu_code().empty()) {
    secu_code_.Set(from._internal_secu_code(), 
      GetArenaForAllocation());
  }
  direction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    direction_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_direction().empty()) {
    direction_.Set(from._internal_direction(), 
      GetArenaForAllocation());
  }
  offset_flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    offset_flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_offset_flag().empty()) {
    offset_flag_.Set(from._internal_offset_flag(), 
      GetArenaForAllocation());
  }
  hedge_flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hedge_flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hedge_flag().empty()) {
    hedge_flag_.Set(from._internal_hedge_flag(), 
      GetArenaForAllocation());
  }
  trade_date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trade_date_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trade_date().empty()) {
    trade_date_.Set(from._internal_trade_date(), 
      GetArenaForAllocation());
  }
  trade_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trade_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trade_time().empty()) {
    trade_time_.Set(from._internal_trade_time(), 
      GetArenaForAllocation());
  }
  currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_currency().empty()) {
    currency_.Set(from._internal_currency(), 
      GetArenaForAllocation());
  }
  manual_fee_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    manual_fee_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_manual_fee().empty()) {
    manual_fee_.Set(from._internal_manual_fee(), 
      GetArenaForAllocation());
  }
  deleted_flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    deleted_flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deleted_flag().empty()) {
    deleted_flag_.Set(from._internal_deleted_flag(), 
      GetArenaForAllocation());
  }
  ex_inst_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ex_inst_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ex_inst_id().empty()) {
    ex_inst_id_.Set(from._internal_ex_inst_id(), 
      GetArenaForAllocation());
  }
  broker_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    broker_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_broker_id().empty()) {
    broker_id_.Set(from._internal_broker_id(), 
      GetArenaForAllocation());
  }
  investor_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    investor_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_investor_id().empty()) {
    investor_id_.Set(from._internal_investor_id(), 
      GetArenaForAllocation());
  }
  bilateral_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bilateral_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bilateral_id().empty()) {
    bilateral_id_.Set(from._internal_bilateral_id(), 
      GetArenaForAllocation());
  }
  counter_party_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    counter_party_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_counter_party_id().empty()) {
    counter_party_id_.Set(from._internal_counter_party_id(), 
      GetArenaForAllocation());
  }
  counter_party_trader_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    counter_party_trader_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_counter_party_trader().empty()) {
    counter_party_trader_.Set(from._internal_counter_party_trader(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_head()) {
    head_ = new ::message_head::head(*from.head_);
  } else {
    head_ = nullptr;
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_no_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(sequence_no_));
  // @@protoc_insertion_point(copy_constructor:ficc_message.ficc_Match_Rtn)
}

inline void ficc_Match_Rtn::SharedCtor() {
order_inner_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_inner_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ex_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ex_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
trading_day_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trading_day_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
trade_acct_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trade_acct_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
fund_acct_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fund_acct_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
order_sys_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_sys_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
trade_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trade_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secu_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secu_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
direction_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  direction_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
offset_flag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  offset_flag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
hedge_flag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hedge_flag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
trade_date_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trade_date_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
trade_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trade_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
currency_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  currency_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
manual_fee_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  manual_fee_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
deleted_flag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  deleted_flag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ex_inst_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ex_inst_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
broker_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  broker_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
investor_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  investor_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bilateral_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bilateral_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
counter_party_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  counter_party_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
counter_party_trader_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  counter_party_trader_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&head_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sequence_no_) -
    reinterpret_cast<char*>(&head_)) + sizeof(sequence_no_));
}

ficc_Match_Rtn::~ficc_Match_Rtn() {
  // @@protoc_insertion_point(destructor:ficc_message.ficc_Match_Rtn)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ficc_Match_Rtn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  order_inner_id_.Destroy();
  ex_code_.Destroy();
  trading_day_.Destroy();
  trade_acct_.Destroy();
  fund_acct_.Destroy();
  order_sys_id_.Destroy();
  trade_id_.Destroy();
  secu_code_.Destroy();
  direction_.Destroy();
  offset_flag_.Destroy();
  hedge_flag_.Destroy();
  trade_date_.Destroy();
  trade_time_.Destroy();
  currency_.Destroy();
  manual_fee_.Destroy();
  deleted_flag_.Destroy();
  ex_inst_id_.Destroy();
  broker_id_.Destroy();
  investor_id_.Destroy();
  bilateral_id_.Destroy();
  counter_party_id_.Destroy();
  counter_party_trader_.Destroy();
  if (this != internal_default_instance()) delete head_;
}

void ficc_Match_Rtn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ficc_Match_Rtn::Clear() {
// @@protoc_insertion_point(message_clear_start:ficc_message.ficc_Match_Rtn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_inner_id_.ClearToEmpty();
  ex_code_.ClearToEmpty();
  trading_day_.ClearToEmpty();
  trade_acct_.ClearToEmpty();
  fund_acct_.ClearToEmpty();
  order_sys_id_.ClearToEmpty();
  trade_id_.ClearToEmpty();
  secu_code_.ClearToEmpty();
  direction_.ClearToEmpty();
  offset_flag_.ClearToEmpty();
  hedge_flag_.ClearToEmpty();
  trade_date_.ClearToEmpty();
  trade_time_.ClearToEmpty();
  currency_.ClearToEmpty();
  manual_fee_.ClearToEmpty();
  deleted_flag_.ClearToEmpty();
  ex_inst_id_.ClearToEmpty();
  broker_id_.ClearToEmpty();
  investor_id_.ClearToEmpty();
  bilateral_id_.ClearToEmpty();
  counter_party_id_.ClearToEmpty();
  counter_party_trader_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_no_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(sequence_no_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ficc_Match_Rtn::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message_head.head head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string order_inner_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_order_inner_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Match_Rtn.order_inner_id"));
        } else
          goto handle_unusual;
        continue;
      // string ex_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ex_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Match_Rtn.ex_code"));
        } else
          goto handle_unusual;
        continue;
      // string trading_day = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_trading_day();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Match_Rtn.trading_day"));
        } else
          goto handle_unusual;
        continue;
      // string trade_acct = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_trade_acct();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Match_Rtn.trade_acct"));
        } else
          goto handle_unusual;
        continue;
      // string fund_acct = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_fund_acct();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Match_Rtn.fund_acct"));
        } else
          goto handle_unusual;
        continue;
      // uint32 user_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string order_sys_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_order_sys_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Match_Rtn.order_sys_id"));
        } else
          goto handle_unusual;
        continue;
      // string trade_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_trade_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Match_Rtn.trade_id"));
        } else
          goto handle_unusual;
        continue;
      // string secu_code = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_secu_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Match_Rtn.secu_code"));
        } else
          goto handle_unusual;
        continue;
      // string direction = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_direction();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Match_Rtn.direction"));
        } else
          goto handle_unusual;
        continue;
      // string offset_flag = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_offset_flag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Match_Rtn.offset_flag"));
        } else
          goto handle_unusual;
        continue;
      // string hedge_flag = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_hedge_flag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Match_Rtn.hedge_flag"));
        } else
          goto handle_unusual;
        continue;
      // float order_price = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          order_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float dirty_price = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          dirty_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float trade_price = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          trade_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float ytm = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          ytm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 vol_traded = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          vol_traded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string trade_date = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_trade_date();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Match_Rtn.trade_date"));
        } else
          goto handle_unusual;
        continue;
      // string trade_time = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_trade_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Match_Rtn.trade_time"));
        } else
          goto handle_unusual;
        continue;
      // float trade_fee = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 173)) {
          trade_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string currency = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Match_Rtn.currency"));
        } else
          goto handle_unusual;
        continue;
      // string manual_fee = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_manual_fee();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Match_Rtn.manual_fee"));
        } else
          goto handle_unusual;
        continue;
      // string deleted_flag = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_deleted_flag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Match_Rtn.deleted_flag"));
        } else
          goto handle_unusual;
        continue;
      // float cover_price = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 205)) {
          cover_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string ex_inst_id = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_ex_inst_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Match_Rtn.ex_inst_id"));
        } else
          goto handle_unusual;
        continue;
      // string broker_id = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_broker_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Match_Rtn.broker_id"));
        } else
          goto handle_unusual;
        continue;
      // string investor_id = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_investor_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Match_Rtn.investor_id"));
        } else
          goto handle_unusual;
        continue;
      // string bilateral_id = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_bilateral_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Match_Rtn.bilateral_id"));
        } else
          goto handle_unusual;
        continue;
      // uint64 quote_type = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          quote_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 settle_type = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          settle_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string counter_party_id = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          auto str = _internal_mutable_counter_party_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Match_Rtn.counter_party_id"));
        } else
          goto handle_unusual;
        continue;
      // string counter_party_trader = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_counter_party_trader();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Match_Rtn.counter_party_trader"));
        } else
          goto handle_unusual;
        continue;
      // float accrued_interest_amt = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          accrued_interest_amt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 sequence_no = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          sequence_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 strategy_code = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          strategy_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ficc_Match_Rtn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ficc_message.ficc_Match_Rtn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // string order_inner_id = 2;
  if (!this->_internal_order_inner_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_inner_id().data(), static_cast<int>(this->_internal_order_inner_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Match_Rtn.order_inner_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_order_inner_id(), target);
  }

  // string ex_code = 3;
  if (!this->_internal_ex_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ex_code().data(), static_cast<int>(this->_internal_ex_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Match_Rtn.ex_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ex_code(), target);
  }

  // string trading_day = 4;
  if (!this->_internal_trading_day().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trading_day().data(), static_cast<int>(this->_internal_trading_day().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Match_Rtn.trading_day");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_trading_day(), target);
  }

  // string trade_acct = 5;
  if (!this->_internal_trade_acct().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trade_acct().data(), static_cast<int>(this->_internal_trade_acct().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Match_Rtn.trade_acct");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_trade_acct(), target);
  }

  // string fund_acct = 6;
  if (!this->_internal_fund_acct().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fund_acct().data(), static_cast<int>(this->_internal_fund_acct().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Match_Rtn.fund_acct");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_fund_acct(), target);
  }

  // uint32 user_id = 7;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_user_id(), target);
  }

  // string order_sys_id = 8;
  if (!this->_internal_order_sys_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_sys_id().data(), static_cast<int>(this->_internal_order_sys_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Match_Rtn.order_sys_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_order_sys_id(), target);
  }

  // string trade_id = 9;
  if (!this->_internal_trade_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trade_id().data(), static_cast<int>(this->_internal_trade_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Match_Rtn.trade_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_trade_id(), target);
  }

  // string secu_code = 10;
  if (!this->_internal_secu_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secu_code().data(), static_cast<int>(this->_internal_secu_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Match_Rtn.secu_code");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_secu_code(), target);
  }

  // string direction = 11;
  if (!this->_internal_direction().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_direction().data(), static_cast<int>(this->_internal_direction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Match_Rtn.direction");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_direction(), target);
  }

  // string offset_flag = 12;
  if (!this->_internal_offset_flag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_offset_flag().data(), static_cast<int>(this->_internal_offset_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Match_Rtn.offset_flag");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_offset_flag(), target);
  }

  // string hedge_flag = 13;
  if (!this->_internal_hedge_flag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hedge_flag().data(), static_cast<int>(this->_internal_hedge_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Match_Rtn.hedge_flag");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_hedge_flag(), target);
  }

  // float order_price = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_order_price = this->_internal_order_price();
  uint32_t raw_order_price;
  memcpy(&raw_order_price, &tmp_order_price, sizeof(tmp_order_price));
  if (raw_order_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_order_price(), target);
  }

  // float dirty_price = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dirty_price = this->_internal_dirty_price();
  uint32_t raw_dirty_price;
  memcpy(&raw_dirty_price, &tmp_dirty_price, sizeof(tmp_dirty_price));
  if (raw_dirty_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_dirty_price(), target);
  }

  // float trade_price = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_trade_price = this->_internal_trade_price();
  uint32_t raw_trade_price;
  memcpy(&raw_trade_price, &tmp_trade_price, sizeof(tmp_trade_price));
  if (raw_trade_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_trade_price(), target);
  }

  // float ytm = 17;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ytm = this->_internal_ytm();
  uint32_t raw_ytm;
  memcpy(&raw_ytm, &tmp_ytm, sizeof(tmp_ytm));
  if (raw_ytm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_ytm(), target);
  }

  // uint64 vol_traded = 18;
  if (this->_internal_vol_traded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(18, this->_internal_vol_traded(), target);
  }

  // string trade_date = 19;
  if (!this->_internal_trade_date().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trade_date().data(), static_cast<int>(this->_internal_trade_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Match_Rtn.trade_date");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_trade_date(), target);
  }

  // string trade_time = 20;
  if (!this->_internal_trade_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trade_time().data(), static_cast<int>(this->_internal_trade_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Match_Rtn.trade_time");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_trade_time(), target);
  }

  // float trade_fee = 21;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_trade_fee = this->_internal_trade_fee();
  uint32_t raw_trade_fee;
  memcpy(&raw_trade_fee, &tmp_trade_fee, sizeof(tmp_trade_fee));
  if (raw_trade_fee != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(21, this->_internal_trade_fee(), target);
  }

  // string currency = 22;
  if (!this->_internal_currency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Match_Rtn.currency");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_currency(), target);
  }

  // string manual_fee = 23;
  if (!this->_internal_manual_fee().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_manual_fee().data(), static_cast<int>(this->_internal_manual_fee().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Match_Rtn.manual_fee");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_manual_fee(), target);
  }

  // string deleted_flag = 24;
  if (!this->_internal_deleted_flag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deleted_flag().data(), static_cast<int>(this->_internal_deleted_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Match_Rtn.deleted_flag");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_deleted_flag(), target);
  }

  // float cover_price = 25;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cover_price = this->_internal_cover_price();
  uint32_t raw_cover_price;
  memcpy(&raw_cover_price, &tmp_cover_price, sizeof(tmp_cover_price));
  if (raw_cover_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(25, this->_internal_cover_price(), target);
  }

  // string ex_inst_id = 26;
  if (!this->_internal_ex_inst_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ex_inst_id().data(), static_cast<int>(this->_internal_ex_inst_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Match_Rtn.ex_inst_id");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_ex_inst_id(), target);
  }

  // string broker_id = 27;
  if (!this->_internal_broker_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_broker_id().data(), static_cast<int>(this->_internal_broker_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Match_Rtn.broker_id");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_broker_id(), target);
  }

  // string investor_id = 28;
  if (!this->_internal_investor_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_investor_id().data(), static_cast<int>(this->_internal_investor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Match_Rtn.investor_id");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_investor_id(), target);
  }

  // string bilateral_id = 29;
  if (!this->_internal_bilateral_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bilateral_id().data(), static_cast<int>(this->_internal_bilateral_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Match_Rtn.bilateral_id");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_bilateral_id(), target);
  }

  // uint64 quote_type = 30;
  if (this->_internal_quote_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(30, this->_internal_quote_type(), target);
  }

  // uint64 settle_type = 31;
  if (this->_internal_settle_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(31, this->_internal_settle_type(), target);
  }

  // string counter_party_id = 32;
  if (!this->_internal_counter_party_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_counter_party_id().data(), static_cast<int>(this->_internal_counter_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Match_Rtn.counter_party_id");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_counter_party_id(), target);
  }

  // string counter_party_trader = 33;
  if (!this->_internal_counter_party_trader().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_counter_party_trader().data(), static_cast<int>(this->_internal_counter_party_trader().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Match_Rtn.counter_party_trader");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_counter_party_trader(), target);
  }

  // float accrued_interest_amt = 34;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_accrued_interest_amt = this->_internal_accrued_interest_amt();
  uint32_t raw_accrued_interest_amt;
  memcpy(&raw_accrued_interest_amt, &tmp_accrued_interest_amt, sizeof(tmp_accrued_interest_amt));
  if (raw_accrued_interest_amt != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(34, this->_internal_accrued_interest_amt(), target);
  }

  // uint32 sequence_no = 35;
  if (this->_internal_sequence_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(35, this->_internal_sequence_no(), target);
  }

  // uint64 strategy_code = 36;
  if (this->_internal_strategy_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(36, this->_internal_strategy_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ficc_message.ficc_Match_Rtn)
  return target;
}

size_t ficc_Match_Rtn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ficc_message.ficc_Match_Rtn)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string order_inner_id = 2;
  if (!this->_internal_order_inner_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_inner_id());
  }

  // string ex_code = 3;
  if (!this->_internal_ex_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ex_code());
  }

  // string trading_day = 4;
  if (!this->_internal_trading_day().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trading_day());
  }

  // string trade_acct = 5;
  if (!this->_internal_trade_acct().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trade_acct());
  }

  // string fund_acct = 6;
  if (!this->_internal_fund_acct().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fund_acct());
  }

  // string order_sys_id = 8;
  if (!this->_internal_order_sys_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_sys_id());
  }

  // string trade_id = 9;
  if (!this->_internal_trade_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trade_id());
  }

  // string secu_code = 10;
  if (!this->_internal_secu_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secu_code());
  }

  // string direction = 11;
  if (!this->_internal_direction().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_direction());
  }

  // string offset_flag = 12;
  if (!this->_internal_offset_flag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_offset_flag());
  }

  // string hedge_flag = 13;
  if (!this->_internal_hedge_flag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hedge_flag());
  }

  // string trade_date = 19;
  if (!this->_internal_trade_date().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trade_date());
  }

  // string trade_time = 20;
  if (!this->_internal_trade_time().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trade_time());
  }

  // string currency = 22;
  if (!this->_internal_currency().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // string manual_fee = 23;
  if (!this->_internal_manual_fee().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_manual_fee());
  }

  // string deleted_flag = 24;
  if (!this->_internal_deleted_flag().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deleted_flag());
  }

  // string ex_inst_id = 26;
  if (!this->_internal_ex_inst_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ex_inst_id());
  }

  // string broker_id = 27;
  if (!this->_internal_broker_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_broker_id());
  }

  // string investor_id = 28;
  if (!this->_internal_investor_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_investor_id());
  }

  // string bilateral_id = 29;
  if (!this->_internal_bilateral_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bilateral_id());
  }

  // string counter_party_id = 32;
  if (!this->_internal_counter_party_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_counter_party_id());
  }

  // string counter_party_trader = 33;
  if (!this->_internal_counter_party_trader().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_counter_party_trader());
  }

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  // uint32 user_id = 7;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // float order_price = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_order_price = this->_internal_order_price();
  uint32_t raw_order_price;
  memcpy(&raw_order_price, &tmp_order_price, sizeof(tmp_order_price));
  if (raw_order_price != 0) {
    total_size += 1 + 4;
  }

  // float dirty_price = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dirty_price = this->_internal_dirty_price();
  uint32_t raw_dirty_price;
  memcpy(&raw_dirty_price, &tmp_dirty_price, sizeof(tmp_dirty_price));
  if (raw_dirty_price != 0) {
    total_size += 1 + 4;
  }

  // float trade_price = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_trade_price = this->_internal_trade_price();
  uint32_t raw_trade_price;
  memcpy(&raw_trade_price, &tmp_trade_price, sizeof(tmp_trade_price));
  if (raw_trade_price != 0) {
    total_size += 2 + 4;
  }

  // uint64 vol_traded = 18;
  if (this->_internal_vol_traded() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_vol_traded());
  }

  // float ytm = 17;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ytm = this->_internal_ytm();
  uint32_t raw_ytm;
  memcpy(&raw_ytm, &tmp_ytm, sizeof(tmp_ytm));
  if (raw_ytm != 0) {
    total_size += 2 + 4;
  }

  // float trade_fee = 21;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_trade_fee = this->_internal_trade_fee();
  uint32_t raw_trade_fee;
  memcpy(&raw_trade_fee, &tmp_trade_fee, sizeof(tmp_trade_fee));
  if (raw_trade_fee != 0) {
    total_size += 2 + 4;
  }

  // float cover_price = 25;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cover_price = this->_internal_cover_price();
  uint32_t raw_cover_price;
  memcpy(&raw_cover_price, &tmp_cover_price, sizeof(tmp_cover_price));
  if (raw_cover_price != 0) {
    total_size += 2 + 4;
  }

  // float accrued_interest_amt = 34;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_accrued_interest_amt = this->_internal_accrued_interest_amt();
  uint32_t raw_accrued_interest_amt;
  memcpy(&raw_accrued_interest_amt, &tmp_accrued_interest_amt, sizeof(tmp_accrued_interest_amt));
  if (raw_accrued_interest_amt != 0) {
    total_size += 2 + 4;
  }

  // uint64 quote_type = 30;
  if (this->_internal_quote_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_quote_type());
  }

  // uint64 settle_type = 31;
  if (this->_internal_settle_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_settle_type());
  }

  // uint64 strategy_code = 36;
  if (this->_internal_strategy_code() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_strategy_code());
  }

  // uint32 sequence_no = 35;
  if (this->_internal_sequence_no() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_sequence_no());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ficc_Match_Rtn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ficc_Match_Rtn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ficc_Match_Rtn::GetClassData() const { return &_class_data_; }

void ficc_Match_Rtn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ficc_Match_Rtn *>(to)->MergeFrom(
      static_cast<const ficc_Match_Rtn &>(from));
}


void ficc_Match_Rtn::MergeFrom(const ficc_Match_Rtn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ficc_message.ficc_Match_Rtn)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_order_inner_id().empty()) {
    _internal_set_order_inner_id(from._internal_order_inner_id());
  }
  if (!from._internal_ex_code().empty()) {
    _internal_set_ex_code(from._internal_ex_code());
  }
  if (!from._internal_trading_day().empty()) {
    _internal_set_trading_day(from._internal_trading_day());
  }
  if (!from._internal_trade_acct().empty()) {
    _internal_set_trade_acct(from._internal_trade_acct());
  }
  if (!from._internal_fund_acct().empty()) {
    _internal_set_fund_acct(from._internal_fund_acct());
  }
  if (!from._internal_order_sys_id().empty()) {
    _internal_set_order_sys_id(from._internal_order_sys_id());
  }
  if (!from._internal_trade_id().empty()) {
    _internal_set_trade_id(from._internal_trade_id());
  }
  if (!from._internal_secu_code().empty()) {
    _internal_set_secu_code(from._internal_secu_code());
  }
  if (!from._internal_direction().empty()) {
    _internal_set_direction(from._internal_direction());
  }
  if (!from._internal_offset_flag().empty()) {
    _internal_set_offset_flag(from._internal_offset_flag());
  }
  if (!from._internal_hedge_flag().empty()) {
    _internal_set_hedge_flag(from._internal_hedge_flag());
  }
  if (!from._internal_trade_date().empty()) {
    _internal_set_trade_date(from._internal_trade_date());
  }
  if (!from._internal_trade_time().empty()) {
    _internal_set_trade_time(from._internal_trade_time());
  }
  if (!from._internal_currency().empty()) {
    _internal_set_currency(from._internal_currency());
  }
  if (!from._internal_manual_fee().empty()) {
    _internal_set_manual_fee(from._internal_manual_fee());
  }
  if (!from._internal_deleted_flag().empty()) {
    _internal_set_deleted_flag(from._internal_deleted_flag());
  }
  if (!from._internal_ex_inst_id().empty()) {
    _internal_set_ex_inst_id(from._internal_ex_inst_id());
  }
  if (!from._internal_broker_id().empty()) {
    _internal_set_broker_id(from._internal_broker_id());
  }
  if (!from._internal_investor_id().empty()) {
    _internal_set_investor_id(from._internal_investor_id());
  }
  if (!from._internal_bilateral_id().empty()) {
    _internal_set_bilateral_id(from._internal_bilateral_id());
  }
  if (!from._internal_counter_party_id().empty()) {
    _internal_set_counter_party_id(from._internal_counter_party_id());
  }
  if (!from._internal_counter_party_trader().empty()) {
    _internal_set_counter_party_trader(from._internal_counter_party_trader());
  }
  if (from._internal_has_head()) {
    _internal_mutable_head()->::message_head::head::MergeFrom(from._internal_head());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_order_price = from._internal_order_price();
  uint32_t raw_order_price;
  memcpy(&raw_order_price, &tmp_order_price, sizeof(tmp_order_price));
  if (raw_order_price != 0) {
    _internal_set_order_price(from._internal_order_price());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dirty_price = from._internal_dirty_price();
  uint32_t raw_dirty_price;
  memcpy(&raw_dirty_price, &tmp_dirty_price, sizeof(tmp_dirty_price));
  if (raw_dirty_price != 0) {
    _internal_set_dirty_price(from._internal_dirty_price());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_trade_price = from._internal_trade_price();
  uint32_t raw_trade_price;
  memcpy(&raw_trade_price, &tmp_trade_price, sizeof(tmp_trade_price));
  if (raw_trade_price != 0) {
    _internal_set_trade_price(from._internal_trade_price());
  }
  if (from._internal_vol_traded() != 0) {
    _internal_set_vol_traded(from._internal_vol_traded());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ytm = from._internal_ytm();
  uint32_t raw_ytm;
  memcpy(&raw_ytm, &tmp_ytm, sizeof(tmp_ytm));
  if (raw_ytm != 0) {
    _internal_set_ytm(from._internal_ytm());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_trade_fee = from._internal_trade_fee();
  uint32_t raw_trade_fee;
  memcpy(&raw_trade_fee, &tmp_trade_fee, sizeof(tmp_trade_fee));
  if (raw_trade_fee != 0) {
    _internal_set_trade_fee(from._internal_trade_fee());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cover_price = from._internal_cover_price();
  uint32_t raw_cover_price;
  memcpy(&raw_cover_price, &tmp_cover_price, sizeof(tmp_cover_price));
  if (raw_cover_price != 0) {
    _internal_set_cover_price(from._internal_cover_price());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_accrued_interest_amt = from._internal_accrued_interest_amt();
  uint32_t raw_accrued_interest_amt;
  memcpy(&raw_accrued_interest_amt, &tmp_accrued_interest_amt, sizeof(tmp_accrued_interest_amt));
  if (raw_accrued_interest_amt != 0) {
    _internal_set_accrued_interest_amt(from._internal_accrued_interest_amt());
  }
  if (from._internal_quote_type() != 0) {
    _internal_set_quote_type(from._internal_quote_type());
  }
  if (from._internal_settle_type() != 0) {
    _internal_set_settle_type(from._internal_settle_type());
  }
  if (from._internal_strategy_code() != 0) {
    _internal_set_strategy_code(from._internal_strategy_code());
  }
  if (from._internal_sequence_no() != 0) {
    _internal_set_sequence_no(from._internal_sequence_no());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ficc_Match_Rtn::CopyFrom(const ficc_Match_Rtn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ficc_message.ficc_Match_Rtn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ficc_Match_Rtn::IsInitialized() const {
  return true;
}

void ficc_Match_Rtn::InternalSwap(ficc_Match_Rtn* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_inner_id_, lhs_arena,
      &other->order_inner_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ex_code_, lhs_arena,
      &other->ex_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trading_day_, lhs_arena,
      &other->trading_day_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trade_acct_, lhs_arena,
      &other->trade_acct_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &fund_acct_, lhs_arena,
      &other->fund_acct_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_sys_id_, lhs_arena,
      &other->order_sys_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trade_id_, lhs_arena,
      &other->trade_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &secu_code_, lhs_arena,
      &other->secu_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &direction_, lhs_arena,
      &other->direction_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &offset_flag_, lhs_arena,
      &other->offset_flag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &hedge_flag_, lhs_arena,
      &other->hedge_flag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trade_date_, lhs_arena,
      &other->trade_date_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trade_time_, lhs_arena,
      &other->trade_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &currency_, lhs_arena,
      &other->currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &manual_fee_, lhs_arena,
      &other->manual_fee_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &deleted_flag_, lhs_arena,
      &other->deleted_flag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ex_inst_id_, lhs_arena,
      &other->ex_inst_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &broker_id_, lhs_arena,
      &other->broker_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &investor_id_, lhs_arena,
      &other->investor_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &bilateral_id_, lhs_arena,
      &other->bilateral_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &counter_party_id_, lhs_arena,
      &other->counter_party_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &counter_party_trader_, lhs_arena,
      &other->counter_party_trader_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ficc_Match_Rtn, sequence_no_)
      + sizeof(ficc_Match_Rtn::sequence_no_)
      - PROTOBUF_FIELD_OFFSET(ficc_Match_Rtn, head_)>(
          reinterpret_cast<char*>(&head_),
          reinterpret_cast<char*>(&other->head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ficc_Match_Rtn::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ficc_2eproto_getter, &descriptor_table_ficc_2eproto_once,
      file_level_metadata_ficc_2eproto[10]);
}

// ===================================================================

class ficc_Cfets_Makemarket_Status::_Internal {
 public:
  static const ::message_head::head& head(const ficc_Cfets_Makemarket_Status* msg);
};

const ::message_head::head&
ficc_Cfets_Makemarket_Status::_Internal::head(const ficc_Cfets_Makemarket_Status* msg) {
  return *msg->head_;
}
void ficc_Cfets_Makemarket_Status::clear_head() {
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
}
ficc_Cfets_Makemarket_Status::ficc_Cfets_Makemarket_Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ficc_message.ficc_Cfets_Makemarket_Status)
}
ficc_Cfets_Makemarket_Status::ficc_Cfets_Makemarket_Status(const ficc_Cfets_Makemarket_Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  secu_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secu_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secu_code().empty()) {
    secu_code_.Set(from._internal_secu_code(), 
      GetArenaForAllocation());
  }
  secu_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secu_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secu_type().empty()) {
    secu_type_.Set(from._internal_secu_type(), 
      GetArenaForAllocation());
  }
  secu_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secu_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secu_name().empty()) {
    secu_name_.Set(from._internal_secu_name(), 
      GetArenaForAllocation());
  }
  last_update_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    last_update_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_last_update().empty()) {
    last_update_.Set(from._internal_last_update(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_head()) {
    head_ = new ::message_head::head(*from.head_);
  } else {
    head_ = nullptr;
  }
  ::memcpy(&quote_status_, &from.quote_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&notify_out_) -
    reinterpret_cast<char*>(&quote_status_)) + sizeof(notify_out_));
  // @@protoc_insertion_point(copy_constructor:ficc_message.ficc_Cfets_Makemarket_Status)
}

inline void ficc_Cfets_Makemarket_Status::SharedCtor() {
secu_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secu_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secu_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secu_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secu_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secu_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
last_update_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  last_update_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&head_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&notify_out_) -
    reinterpret_cast<char*>(&head_)) + sizeof(notify_out_));
}

ficc_Cfets_Makemarket_Status::~ficc_Cfets_Makemarket_Status() {
  // @@protoc_insertion_point(destructor:ficc_message.ficc_Cfets_Makemarket_Status)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ficc_Cfets_Makemarket_Status::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  secu_code_.Destroy();
  secu_type_.Destroy();
  secu_name_.Destroy();
  last_update_.Destroy();
  if (this != internal_default_instance()) delete head_;
}

void ficc_Cfets_Makemarket_Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ficc_Cfets_Makemarket_Status::Clear() {
// @@protoc_insertion_point(message_clear_start:ficc_message.ficc_Cfets_Makemarket_Status)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  secu_code_.ClearToEmpty();
  secu_type_.ClearToEmpty();
  secu_name_.ClearToEmpty();
  last_update_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  ::memset(&quote_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&notify_out_) -
      reinterpret_cast<char*>(&quote_status_)) + sizeof(notify_out_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ficc_Cfets_Makemarket_Status::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message_head.head head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string secu_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_secu_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Cfets_Makemarket_Status.secu_code"));
        } else
          goto handle_unusual;
        continue;
      // string secu_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_secu_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Cfets_Makemarket_Status.secu_type"));
        } else
          goto handle_unusual;
        continue;
      // string secu_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_secu_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Cfets_Makemarket_Status.secu_name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 quote_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          quote_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 last_rec_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          last_rec_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 market_time_day = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          market_time_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 trade_vol_day = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          trade_vol_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string last_update = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_last_update();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Cfets_Makemarket_Status.last_update"));
        } else
          goto handle_unusual;
        continue;
      // float max_ytm_spread = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          max_ytm_spread_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 min_vol = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          min_vol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 notify_out = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          notify_out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ficc_Cfets_Makemarket_Status::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ficc_message.ficc_Cfets_Makemarket_Status)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // string secu_code = 2;
  if (!this->_internal_secu_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secu_code().data(), static_cast<int>(this->_internal_secu_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Cfets_Makemarket_Status.secu_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secu_code(), target);
  }

  // string secu_type = 3;
  if (!this->_internal_secu_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secu_type().data(), static_cast<int>(this->_internal_secu_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Cfets_Makemarket_Status.secu_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_secu_type(), target);
  }

  // string secu_name = 4;
  if (!this->_internal_secu_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secu_name().data(), static_cast<int>(this->_internal_secu_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Cfets_Makemarket_Status.secu_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_secu_name(), target);
  }

  // uint32 quote_status = 5;
  if (this->_internal_quote_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_quote_status(), target);
  }

  // uint32 last_rec_time = 6;
  if (this->_internal_last_rec_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_last_rec_time(), target);
  }

  // uint32 market_time_day = 7;
  if (this->_internal_market_time_day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_market_time_day(), target);
  }

  // uint64 trade_vol_day = 8;
  if (this->_internal_trade_vol_day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_trade_vol_day(), target);
  }

  // string last_update = 9;
  if (!this->_internal_last_update().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_update().data(), static_cast<int>(this->_internal_last_update().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Cfets_Makemarket_Status.last_update");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_last_update(), target);
  }

  // float max_ytm_spread = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_ytm_spread = this->_internal_max_ytm_spread();
  uint32_t raw_max_ytm_spread;
  memcpy(&raw_max_ytm_spread, &tmp_max_ytm_spread, sizeof(tmp_max_ytm_spread));
  if (raw_max_ytm_spread != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_max_ytm_spread(), target);
  }

  // uint64 min_vol = 11;
  if (this->_internal_min_vol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_min_vol(), target);
  }

  // uint32 notify_out = 12;
  if (this->_internal_notify_out() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_notify_out(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ficc_message.ficc_Cfets_Makemarket_Status)
  return target;
}

size_t ficc_Cfets_Makemarket_Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ficc_message.ficc_Cfets_Makemarket_Status)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string secu_code = 2;
  if (!this->_internal_secu_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secu_code());
  }

  // string secu_type = 3;
  if (!this->_internal_secu_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secu_type());
  }

  // string secu_name = 4;
  if (!this->_internal_secu_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secu_name());
  }

  // string last_update = 9;
  if (!this->_internal_last_update().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_update());
  }

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  // uint32 quote_status = 5;
  if (this->_internal_quote_status() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_quote_status());
  }

  // uint32 last_rec_time = 6;
  if (this->_internal_last_rec_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_last_rec_time());
  }

  // uint64 trade_vol_day = 8;
  if (this->_internal_trade_vol_day() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_trade_vol_day());
  }

  // uint32 market_time_day = 7;
  if (this->_internal_market_time_day() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_market_time_day());
  }

  // float max_ytm_spread = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_ytm_spread = this->_internal_max_ytm_spread();
  uint32_t raw_max_ytm_spread;
  memcpy(&raw_max_ytm_spread, &tmp_max_ytm_spread, sizeof(tmp_max_ytm_spread));
  if (raw_max_ytm_spread != 0) {
    total_size += 1 + 4;
  }

  // uint64 min_vol = 11;
  if (this->_internal_min_vol() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_min_vol());
  }

  // uint32 notify_out = 12;
  if (this->_internal_notify_out() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_notify_out());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ficc_Cfets_Makemarket_Status::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ficc_Cfets_Makemarket_Status::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ficc_Cfets_Makemarket_Status::GetClassData() const { return &_class_data_; }

void ficc_Cfets_Makemarket_Status::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ficc_Cfets_Makemarket_Status *>(to)->MergeFrom(
      static_cast<const ficc_Cfets_Makemarket_Status &>(from));
}


void ficc_Cfets_Makemarket_Status::MergeFrom(const ficc_Cfets_Makemarket_Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ficc_message.ficc_Cfets_Makemarket_Status)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_secu_code().empty()) {
    _internal_set_secu_code(from._internal_secu_code());
  }
  if (!from._internal_secu_type().empty()) {
    _internal_set_secu_type(from._internal_secu_type());
  }
  if (!from._internal_secu_name().empty()) {
    _internal_set_secu_name(from._internal_secu_name());
  }
  if (!from._internal_last_update().empty()) {
    _internal_set_last_update(from._internal_last_update());
  }
  if (from._internal_has_head()) {
    _internal_mutable_head()->::message_head::head::MergeFrom(from._internal_head());
  }
  if (from._internal_quote_status() != 0) {
    _internal_set_quote_status(from._internal_quote_status());
  }
  if (from._internal_last_rec_time() != 0) {
    _internal_set_last_rec_time(from._internal_last_rec_time());
  }
  if (from._internal_trade_vol_day() != 0) {
    _internal_set_trade_vol_day(from._internal_trade_vol_day());
  }
  if (from._internal_market_time_day() != 0) {
    _internal_set_market_time_day(from._internal_market_time_day());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_ytm_spread = from._internal_max_ytm_spread();
  uint32_t raw_max_ytm_spread;
  memcpy(&raw_max_ytm_spread, &tmp_max_ytm_spread, sizeof(tmp_max_ytm_spread));
  if (raw_max_ytm_spread != 0) {
    _internal_set_max_ytm_spread(from._internal_max_ytm_spread());
  }
  if (from._internal_min_vol() != 0) {
    _internal_set_min_vol(from._internal_min_vol());
  }
  if (from._internal_notify_out() != 0) {
    _internal_set_notify_out(from._internal_notify_out());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ficc_Cfets_Makemarket_Status::CopyFrom(const ficc_Cfets_Makemarket_Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ficc_message.ficc_Cfets_Makemarket_Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ficc_Cfets_Makemarket_Status::IsInitialized() const {
  return true;
}

void ficc_Cfets_Makemarket_Status::InternalSwap(ficc_Cfets_Makemarket_Status* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &secu_code_, lhs_arena,
      &other->secu_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &secu_type_, lhs_arena,
      &other->secu_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &secu_name_, lhs_arena,
      &other->secu_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &last_update_, lhs_arena,
      &other->last_update_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ficc_Cfets_Makemarket_Status, notify_out_)
      + sizeof(ficc_Cfets_Makemarket_Status::notify_out_)
      - PROTOBUF_FIELD_OFFSET(ficc_Cfets_Makemarket_Status, head_)>(
          reinterpret_cast<char*>(&head_),
          reinterpret_cast<char*>(&other->head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ficc_Cfets_Makemarket_Status::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ficc_2eproto_getter, &descriptor_table_ficc_2eproto_once,
      file_level_metadata_ficc_2eproto[11]);
}

// ===================================================================

class ficc_fund::_Internal {
 public:
  static const ::message_head::head& head(const ficc_fund* msg);
};

const ::message_head::head&
ficc_fund::_Internal::head(const ficc_fund* msg) {
  return *msg->head_;
}
void ficc_fund::clear_head() {
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
}
ficc_fund::ficc_fund(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ficc_message.ficc_fund)
}
ficc_fund::ficc_fund(const ficc_fund& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trade_acct_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trade_acct_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trade_acct().empty()) {
    trade_acct_.Set(from._internal_trade_acct(), 
      GetArenaForAllocation());
  }
  currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_currency().empty()) {
    currency_.Set(from._internal_currency(), 
      GetArenaForAllocation());
  }
  fund_acct_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fund_acct_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fund_acct().empty()) {
    fund_acct_.Set(from._internal_fund_acct(), 
      GetArenaForAllocation());
  }
  trade_day_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trade_day_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trade_day().empty()) {
    trade_day_.Set(from._internal_trade_day(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_head()) {
    head_ = new ::message_head::head(*from.head_);
  } else {
    head_ = nullptr;
  }
  ::memcpy(&last_bal_, &from.last_bal_,
    static_cast<size_t>(reinterpret_cast<char*>(&risk_) -
    reinterpret_cast<char*>(&last_bal_)) + sizeof(risk_));
  // @@protoc_insertion_point(copy_constructor:ficc_message.ficc_fund)
}

inline void ficc_fund::SharedCtor() {
trade_acct_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trade_acct_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
currency_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  currency_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
fund_acct_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fund_acct_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
trade_day_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trade_day_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&head_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&risk_) -
    reinterpret_cast<char*>(&head_)) + sizeof(risk_));
}

ficc_fund::~ficc_fund() {
  // @@protoc_insertion_point(destructor:ficc_message.ficc_fund)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ficc_fund::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  trade_acct_.Destroy();
  currency_.Destroy();
  fund_acct_.Destroy();
  trade_day_.Destroy();
  if (this != internal_default_instance()) delete head_;
}

void ficc_fund::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ficc_fund::Clear() {
// @@protoc_insertion_point(message_clear_start:ficc_message.ficc_fund)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trade_acct_.ClearToEmpty();
  currency_.ClearToEmpty();
  fund_acct_.ClearToEmpty();
  trade_day_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  ::memset(&last_bal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&risk_) -
      reinterpret_cast<char*>(&last_bal_)) + sizeof(risk_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ficc_fund::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message_head.head head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string trade_acct = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_trade_acct();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_fund.trade_acct"));
        } else
          goto handle_unusual;
        continue;
      // string currency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_fund.currency"));
        } else
          goto handle_unusual;
        continue;
      // string fund_acct = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_fund_acct();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_fund.fund_acct"));
        } else
          goto handle_unusual;
        continue;
      // float last_bal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          last_bal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float balance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float avail_fund = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          avail_fund_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float get_fund = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          get_fund_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float base_margin = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          base_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float income_expense = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          income_expense_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float froze_fund = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          froze_fund_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float margin = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float fee = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float reserve = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          reserve_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float surplus = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          surplus_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float float_surplus = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          float_surplus_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float inte_integral = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          inte_integral_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float puni_integral = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          puni_integral_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float incr_inte = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          incr_inte_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float arap = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          arap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 risk_level = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          risk_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float risk = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 181)) {
          risk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string trade_day = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_trade_day();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_fund.trade_day"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ficc_fund::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ficc_message.ficc_fund)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // string trade_acct = 2;
  if (!this->_internal_trade_acct().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trade_acct().data(), static_cast<int>(this->_internal_trade_acct().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_fund.trade_acct");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_trade_acct(), target);
  }

  // string currency = 3;
  if (!this->_internal_currency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_fund.currency");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_currency(), target);
  }

  // string fund_acct = 4;
  if (!this->_internal_fund_acct().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fund_acct().data(), static_cast<int>(this->_internal_fund_acct().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_fund.fund_acct");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_fund_acct(), target);
  }

  // float last_bal = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_last_bal = this->_internal_last_bal();
  uint32_t raw_last_bal;
  memcpy(&raw_last_bal, &tmp_last_bal, sizeof(tmp_last_bal));
  if (raw_last_bal != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_last_bal(), target);
  }

  // float balance = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_balance = this->_internal_balance();
  uint32_t raw_balance;
  memcpy(&raw_balance, &tmp_balance, sizeof(tmp_balance));
  if (raw_balance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_balance(), target);
  }

  // float avail_fund = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_avail_fund = this->_internal_avail_fund();
  uint32_t raw_avail_fund;
  memcpy(&raw_avail_fund, &tmp_avail_fund, sizeof(tmp_avail_fund));
  if (raw_avail_fund != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_avail_fund(), target);
  }

  // float get_fund = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_get_fund = this->_internal_get_fund();
  uint32_t raw_get_fund;
  memcpy(&raw_get_fund, &tmp_get_fund, sizeof(tmp_get_fund));
  if (raw_get_fund != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_get_fund(), target);
  }

  // float base_margin = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_margin = this->_internal_base_margin();
  uint32_t raw_base_margin;
  memcpy(&raw_base_margin, &tmp_base_margin, sizeof(tmp_base_margin));
  if (raw_base_margin != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_base_margin(), target);
  }

  // float income_expense = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_income_expense = this->_internal_income_expense();
  uint32_t raw_income_expense;
  memcpy(&raw_income_expense, &tmp_income_expense, sizeof(tmp_income_expense));
  if (raw_income_expense != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_income_expense(), target);
  }

  // float froze_fund = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_froze_fund = this->_internal_froze_fund();
  uint32_t raw_froze_fund;
  memcpy(&raw_froze_fund, &tmp_froze_fund, sizeof(tmp_froze_fund));
  if (raw_froze_fund != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_froze_fund(), target);
  }

  // float margin = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_margin = this->_internal_margin();
  uint32_t raw_margin;
  memcpy(&raw_margin, &tmp_margin, sizeof(tmp_margin));
  if (raw_margin != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_margin(), target);
  }

  // float fee = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fee = this->_internal_fee();
  uint32_t raw_fee;
  memcpy(&raw_fee, &tmp_fee, sizeof(tmp_fee));
  if (raw_fee != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_fee(), target);
  }

  // float reserve = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_reserve = this->_internal_reserve();
  uint32_t raw_reserve;
  memcpy(&raw_reserve, &tmp_reserve, sizeof(tmp_reserve));
  if (raw_reserve != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_reserve(), target);
  }

  // float surplus = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_surplus = this->_internal_surplus();
  uint32_t raw_surplus;
  memcpy(&raw_surplus, &tmp_surplus, sizeof(tmp_surplus));
  if (raw_surplus != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_surplus(), target);
  }

  // float float_surplus = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_float_surplus = this->_internal_float_surplus();
  uint32_t raw_float_surplus;
  memcpy(&raw_float_surplus, &tmp_float_surplus, sizeof(tmp_float_surplus));
  if (raw_float_surplus != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_float_surplus(), target);
  }

  // float inte_integral = 17;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_inte_integral = this->_internal_inte_integral();
  uint32_t raw_inte_integral;
  memcpy(&raw_inte_integral, &tmp_inte_integral, sizeof(tmp_inte_integral));
  if (raw_inte_integral != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_inte_integral(), target);
  }

  // float puni_integral = 18;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_puni_integral = this->_internal_puni_integral();
  uint32_t raw_puni_integral;
  memcpy(&raw_puni_integral, &tmp_puni_integral, sizeof(tmp_puni_integral));
  if (raw_puni_integral != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(18, this->_internal_puni_integral(), target);
  }

  // float incr_inte = 19;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_incr_inte = this->_internal_incr_inte();
  uint32_t raw_incr_inte;
  memcpy(&raw_incr_inte, &tmp_incr_inte, sizeof(tmp_incr_inte));
  if (raw_incr_inte != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(19, this->_internal_incr_inte(), target);
  }

  // float arap = 20;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_arap = this->_internal_arap();
  uint32_t raw_arap;
  memcpy(&raw_arap, &tmp_arap, sizeof(tmp_arap));
  if (raw_arap != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(20, this->_internal_arap(), target);
  }

  // uint32 risk_level = 21;
  if (this->_internal_risk_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_risk_level(), target);
  }

  // float risk = 22;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_risk = this->_internal_risk();
  uint32_t raw_risk;
  memcpy(&raw_risk, &tmp_risk, sizeof(tmp_risk));
  if (raw_risk != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(22, this->_internal_risk(), target);
  }

  // string trade_day = 23;
  if (!this->_internal_trade_day().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trade_day().data(), static_cast<int>(this->_internal_trade_day().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_fund.trade_day");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_trade_day(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ficc_message.ficc_fund)
  return target;
}

size_t ficc_fund::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ficc_message.ficc_fund)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trade_acct = 2;
  if (!this->_internal_trade_acct().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trade_acct());
  }

  // string currency = 3;
  if (!this->_internal_currency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // string fund_acct = 4;
  if (!this->_internal_fund_acct().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fund_acct());
  }

  // string trade_day = 23;
  if (!this->_internal_trade_day().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trade_day());
  }

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  // float last_bal = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_last_bal = this->_internal_last_bal();
  uint32_t raw_last_bal;
  memcpy(&raw_last_bal, &tmp_last_bal, sizeof(tmp_last_bal));
  if (raw_last_bal != 0) {
    total_size += 1 + 4;
  }

  // float balance = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_balance = this->_internal_balance();
  uint32_t raw_balance;
  memcpy(&raw_balance, &tmp_balance, sizeof(tmp_balance));
  if (raw_balance != 0) {
    total_size += 1 + 4;
  }

  // float avail_fund = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_avail_fund = this->_internal_avail_fund();
  uint32_t raw_avail_fund;
  memcpy(&raw_avail_fund, &tmp_avail_fund, sizeof(tmp_avail_fund));
  if (raw_avail_fund != 0) {
    total_size += 1 + 4;
  }

  // float get_fund = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_get_fund = this->_internal_get_fund();
  uint32_t raw_get_fund;
  memcpy(&raw_get_fund, &tmp_get_fund, sizeof(tmp_get_fund));
  if (raw_get_fund != 0) {
    total_size += 1 + 4;
  }

  // float base_margin = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_margin = this->_internal_base_margin();
  uint32_t raw_base_margin;
  memcpy(&raw_base_margin, &tmp_base_margin, sizeof(tmp_base_margin));
  if (raw_base_margin != 0) {
    total_size += 1 + 4;
  }

  // float income_expense = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_income_expense = this->_internal_income_expense();
  uint32_t raw_income_expense;
  memcpy(&raw_income_expense, &tmp_income_expense, sizeof(tmp_income_expense));
  if (raw_income_expense != 0) {
    total_size += 1 + 4;
  }

  // float froze_fund = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_froze_fund = this->_internal_froze_fund();
  uint32_t raw_froze_fund;
  memcpy(&raw_froze_fund, &tmp_froze_fund, sizeof(tmp_froze_fund));
  if (raw_froze_fund != 0) {
    total_size += 1 + 4;
  }

  // float margin = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_margin = this->_internal_margin();
  uint32_t raw_margin;
  memcpy(&raw_margin, &tmp_margin, sizeof(tmp_margin));
  if (raw_margin != 0) {
    total_size += 1 + 4;
  }

  // float fee = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fee = this->_internal_fee();
  uint32_t raw_fee;
  memcpy(&raw_fee, &tmp_fee, sizeof(tmp_fee));
  if (raw_fee != 0) {
    total_size += 1 + 4;
  }

  // float reserve = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_reserve = this->_internal_reserve();
  uint32_t raw_reserve;
  memcpy(&raw_reserve, &tmp_reserve, sizeof(tmp_reserve));
  if (raw_reserve != 0) {
    total_size += 1 + 4;
  }

  // float surplus = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_surplus = this->_internal_surplus();
  uint32_t raw_surplus;
  memcpy(&raw_surplus, &tmp_surplus, sizeof(tmp_surplus));
  if (raw_surplus != 0) {
    total_size += 1 + 4;
  }

  // float float_surplus = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_float_surplus = this->_internal_float_surplus();
  uint32_t raw_float_surplus;
  memcpy(&raw_float_surplus, &tmp_float_surplus, sizeof(tmp_float_surplus));
  if (raw_float_surplus != 0) {
    total_size += 2 + 4;
  }

  // float inte_integral = 17;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_inte_integral = this->_internal_inte_integral();
  uint32_t raw_inte_integral;
  memcpy(&raw_inte_integral, &tmp_inte_integral, sizeof(tmp_inte_integral));
  if (raw_inte_integral != 0) {
    total_size += 2 + 4;
  }

  // float puni_integral = 18;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_puni_integral = this->_internal_puni_integral();
  uint32_t raw_puni_integral;
  memcpy(&raw_puni_integral, &tmp_puni_integral, sizeof(tmp_puni_integral));
  if (raw_puni_integral != 0) {
    total_size += 2 + 4;
  }

  // float incr_inte = 19;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_incr_inte = this->_internal_incr_inte();
  uint32_t raw_incr_inte;
  memcpy(&raw_incr_inte, &tmp_incr_inte, sizeof(tmp_incr_inte));
  if (raw_incr_inte != 0) {
    total_size += 2 + 4;
  }

  // float arap = 20;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_arap = this->_internal_arap();
  uint32_t raw_arap;
  memcpy(&raw_arap, &tmp_arap, sizeof(tmp_arap));
  if (raw_arap != 0) {
    total_size += 2 + 4;
  }

  // uint32 risk_level = 21;
  if (this->_internal_risk_level() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_risk_level());
  }

  // float risk = 22;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_risk = this->_internal_risk();
  uint32_t raw_risk;
  memcpy(&raw_risk, &tmp_risk, sizeof(tmp_risk));
  if (raw_risk != 0) {
    total_size += 2 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ficc_fund::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ficc_fund::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ficc_fund::GetClassData() const { return &_class_data_; }

void ficc_fund::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ficc_fund *>(to)->MergeFrom(
      static_cast<const ficc_fund &>(from));
}


void ficc_fund::MergeFrom(const ficc_fund& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ficc_message.ficc_fund)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_trade_acct().empty()) {
    _internal_set_trade_acct(from._internal_trade_acct());
  }
  if (!from._internal_currency().empty()) {
    _internal_set_currency(from._internal_currency());
  }
  if (!from._internal_fund_acct().empty()) {
    _internal_set_fund_acct(from._internal_fund_acct());
  }
  if (!from._internal_trade_day().empty()) {
    _internal_set_trade_day(from._internal_trade_day());
  }
  if (from._internal_has_head()) {
    _internal_mutable_head()->::message_head::head::MergeFrom(from._internal_head());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_last_bal = from._internal_last_bal();
  uint32_t raw_last_bal;
  memcpy(&raw_last_bal, &tmp_last_bal, sizeof(tmp_last_bal));
  if (raw_last_bal != 0) {
    _internal_set_last_bal(from._internal_last_bal());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_balance = from._internal_balance();
  uint32_t raw_balance;
  memcpy(&raw_balance, &tmp_balance, sizeof(tmp_balance));
  if (raw_balance != 0) {
    _internal_set_balance(from._internal_balance());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_avail_fund = from._internal_avail_fund();
  uint32_t raw_avail_fund;
  memcpy(&raw_avail_fund, &tmp_avail_fund, sizeof(tmp_avail_fund));
  if (raw_avail_fund != 0) {
    _internal_set_avail_fund(from._internal_avail_fund());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_get_fund = from._internal_get_fund();
  uint32_t raw_get_fund;
  memcpy(&raw_get_fund, &tmp_get_fund, sizeof(tmp_get_fund));
  if (raw_get_fund != 0) {
    _internal_set_get_fund(from._internal_get_fund());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_base_margin = from._internal_base_margin();
  uint32_t raw_base_margin;
  memcpy(&raw_base_margin, &tmp_base_margin, sizeof(tmp_base_margin));
  if (raw_base_margin != 0) {
    _internal_set_base_margin(from._internal_base_margin());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_income_expense = from._internal_income_expense();
  uint32_t raw_income_expense;
  memcpy(&raw_income_expense, &tmp_income_expense, sizeof(tmp_income_expense));
  if (raw_income_expense != 0) {
    _internal_set_income_expense(from._internal_income_expense());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_froze_fund = from._internal_froze_fund();
  uint32_t raw_froze_fund;
  memcpy(&raw_froze_fund, &tmp_froze_fund, sizeof(tmp_froze_fund));
  if (raw_froze_fund != 0) {
    _internal_set_froze_fund(from._internal_froze_fund());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_margin = from._internal_margin();
  uint32_t raw_margin;
  memcpy(&raw_margin, &tmp_margin, sizeof(tmp_margin));
  if (raw_margin != 0) {
    _internal_set_margin(from._internal_margin());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fee = from._internal_fee();
  uint32_t raw_fee;
  memcpy(&raw_fee, &tmp_fee, sizeof(tmp_fee));
  if (raw_fee != 0) {
    _internal_set_fee(from._internal_fee());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_reserve = from._internal_reserve();
  uint32_t raw_reserve;
  memcpy(&raw_reserve, &tmp_reserve, sizeof(tmp_reserve));
  if (raw_reserve != 0) {
    _internal_set_reserve(from._internal_reserve());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_surplus = from._internal_surplus();
  uint32_t raw_surplus;
  memcpy(&raw_surplus, &tmp_surplus, sizeof(tmp_surplus));
  if (raw_surplus != 0) {
    _internal_set_surplus(from._internal_surplus());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_float_surplus = from._internal_float_surplus();
  uint32_t raw_float_surplus;
  memcpy(&raw_float_surplus, &tmp_float_surplus, sizeof(tmp_float_surplus));
  if (raw_float_surplus != 0) {
    _internal_set_float_surplus(from._internal_float_surplus());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_inte_integral = from._internal_inte_integral();
  uint32_t raw_inte_integral;
  memcpy(&raw_inte_integral, &tmp_inte_integral, sizeof(tmp_inte_integral));
  if (raw_inte_integral != 0) {
    _internal_set_inte_integral(from._internal_inte_integral());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_puni_integral = from._internal_puni_integral();
  uint32_t raw_puni_integral;
  memcpy(&raw_puni_integral, &tmp_puni_integral, sizeof(tmp_puni_integral));
  if (raw_puni_integral != 0) {
    _internal_set_puni_integral(from._internal_puni_integral());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_incr_inte = from._internal_incr_inte();
  uint32_t raw_incr_inte;
  memcpy(&raw_incr_inte, &tmp_incr_inte, sizeof(tmp_incr_inte));
  if (raw_incr_inte != 0) {
    _internal_set_incr_inte(from._internal_incr_inte());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_arap = from._internal_arap();
  uint32_t raw_arap;
  memcpy(&raw_arap, &tmp_arap, sizeof(tmp_arap));
  if (raw_arap != 0) {
    _internal_set_arap(from._internal_arap());
  }
  if (from._internal_risk_level() != 0) {
    _internal_set_risk_level(from._internal_risk_level());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_risk = from._internal_risk();
  uint32_t raw_risk;
  memcpy(&raw_risk, &tmp_risk, sizeof(tmp_risk));
  if (raw_risk != 0) {
    _internal_set_risk(from._internal_risk());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ficc_fund::CopyFrom(const ficc_fund& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ficc_message.ficc_fund)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ficc_fund::IsInitialized() const {
  return true;
}

void ficc_fund::InternalSwap(ficc_fund* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trade_acct_, lhs_arena,
      &other->trade_acct_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &currency_, lhs_arena,
      &other->currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &fund_acct_, lhs_arena,
      &other->fund_acct_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trade_day_, lhs_arena,
      &other->trade_day_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ficc_fund, risk_)
      + sizeof(ficc_fund::risk_)
      - PROTOBUF_FIELD_OFFSET(ficc_fund, head_)>(
          reinterpret_cast<char*>(&head_),
          reinterpret_cast<char*>(&other->head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ficc_fund::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ficc_2eproto_getter, &descriptor_table_ficc_2eproto_once,
      file_level_metadata_ficc_2eproto[12]);
}

// ===================================================================

class ficc_position::_Internal {
 public:
  static const ::message_head::head& head(const ficc_position* msg);
};

const ::message_head::head&
ficc_position::_Internal::head(const ficc_position* msg) {
  return *msg->head_;
}
void ficc_position::clear_head() {
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
}
ficc_position::ficc_position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ficc_message.ficc_position)
}
ficc_position::ficc_position(const ficc_position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trading_day_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trading_day_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trading_day().empty()) {
    trading_day_.Set(from._internal_trading_day(), 
      GetArenaForAllocation());
  }
  trade_acct_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trade_acct_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trade_acct().empty()) {
    trade_acct_.Set(from._internal_trade_acct(), 
      GetArenaForAllocation());
  }
  secu_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secu_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secu_code().empty()) {
    secu_code_.Set(from._internal_secu_code(), 
      GetArenaForAllocation());
  }
  posi_direction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    posi_direction_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_posi_direction().empty()) {
    posi_direction_.Set(from._internal_posi_direction(), 
      GetArenaForAllocation());
  }
  hedge_flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hedge_flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hedge_flag().empty()) {
    hedge_flag_.Set(from._internal_hedge_flag(), 
      GetArenaForAllocation());
  }
  posi_date_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    posi_date_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_posi_date_type().empty()) {
    posi_date_type_.Set(from._internal_posi_date_type(), 
      GetArenaForAllocation());
  }
  fund_acct_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fund_acct_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fund_acct().empty()) {
    fund_acct_.Set(from._internal_fund_acct(), 
      GetArenaForAllocation());
  }
  ex_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ex_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ex_code().empty()) {
    ex_code_.Set(from._internal_ex_code(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_head()) {
    head_ = new ::message_head::head(*from.head_);
  } else {
    head_ = nullptr;
  }
  ::memcpy(&posi_profit_by_date_, &from.posi_profit_by_date_,
    static_cast<size_t>(reinterpret_cast<char*>(&margin_rate_by_money_) -
    reinterpret_cast<char*>(&posi_profit_by_date_)) + sizeof(margin_rate_by_money_));
  // @@protoc_insertion_point(copy_constructor:ficc_message.ficc_position)
}

inline void ficc_position::SharedCtor() {
trading_day_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trading_day_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
trade_acct_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trade_acct_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secu_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secu_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
posi_direction_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  posi_direction_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
hedge_flag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hedge_flag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
posi_date_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  posi_date_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
fund_acct_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fund_acct_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ex_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ex_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&head_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&margin_rate_by_money_) -
    reinterpret_cast<char*>(&head_)) + sizeof(margin_rate_by_money_));
}

ficc_position::~ficc_position() {
  // @@protoc_insertion_point(destructor:ficc_message.ficc_position)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ficc_position::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  trading_day_.Destroy();
  trade_acct_.Destroy();
  secu_code_.Destroy();
  posi_direction_.Destroy();
  hedge_flag_.Destroy();
  posi_date_type_.Destroy();
  fund_acct_.Destroy();
  ex_code_.Destroy();
  if (this != internal_default_instance()) delete head_;
}

void ficc_position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ficc_position::Clear() {
// @@protoc_insertion_point(message_clear_start:ficc_message.ficc_position)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trading_day_.ClearToEmpty();
  trade_acct_.ClearToEmpty();
  secu_code_.ClearToEmpty();
  posi_direction_.ClearToEmpty();
  hedge_flag_.ClearToEmpty();
  posi_date_type_.ClearToEmpty();
  fund_acct_.ClearToEmpty();
  ex_code_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  ::memset(&posi_profit_by_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&margin_rate_by_money_) -
      reinterpret_cast<char*>(&posi_profit_by_date_)) + sizeof(margin_rate_by_money_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ficc_position::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message_head.head head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string trading_day = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_trading_day();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_position.trading_day"));
        } else
          goto handle_unusual;
        continue;
      // string trade_acct = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_trade_acct();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_position.trade_acct"));
        } else
          goto handle_unusual;
        continue;
      // string secu_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_secu_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_position.secu_code"));
        } else
          goto handle_unusual;
        continue;
      // string posi_direction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_posi_direction();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_position.posi_direction"));
        } else
          goto handle_unusual;
        continue;
      // string hedge_flag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_hedge_flag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_position.hedge_flag"));
        } else
          goto handle_unusual;
        continue;
      // string posi_date_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_posi_date_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_position.posi_date_type"));
        } else
          goto handle_unusual;
        continue;
      // string fund_acct = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_fund_acct();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_position.fund_acct"));
        } else
          goto handle_unusual;
        continue;
      // string ex_code = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_ex_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_position.ex_code"));
        } else
          goto handle_unusual;
        continue;
      // float posi_profit_by_date = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          posi_profit_by_date_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float posi_profit_by_trade = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          posi_profit_by_trade_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float close_profit_by_date = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          close_profit_by_date_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float close_profit_by_trade = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          close_profit_by_trade_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 last_position = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          last_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 posi_vol = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          posi_vol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 today_position = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          today_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 frozen_position = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          frozen_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float frozen_amount = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          frozen_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 open_vol = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          open_vol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 close_vol = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          close_vol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float open_amount = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 173)) {
          open_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float close_amount = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 181)) {
          close_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float posi_cost = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 189)) {
          posi_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float open_cost = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 197)) {
          open_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pre_margin = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 205)) {
          pre_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float use_margin = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 213)) {
          use_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float frozen_margin = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 221)) {
          frozen_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float frozen_cash = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 229)) {
          frozen_cash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float frozen_fee = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 237)) {
          frozen_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float adjust = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 245)) {
          adjust_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float trade_fee = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 253)) {
          trade_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pre_settlement_price = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 5)) {
          pre_settlement_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 long_frozen = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          long_frozen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 short_frozen = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          short_frozen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float long_frozen_amount = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          long_frozen_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float short_frozen_amount = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          short_frozen_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float margin_rate_by_vol = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          margin_rate_by_vol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float margin_rate_by_money = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          margin_rate_by_money_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ficc_position::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ficc_message.ficc_position)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // string trading_day = 2;
  if (!this->_internal_trading_day().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trading_day().data(), static_cast<int>(this->_internal_trading_day().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_position.trading_day");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_trading_day(), target);
  }

  // string trade_acct = 3;
  if (!this->_internal_trade_acct().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trade_acct().data(), static_cast<int>(this->_internal_trade_acct().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_position.trade_acct");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_trade_acct(), target);
  }

  // string secu_code = 4;
  if (!this->_internal_secu_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secu_code().data(), static_cast<int>(this->_internal_secu_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_position.secu_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_secu_code(), target);
  }

  // string posi_direction = 5;
  if (!this->_internal_posi_direction().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_posi_direction().data(), static_cast<int>(this->_internal_posi_direction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_position.posi_direction");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_posi_direction(), target);
  }

  // string hedge_flag = 6;
  if (!this->_internal_hedge_flag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hedge_flag().data(), static_cast<int>(this->_internal_hedge_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_position.hedge_flag");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_hedge_flag(), target);
  }

  // string posi_date_type = 7;
  if (!this->_internal_posi_date_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_posi_date_type().data(), static_cast<int>(this->_internal_posi_date_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_position.posi_date_type");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_posi_date_type(), target);
  }

  // string fund_acct = 8;
  if (!this->_internal_fund_acct().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fund_acct().data(), static_cast<int>(this->_internal_fund_acct().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_position.fund_acct");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_fund_acct(), target);
  }

  // string ex_code = 9;
  if (!this->_internal_ex_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ex_code().data(), static_cast<int>(this->_internal_ex_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_position.ex_code");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_ex_code(), target);
  }

  // float posi_profit_by_date = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posi_profit_by_date = this->_internal_posi_profit_by_date();
  uint32_t raw_posi_profit_by_date;
  memcpy(&raw_posi_profit_by_date, &tmp_posi_profit_by_date, sizeof(tmp_posi_profit_by_date));
  if (raw_posi_profit_by_date != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_posi_profit_by_date(), target);
  }

  // float posi_profit_by_trade = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posi_profit_by_trade = this->_internal_posi_profit_by_trade();
  uint32_t raw_posi_profit_by_trade;
  memcpy(&raw_posi_profit_by_trade, &tmp_posi_profit_by_trade, sizeof(tmp_posi_profit_by_trade));
  if (raw_posi_profit_by_trade != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_posi_profit_by_trade(), target);
  }

  // float close_profit_by_date = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_close_profit_by_date = this->_internal_close_profit_by_date();
  uint32_t raw_close_profit_by_date;
  memcpy(&raw_close_profit_by_date, &tmp_close_profit_by_date, sizeof(tmp_close_profit_by_date));
  if (raw_close_profit_by_date != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_close_profit_by_date(), target);
  }

  // float close_profit_by_trade = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_close_profit_by_trade = this->_internal_close_profit_by_trade();
  uint32_t raw_close_profit_by_trade;
  memcpy(&raw_close_profit_by_trade, &tmp_close_profit_by_trade, sizeof(tmp_close_profit_by_trade));
  if (raw_close_profit_by_trade != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_close_profit_by_trade(), target);
  }

  // uint64 last_position = 14;
  if (this->_internal_last_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(14, this->_internal_last_position(), target);
  }

  // uint64 posi_vol = 15;
  if (this->_internal_posi_vol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(15, this->_internal_posi_vol(), target);
  }

  // uint64 today_position = 16;
  if (this->_internal_today_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(16, this->_internal_today_position(), target);
  }

  // uint64 frozen_position = 17;
  if (this->_internal_frozen_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(17, this->_internal_frozen_position(), target);
  }

  // float frozen_amount = 18;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_frozen_amount = this->_internal_frozen_amount();
  uint32_t raw_frozen_amount;
  memcpy(&raw_frozen_amount, &tmp_frozen_amount, sizeof(tmp_frozen_amount));
  if (raw_frozen_amount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(18, this->_internal_frozen_amount(), target);
  }

  // uint64 open_vol = 19;
  if (this->_internal_open_vol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(19, this->_internal_open_vol(), target);
  }

  // uint64 close_vol = 20;
  if (this->_internal_close_vol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(20, this->_internal_close_vol(), target);
  }

  // float open_amount = 21;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_open_amount = this->_internal_open_amount();
  uint32_t raw_open_amount;
  memcpy(&raw_open_amount, &tmp_open_amount, sizeof(tmp_open_amount));
  if (raw_open_amount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(21, this->_internal_open_amount(), target);
  }

  // float close_amount = 22;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_close_amount = this->_internal_close_amount();
  uint32_t raw_close_amount;
  memcpy(&raw_close_amount, &tmp_close_amount, sizeof(tmp_close_amount));
  if (raw_close_amount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(22, this->_internal_close_amount(), target);
  }

  // float posi_cost = 23;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posi_cost = this->_internal_posi_cost();
  uint32_t raw_posi_cost;
  memcpy(&raw_posi_cost, &tmp_posi_cost, sizeof(tmp_posi_cost));
  if (raw_posi_cost != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(23, this->_internal_posi_cost(), target);
  }

  // float open_cost = 24;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_open_cost = this->_internal_open_cost();
  uint32_t raw_open_cost;
  memcpy(&raw_open_cost, &tmp_open_cost, sizeof(tmp_open_cost));
  if (raw_open_cost != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(24, this->_internal_open_cost(), target);
  }

  // float pre_margin = 25;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pre_margin = this->_internal_pre_margin();
  uint32_t raw_pre_margin;
  memcpy(&raw_pre_margin, &tmp_pre_margin, sizeof(tmp_pre_margin));
  if (raw_pre_margin != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(25, this->_internal_pre_margin(), target);
  }

  // float use_margin = 26;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_use_margin = this->_internal_use_margin();
  uint32_t raw_use_margin;
  memcpy(&raw_use_margin, &tmp_use_margin, sizeof(tmp_use_margin));
  if (raw_use_margin != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(26, this->_internal_use_margin(), target);
  }

  // float frozen_margin = 27;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_frozen_margin = this->_internal_frozen_margin();
  uint32_t raw_frozen_margin;
  memcpy(&raw_frozen_margin, &tmp_frozen_margin, sizeof(tmp_frozen_margin));
  if (raw_frozen_margin != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(27, this->_internal_frozen_margin(), target);
  }

  // float frozen_cash = 28;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_frozen_cash = this->_internal_frozen_cash();
  uint32_t raw_frozen_cash;
  memcpy(&raw_frozen_cash, &tmp_frozen_cash, sizeof(tmp_frozen_cash));
  if (raw_frozen_cash != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(28, this->_internal_frozen_cash(), target);
  }

  // float frozen_fee = 29;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_frozen_fee = this->_internal_frozen_fee();
  uint32_t raw_frozen_fee;
  memcpy(&raw_frozen_fee, &tmp_frozen_fee, sizeof(tmp_frozen_fee));
  if (raw_frozen_fee != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(29, this->_internal_frozen_fee(), target);
  }

  // float adjust = 30;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_adjust = this->_internal_adjust();
  uint32_t raw_adjust;
  memcpy(&raw_adjust, &tmp_adjust, sizeof(tmp_adjust));
  if (raw_adjust != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(30, this->_internal_adjust(), target);
  }

  // float trade_fee = 31;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_trade_fee = this->_internal_trade_fee();
  uint32_t raw_trade_fee;
  memcpy(&raw_trade_fee, &tmp_trade_fee, sizeof(tmp_trade_fee));
  if (raw_trade_fee != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(31, this->_internal_trade_fee(), target);
  }

  // float pre_settlement_price = 32;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pre_settlement_price = this->_internal_pre_settlement_price();
  uint32_t raw_pre_settlement_price;
  memcpy(&raw_pre_settlement_price, &tmp_pre_settlement_price, sizeof(tmp_pre_settlement_price));
  if (raw_pre_settlement_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(32, this->_internal_pre_settlement_price(), target);
  }

  // uint64 long_frozen = 33;
  if (this->_internal_long_frozen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(33, this->_internal_long_frozen(), target);
  }

  // uint64 short_frozen = 34;
  if (this->_internal_short_frozen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(34, this->_internal_short_frozen(), target);
  }

  // float long_frozen_amount = 35;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_long_frozen_amount = this->_internal_long_frozen_amount();
  uint32_t raw_long_frozen_amount;
  memcpy(&raw_long_frozen_amount, &tmp_long_frozen_amount, sizeof(tmp_long_frozen_amount));
  if (raw_long_frozen_amount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(35, this->_internal_long_frozen_amount(), target);
  }

  // float short_frozen_amount = 36;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_short_frozen_amount = this->_internal_short_frozen_amount();
  uint32_t raw_short_frozen_amount;
  memcpy(&raw_short_frozen_amount, &tmp_short_frozen_amount, sizeof(tmp_short_frozen_amount));
  if (raw_short_frozen_amount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(36, this->_internal_short_frozen_amount(), target);
  }

  // float margin_rate_by_vol = 37;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_margin_rate_by_vol = this->_internal_margin_rate_by_vol();
  uint32_t raw_margin_rate_by_vol;
  memcpy(&raw_margin_rate_by_vol, &tmp_margin_rate_by_vol, sizeof(tmp_margin_rate_by_vol));
  if (raw_margin_rate_by_vol != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(37, this->_internal_margin_rate_by_vol(), target);
  }

  // float margin_rate_by_money = 38;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_margin_rate_by_money = this->_internal_margin_rate_by_money();
  uint32_t raw_margin_rate_by_money;
  memcpy(&raw_margin_rate_by_money, &tmp_margin_rate_by_money, sizeof(tmp_margin_rate_by_money));
  if (raw_margin_rate_by_money != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(38, this->_internal_margin_rate_by_money(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ficc_message.ficc_position)
  return target;
}

size_t ficc_position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ficc_message.ficc_position)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trading_day = 2;
  if (!this->_internal_trading_day().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trading_day());
  }

  // string trade_acct = 3;
  if (!this->_internal_trade_acct().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trade_acct());
  }

  // string secu_code = 4;
  if (!this->_internal_secu_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secu_code());
  }

  // string posi_direction = 5;
  if (!this->_internal_posi_direction().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_posi_direction());
  }

  // string hedge_flag = 6;
  if (!this->_internal_hedge_flag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hedge_flag());
  }

  // string posi_date_type = 7;
  if (!this->_internal_posi_date_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_posi_date_type());
  }

  // string fund_acct = 8;
  if (!this->_internal_fund_acct().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fund_acct());
  }

  // string ex_code = 9;
  if (!this->_internal_ex_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ex_code());
  }

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  // float posi_profit_by_date = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posi_profit_by_date = this->_internal_posi_profit_by_date();
  uint32_t raw_posi_profit_by_date;
  memcpy(&raw_posi_profit_by_date, &tmp_posi_profit_by_date, sizeof(tmp_posi_profit_by_date));
  if (raw_posi_profit_by_date != 0) {
    total_size += 1 + 4;
  }

  // float posi_profit_by_trade = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posi_profit_by_trade = this->_internal_posi_profit_by_trade();
  uint32_t raw_posi_profit_by_trade;
  memcpy(&raw_posi_profit_by_trade, &tmp_posi_profit_by_trade, sizeof(tmp_posi_profit_by_trade));
  if (raw_posi_profit_by_trade != 0) {
    total_size += 1 + 4;
  }

  // float close_profit_by_date = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_close_profit_by_date = this->_internal_close_profit_by_date();
  uint32_t raw_close_profit_by_date;
  memcpy(&raw_close_profit_by_date, &tmp_close_profit_by_date, sizeof(tmp_close_profit_by_date));
  if (raw_close_profit_by_date != 0) {
    total_size += 1 + 4;
  }

  // float close_profit_by_trade = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_close_profit_by_trade = this->_internal_close_profit_by_trade();
  uint32_t raw_close_profit_by_trade;
  memcpy(&raw_close_profit_by_trade, &tmp_close_profit_by_trade, sizeof(tmp_close_profit_by_trade));
  if (raw_close_profit_by_trade != 0) {
    total_size += 1 + 4;
  }

  // uint64 last_position = 14;
  if (this->_internal_last_position() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_last_position());
  }

  // uint64 posi_vol = 15;
  if (this->_internal_posi_vol() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_posi_vol());
  }

  // uint64 today_position = 16;
  if (this->_internal_today_position() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_today_position());
  }

  // uint64 frozen_position = 17;
  if (this->_internal_frozen_position() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_frozen_position());
  }

  // uint64 open_vol = 19;
  if (this->_internal_open_vol() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_open_vol());
  }

  // float frozen_amount = 18;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_frozen_amount = this->_internal_frozen_amount();
  uint32_t raw_frozen_amount;
  memcpy(&raw_frozen_amount, &tmp_frozen_amount, sizeof(tmp_frozen_amount));
  if (raw_frozen_amount != 0) {
    total_size += 2 + 4;
  }

  // float open_amount = 21;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_open_amount = this->_internal_open_amount();
  uint32_t raw_open_amount;
  memcpy(&raw_open_amount, &tmp_open_amount, sizeof(tmp_open_amount));
  if (raw_open_amount != 0) {
    total_size += 2 + 4;
  }

  // uint64 close_vol = 20;
  if (this->_internal_close_vol() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_close_vol());
  }

  // float close_amount = 22;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_close_amount = this->_internal_close_amount();
  uint32_t raw_close_amount;
  memcpy(&raw_close_amount, &tmp_close_amount, sizeof(tmp_close_amount));
  if (raw_close_amount != 0) {
    total_size += 2 + 4;
  }

  // float posi_cost = 23;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posi_cost = this->_internal_posi_cost();
  uint32_t raw_posi_cost;
  memcpy(&raw_posi_cost, &tmp_posi_cost, sizeof(tmp_posi_cost));
  if (raw_posi_cost != 0) {
    total_size += 2 + 4;
  }

  // float open_cost = 24;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_open_cost = this->_internal_open_cost();
  uint32_t raw_open_cost;
  memcpy(&raw_open_cost, &tmp_open_cost, sizeof(tmp_open_cost));
  if (raw_open_cost != 0) {
    total_size += 2 + 4;
  }

  // float pre_margin = 25;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pre_margin = this->_internal_pre_margin();
  uint32_t raw_pre_margin;
  memcpy(&raw_pre_margin, &tmp_pre_margin, sizeof(tmp_pre_margin));
  if (raw_pre_margin != 0) {
    total_size += 2 + 4;
  }

  // float use_margin = 26;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_use_margin = this->_internal_use_margin();
  uint32_t raw_use_margin;
  memcpy(&raw_use_margin, &tmp_use_margin, sizeof(tmp_use_margin));
  if (raw_use_margin != 0) {
    total_size += 2 + 4;
  }

  // float frozen_margin = 27;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_frozen_margin = this->_internal_frozen_margin();
  uint32_t raw_frozen_margin;
  memcpy(&raw_frozen_margin, &tmp_frozen_margin, sizeof(tmp_frozen_margin));
  if (raw_frozen_margin != 0) {
    total_size += 2 + 4;
  }

  // float frozen_cash = 28;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_frozen_cash = this->_internal_frozen_cash();
  uint32_t raw_frozen_cash;
  memcpy(&raw_frozen_cash, &tmp_frozen_cash, sizeof(tmp_frozen_cash));
  if (raw_frozen_cash != 0) {
    total_size += 2 + 4;
  }

  // float frozen_fee = 29;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_frozen_fee = this->_internal_frozen_fee();
  uint32_t raw_frozen_fee;
  memcpy(&raw_frozen_fee, &tmp_frozen_fee, sizeof(tmp_frozen_fee));
  if (raw_frozen_fee != 0) {
    total_size += 2 + 4;
  }

  // float adjust = 30;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_adjust = this->_internal_adjust();
  uint32_t raw_adjust;
  memcpy(&raw_adjust, &tmp_adjust, sizeof(tmp_adjust));
  if (raw_adjust != 0) {
    total_size += 2 + 4;
  }

  // float trade_fee = 31;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_trade_fee = this->_internal_trade_fee();
  uint32_t raw_trade_fee;
  memcpy(&raw_trade_fee, &tmp_trade_fee, sizeof(tmp_trade_fee));
  if (raw_trade_fee != 0) {
    total_size += 2 + 4;
  }

  // uint64 long_frozen = 33;
  if (this->_internal_long_frozen() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_long_frozen());
  }

  // float pre_settlement_price = 32;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pre_settlement_price = this->_internal_pre_settlement_price();
  uint32_t raw_pre_settlement_price;
  memcpy(&raw_pre_settlement_price, &tmp_pre_settlement_price, sizeof(tmp_pre_settlement_price));
  if (raw_pre_settlement_price != 0) {
    total_size += 2 + 4;
  }

  // float long_frozen_amount = 35;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_long_frozen_amount = this->_internal_long_frozen_amount();
  uint32_t raw_long_frozen_amount;
  memcpy(&raw_long_frozen_amount, &tmp_long_frozen_amount, sizeof(tmp_long_frozen_amount));
  if (raw_long_frozen_amount != 0) {
    total_size += 2 + 4;
  }

  // uint64 short_frozen = 34;
  if (this->_internal_short_frozen() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_short_frozen());
  }

  // float short_frozen_amount = 36;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_short_frozen_amount = this->_internal_short_frozen_amount();
  uint32_t raw_short_frozen_amount;
  memcpy(&raw_short_frozen_amount, &tmp_short_frozen_amount, sizeof(tmp_short_frozen_amount));
  if (raw_short_frozen_amount != 0) {
    total_size += 2 + 4;
  }

  // float margin_rate_by_vol = 37;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_margin_rate_by_vol = this->_internal_margin_rate_by_vol();
  uint32_t raw_margin_rate_by_vol;
  memcpy(&raw_margin_rate_by_vol, &tmp_margin_rate_by_vol, sizeof(tmp_margin_rate_by_vol));
  if (raw_margin_rate_by_vol != 0) {
    total_size += 2 + 4;
  }

  // float margin_rate_by_money = 38;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_margin_rate_by_money = this->_internal_margin_rate_by_money();
  uint32_t raw_margin_rate_by_money;
  memcpy(&raw_margin_rate_by_money, &tmp_margin_rate_by_money, sizeof(tmp_margin_rate_by_money));
  if (raw_margin_rate_by_money != 0) {
    total_size += 2 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ficc_position::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ficc_position::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ficc_position::GetClassData() const { return &_class_data_; }

void ficc_position::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ficc_position *>(to)->MergeFrom(
      static_cast<const ficc_position &>(from));
}


void ficc_position::MergeFrom(const ficc_position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ficc_message.ficc_position)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_trading_day().empty()) {
    _internal_set_trading_day(from._internal_trading_day());
  }
  if (!from._internal_trade_acct().empty()) {
    _internal_set_trade_acct(from._internal_trade_acct());
  }
  if (!from._internal_secu_code().empty()) {
    _internal_set_secu_code(from._internal_secu_code());
  }
  if (!from._internal_posi_direction().empty()) {
    _internal_set_posi_direction(from._internal_posi_direction());
  }
  if (!from._internal_hedge_flag().empty()) {
    _internal_set_hedge_flag(from._internal_hedge_flag());
  }
  if (!from._internal_posi_date_type().empty()) {
    _internal_set_posi_date_type(from._internal_posi_date_type());
  }
  if (!from._internal_fund_acct().empty()) {
    _internal_set_fund_acct(from._internal_fund_acct());
  }
  if (!from._internal_ex_code().empty()) {
    _internal_set_ex_code(from._internal_ex_code());
  }
  if (from._internal_has_head()) {
    _internal_mutable_head()->::message_head::head::MergeFrom(from._internal_head());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posi_profit_by_date = from._internal_posi_profit_by_date();
  uint32_t raw_posi_profit_by_date;
  memcpy(&raw_posi_profit_by_date, &tmp_posi_profit_by_date, sizeof(tmp_posi_profit_by_date));
  if (raw_posi_profit_by_date != 0) {
    _internal_set_posi_profit_by_date(from._internal_posi_profit_by_date());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posi_profit_by_trade = from._internal_posi_profit_by_trade();
  uint32_t raw_posi_profit_by_trade;
  memcpy(&raw_posi_profit_by_trade, &tmp_posi_profit_by_trade, sizeof(tmp_posi_profit_by_trade));
  if (raw_posi_profit_by_trade != 0) {
    _internal_set_posi_profit_by_trade(from._internal_posi_profit_by_trade());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_close_profit_by_date = from._internal_close_profit_by_date();
  uint32_t raw_close_profit_by_date;
  memcpy(&raw_close_profit_by_date, &tmp_close_profit_by_date, sizeof(tmp_close_profit_by_date));
  if (raw_close_profit_by_date != 0) {
    _internal_set_close_profit_by_date(from._internal_close_profit_by_date());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_close_profit_by_trade = from._internal_close_profit_by_trade();
  uint32_t raw_close_profit_by_trade;
  memcpy(&raw_close_profit_by_trade, &tmp_close_profit_by_trade, sizeof(tmp_close_profit_by_trade));
  if (raw_close_profit_by_trade != 0) {
    _internal_set_close_profit_by_trade(from._internal_close_profit_by_trade());
  }
  if (from._internal_last_position() != 0) {
    _internal_set_last_position(from._internal_last_position());
  }
  if (from._internal_posi_vol() != 0) {
    _internal_set_posi_vol(from._internal_posi_vol());
  }
  if (from._internal_today_position() != 0) {
    _internal_set_today_position(from._internal_today_position());
  }
  if (from._internal_frozen_position() != 0) {
    _internal_set_frozen_position(from._internal_frozen_position());
  }
  if (from._internal_open_vol() != 0) {
    _internal_set_open_vol(from._internal_open_vol());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_frozen_amount = from._internal_frozen_amount();
  uint32_t raw_frozen_amount;
  memcpy(&raw_frozen_amount, &tmp_frozen_amount, sizeof(tmp_frozen_amount));
  if (raw_frozen_amount != 0) {
    _internal_set_frozen_amount(from._internal_frozen_amount());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_open_amount = from._internal_open_amount();
  uint32_t raw_open_amount;
  memcpy(&raw_open_amount, &tmp_open_amount, sizeof(tmp_open_amount));
  if (raw_open_amount != 0) {
    _internal_set_open_amount(from._internal_open_amount());
  }
  if (from._internal_close_vol() != 0) {
    _internal_set_close_vol(from._internal_close_vol());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_close_amount = from._internal_close_amount();
  uint32_t raw_close_amount;
  memcpy(&raw_close_amount, &tmp_close_amount, sizeof(tmp_close_amount));
  if (raw_close_amount != 0) {
    _internal_set_close_amount(from._internal_close_amount());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posi_cost = from._internal_posi_cost();
  uint32_t raw_posi_cost;
  memcpy(&raw_posi_cost, &tmp_posi_cost, sizeof(tmp_posi_cost));
  if (raw_posi_cost != 0) {
    _internal_set_posi_cost(from._internal_posi_cost());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_open_cost = from._internal_open_cost();
  uint32_t raw_open_cost;
  memcpy(&raw_open_cost, &tmp_open_cost, sizeof(tmp_open_cost));
  if (raw_open_cost != 0) {
    _internal_set_open_cost(from._internal_open_cost());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pre_margin = from._internal_pre_margin();
  uint32_t raw_pre_margin;
  memcpy(&raw_pre_margin, &tmp_pre_margin, sizeof(tmp_pre_margin));
  if (raw_pre_margin != 0) {
    _internal_set_pre_margin(from._internal_pre_margin());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_use_margin = from._internal_use_margin();
  uint32_t raw_use_margin;
  memcpy(&raw_use_margin, &tmp_use_margin, sizeof(tmp_use_margin));
  if (raw_use_margin != 0) {
    _internal_set_use_margin(from._internal_use_margin());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_frozen_margin = from._internal_frozen_margin();
  uint32_t raw_frozen_margin;
  memcpy(&raw_frozen_margin, &tmp_frozen_margin, sizeof(tmp_frozen_margin));
  if (raw_frozen_margin != 0) {
    _internal_set_frozen_margin(from._internal_frozen_margin());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_frozen_cash = from._internal_frozen_cash();
  uint32_t raw_frozen_cash;
  memcpy(&raw_frozen_cash, &tmp_frozen_cash, sizeof(tmp_frozen_cash));
  if (raw_frozen_cash != 0) {
    _internal_set_frozen_cash(from._internal_frozen_cash());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_frozen_fee = from._internal_frozen_fee();
  uint32_t raw_frozen_fee;
  memcpy(&raw_frozen_fee, &tmp_frozen_fee, sizeof(tmp_frozen_fee));
  if (raw_frozen_fee != 0) {
    _internal_set_frozen_fee(from._internal_frozen_fee());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_adjust = from._internal_adjust();
  uint32_t raw_adjust;
  memcpy(&raw_adjust, &tmp_adjust, sizeof(tmp_adjust));
  if (raw_adjust != 0) {
    _internal_set_adjust(from._internal_adjust());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_trade_fee = from._internal_trade_fee();
  uint32_t raw_trade_fee;
  memcpy(&raw_trade_fee, &tmp_trade_fee, sizeof(tmp_trade_fee));
  if (raw_trade_fee != 0) {
    _internal_set_trade_fee(from._internal_trade_fee());
  }
  if (from._internal_long_frozen() != 0) {
    _internal_set_long_frozen(from._internal_long_frozen());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pre_settlement_price = from._internal_pre_settlement_price();
  uint32_t raw_pre_settlement_price;
  memcpy(&raw_pre_settlement_price, &tmp_pre_settlement_price, sizeof(tmp_pre_settlement_price));
  if (raw_pre_settlement_price != 0) {
    _internal_set_pre_settlement_price(from._internal_pre_settlement_price());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_long_frozen_amount = from._internal_long_frozen_amount();
  uint32_t raw_long_frozen_amount;
  memcpy(&raw_long_frozen_amount, &tmp_long_frozen_amount, sizeof(tmp_long_frozen_amount));
  if (raw_long_frozen_amount != 0) {
    _internal_set_long_frozen_amount(from._internal_long_frozen_amount());
  }
  if (from._internal_short_frozen() != 0) {
    _internal_set_short_frozen(from._internal_short_frozen());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_short_frozen_amount = from._internal_short_frozen_amount();
  uint32_t raw_short_frozen_amount;
  memcpy(&raw_short_frozen_amount, &tmp_short_frozen_amount, sizeof(tmp_short_frozen_amount));
  if (raw_short_frozen_amount != 0) {
    _internal_set_short_frozen_amount(from._internal_short_frozen_amount());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_margin_rate_by_vol = from._internal_margin_rate_by_vol();
  uint32_t raw_margin_rate_by_vol;
  memcpy(&raw_margin_rate_by_vol, &tmp_margin_rate_by_vol, sizeof(tmp_margin_rate_by_vol));
  if (raw_margin_rate_by_vol != 0) {
    _internal_set_margin_rate_by_vol(from._internal_margin_rate_by_vol());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_margin_rate_by_money = from._internal_margin_rate_by_money();
  uint32_t raw_margin_rate_by_money;
  memcpy(&raw_margin_rate_by_money, &tmp_margin_rate_by_money, sizeof(tmp_margin_rate_by_money));
  if (raw_margin_rate_by_money != 0) {
    _internal_set_margin_rate_by_money(from._internal_margin_rate_by_money());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ficc_position::CopyFrom(const ficc_position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ficc_message.ficc_position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ficc_position::IsInitialized() const {
  return true;
}

void ficc_position::InternalSwap(ficc_position* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trading_day_, lhs_arena,
      &other->trading_day_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trade_acct_, lhs_arena,
      &other->trade_acct_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &secu_code_, lhs_arena,
      &other->secu_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &posi_direction_, lhs_arena,
      &other->posi_direction_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &hedge_flag_, lhs_arena,
      &other->hedge_flag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &posi_date_type_, lhs_arena,
      &other->posi_date_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &fund_acct_, lhs_arena,
      &other->fund_acct_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ex_code_, lhs_arena,
      &other->ex_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ficc_position, margin_rate_by_money_)
      + sizeof(ficc_position::margin_rate_by_money_)
      - PROTOBUF_FIELD_OFFSET(ficc_position, head_)>(
          reinterpret_cast<char*>(&head_),
          reinterpret_cast<char*>(&other->head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ficc_position::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ficc_2eproto_getter, &descriptor_table_ficc_2eproto_once,
      file_level_metadata_ficc_2eproto[13]);
}

// ===================================================================

class ficc_Exch_BilateralOrder_Req::_Internal {
 public:
  static const ::message_head::head& head(const ficc_Exch_BilateralOrder_Req* msg);
};

const ::message_head::head&
ficc_Exch_BilateralOrder_Req::_Internal::head(const ficc_Exch_BilateralOrder_Req* msg) {
  return *msg->head_;
}
void ficc_Exch_BilateralOrder_Req::clear_head() {
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
}
ficc_Exch_BilateralOrder_Req::ficc_Exch_BilateralOrder_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ficc_message.ficc_Exch_BilateralOrder_Req)
}
ficc_Exch_BilateralOrder_Req::ficc_Exch_BilateralOrder_Req(const ficc_Exch_BilateralOrder_Req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trade_acct_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trade_acct_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trade_acct().empty()) {
    trade_acct_.Set(from._internal_trade_acct(), 
      GetArenaForAllocation());
  }
  fund_acct_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fund_acct_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fund_acct().empty()) {
    fund_acct_.Set(from._internal_fund_acct(), 
      GetArenaForAllocation());
  }
  combino_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    combino_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_combino().empty()) {
    combino_.Set(from._internal_combino(), 
      GetArenaForAllocation());
  }
  ex_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ex_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ex_code().empty()) {
    ex_code_.Set(from._internal_ex_code(), 
      GetArenaForAllocation());
  }
  commodity_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    commodity_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_commodity_type().empty()) {
    commodity_type_.Set(from._internal_commodity_type(), 
      GetArenaForAllocation());
  }
  secu_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secu_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secu_code().empty()) {
    secu_code_.Set(from._internal_secu_code(), 
      GetArenaForAllocation());
  }
  secu_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secu_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secu_name().empty()) {
    secu_name_.Set(from._internal_secu_name(), 
      GetArenaForAllocation());
  }
  order_price_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_price_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_price_type().empty()) {
    order_price_type_.Set(from._internal_order_price_type(), 
      GetArenaForAllocation());
  }
  offset_flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    offset_flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_offset_flag().empty()) {
    offset_flag_.Set(from._internal_offset_flag(), 
      GetArenaForAllocation());
  }
  hedge_flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hedge_flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hedge_flag().empty()) {
    hedge_flag_.Set(from._internal_hedge_flag(), 
      GetArenaForAllocation());
  }
  seat_order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    seat_order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_seat_order_id().empty()) {
    seat_order_id_.Set(from._internal_seat_order_id(), 
      GetArenaForAllocation());
  }
  time_cond_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    time_cond_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_time_cond().empty()) {
    time_cond_.Set(from._internal_time_cond(), 
      GetArenaForAllocation());
  }
  text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    text_.Set(from._internal_text(), 
      GetArenaForAllocation());
  }
  order_sys_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_sys_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_sys_id().empty()) {
    order_sys_id_.Set(from._internal_order_sys_id(), 
      GetArenaForAllocation());
  }
  trade_date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trade_date_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trade_date().empty()) {
    trade_date_.Set(from._internal_trade_date(), 
      GetArenaForAllocation());
  }
  insert_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    insert_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_insert_time().empty()) {
    insert_time_.Set(from._internal_insert_time(), 
      GetArenaForAllocation());
  }
  valid_until_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    valid_until_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_valid_until_time().empty()) {
    valid_until_time_.Set(from._internal_valid_until_time(), 
      GetArenaForAllocation());
  }
  client_ref_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    client_ref_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_ref_id().empty()) {
    client_ref_id_.Set(from._internal_client_ref_id(), 
      GetArenaForAllocation());
  }
  order_source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_source().empty()) {
    order_source_.Set(from._internal_order_source(), 
      GetArenaForAllocation());
  }
  secu_type_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secu_type_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secu_type_id().empty()) {
    secu_type_id_.Set(from._internal_secu_type_id(), 
      GetArenaForAllocation());
  }
  maturity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    maturity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_maturity().empty()) {
    maturity_.Set(from._internal_maturity(), 
      GetArenaForAllocation());
  }
  issuer_party_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    issuer_party_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_issuer_party_id().empty()) {
    issuer_party_id_.Set(from._internal_issuer_party_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_head()) {
    head_ = new ::message_head::head(*from.head_);
  } else {
    head_ = nullptr;
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ask_strike_yeild_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(ask_strike_yeild_));
  // @@protoc_insertion_point(copy_constructor:ficc_message.ficc_Exch_BilateralOrder_Req)
}

inline void ficc_Exch_BilateralOrder_Req::SharedCtor() {
trade_acct_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trade_acct_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
fund_acct_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fund_acct_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
combino_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  combino_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ex_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ex_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
commodity_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  commodity_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secu_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secu_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secu_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secu_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
order_price_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_price_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
offset_flag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  offset_flag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
hedge_flag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hedge_flag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
seat_order_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  seat_order_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
time_cond_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  time_cond_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
text_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
order_sys_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_sys_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
trade_date_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trade_date_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
insert_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  insert_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
valid_until_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  valid_until_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
client_ref_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  client_ref_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
order_source_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_source_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secu_type_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secu_type_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
maturity_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  maturity_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
issuer_party_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  issuer_party_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&head_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ask_strike_yeild_) -
    reinterpret_cast<char*>(&head_)) + sizeof(ask_strike_yeild_));
}

ficc_Exch_BilateralOrder_Req::~ficc_Exch_BilateralOrder_Req() {
  // @@protoc_insertion_point(destructor:ficc_message.ficc_Exch_BilateralOrder_Req)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ficc_Exch_BilateralOrder_Req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  trade_acct_.Destroy();
  fund_acct_.Destroy();
  combino_.Destroy();
  ex_code_.Destroy();
  commodity_type_.Destroy();
  secu_code_.Destroy();
  secu_name_.Destroy();
  order_price_type_.Destroy();
  offset_flag_.Destroy();
  hedge_flag_.Destroy();
  seat_order_id_.Destroy();
  time_cond_.Destroy();
  text_.Destroy();
  order_sys_id_.Destroy();
  trade_date_.Destroy();
  insert_time_.Destroy();
  valid_until_time_.Destroy();
  client_ref_id_.Destroy();
  order_source_.Destroy();
  secu_type_id_.Destroy();
  maturity_.Destroy();
  issuer_party_id_.Destroy();
  if (this != internal_default_instance()) delete head_;
}

void ficc_Exch_BilateralOrder_Req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ficc_Exch_BilateralOrder_Req::Clear() {
// @@protoc_insertion_point(message_clear_start:ficc_message.ficc_Exch_BilateralOrder_Req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trade_acct_.ClearToEmpty();
  fund_acct_.ClearToEmpty();
  combino_.ClearToEmpty();
  ex_code_.ClearToEmpty();
  commodity_type_.ClearToEmpty();
  secu_code_.ClearToEmpty();
  secu_name_.ClearToEmpty();
  order_price_type_.ClearToEmpty();
  offset_flag_.ClearToEmpty();
  hedge_flag_.ClearToEmpty();
  seat_order_id_.ClearToEmpty();
  time_cond_.ClearToEmpty();
  text_.ClearToEmpty();
  order_sys_id_.ClearToEmpty();
  trade_date_.ClearToEmpty();
  insert_time_.ClearToEmpty();
  valid_until_time_.ClearToEmpty();
  client_ref_id_.ClearToEmpty();
  order_source_.ClearToEmpty();
  secu_type_id_.ClearToEmpty();
  maturity_.ClearToEmpty();
  issuer_party_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ask_strike_yeild_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(ask_strike_yeild_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ficc_Exch_BilateralOrder_Req::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message_head.head head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string trade_acct = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_trade_acct();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_BilateralOrder_Req.trade_acct"));
        } else
          goto handle_unusual;
        continue;
      // string fund_acct = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_fund_acct();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_BilateralOrder_Req.fund_acct"));
        } else
          goto handle_unusual;
        continue;
      // string combino = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_combino();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_BilateralOrder_Req.combino"));
        } else
          goto handle_unusual;
        continue;
      // uint32 user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ex_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_ex_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_BilateralOrder_Req.ex_code"));
        } else
          goto handle_unusual;
        continue;
      // string commodity_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_commodity_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_BilateralOrder_Req.commodity_type"));
        } else
          goto handle_unusual;
        continue;
      // string secu_code = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_secu_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_BilateralOrder_Req.secu_code"));
        } else
          goto handle_unusual;
        continue;
      // string secu_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_secu_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_BilateralOrder_Req.secu_name"));
        } else
          goto handle_unusual;
        continue;
      // string order_price_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_order_price_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_BilateralOrder_Req.order_price_type"));
        } else
          goto handle_unusual;
        continue;
      // string offset_flag = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_offset_flag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_BilateralOrder_Req.offset_flag"));
        } else
          goto handle_unusual;
        continue;
      // string hedge_flag = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_hedge_flag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_BilateralOrder_Req.hedge_flag"));
        } else
          goto handle_unusual;
        continue;
      // string seat_order_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_seat_order_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_BilateralOrder_Req.seat_order_id"));
        } else
          goto handle_unusual;
        continue;
      // float bid_price = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          bid_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 bid_vol = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          bid_vol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float ask_price = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          ask_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 ask_vol = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          ask_vol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string time_cond = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_time_cond();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_BilateralOrder_Req.time_cond"));
        } else
          goto handle_unusual;
        continue;
      // uint64 strategy_code = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          strategy_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_BilateralOrder_Req.text"));
        } else
          goto handle_unusual;
        continue;
      // string order_sys_id = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_order_sys_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_BilateralOrder_Req.order_sys_id"));
        } else
          goto handle_unusual;
        continue;
      // string trade_date = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_trade_date();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_BilateralOrder_Req.trade_date"));
        } else
          goto handle_unusual;
        continue;
      // string insert_time = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_insert_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_BilateralOrder_Req.insert_time"));
        } else
          goto handle_unusual;
        continue;
      // float bid_ytm = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 197)) {
          bid_ytm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float bid_strike_yeild = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 205)) {
          bid_strike_yeild_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 bid_legsettl_type = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          bid_legsettl_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 bid_delivery_type = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          bid_delivery_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 bid_clearing_method = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          bid_clearing_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float ask_ytm = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 237)) {
          ask_ytm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float ask_strike_yeild = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 245)) {
          ask_strike_yeild_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 ask_legsettl_type = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          ask_legsettl_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ask_delivery_type = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          ask_delivery_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ask_clearing_method = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ask_clearing_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 quote_type = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          quote_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 max_floor = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          max_floor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string valid_until_time = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_valid_until_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_BilateralOrder_Req.valid_until_time"));
        } else
          goto handle_unusual;
        continue;
      // string client_ref_id = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_client_ref_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_BilateralOrder_Req.client_ref_id"));
        } else
          goto handle_unusual;
        continue;
      // uint64 routing_type = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          routing_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 market_indicator = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          market_indicator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string order_source = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_order_source();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_BilateralOrder_Req.order_source"));
        } else
          goto handle_unusual;
        continue;
      // string secu_type_id = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_secu_type_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_BilateralOrder_Req.secu_type_id"));
        } else
          goto handle_unusual;
        continue;
      // string maturity = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_maturity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_BilateralOrder_Req.maturity"));
        } else
          goto handle_unusual;
        continue;
      // string issuer_party_id = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_issuer_party_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_BilateralOrder_Req.issuer_party_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ficc_Exch_BilateralOrder_Req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ficc_message.ficc_Exch_BilateralOrder_Req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // string trade_acct = 2;
  if (!this->_internal_trade_acct().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trade_acct().data(), static_cast<int>(this->_internal_trade_acct().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_BilateralOrder_Req.trade_acct");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_trade_acct(), target);
  }

  // string fund_acct = 3;
  if (!this->_internal_fund_acct().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fund_acct().data(), static_cast<int>(this->_internal_fund_acct().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_BilateralOrder_Req.fund_acct");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_fund_acct(), target);
  }

  // string combino = 4;
  if (!this->_internal_combino().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_combino().data(), static_cast<int>(this->_internal_combino().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_BilateralOrder_Req.combino");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_combino(), target);
  }

  // uint32 user_id = 5;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_user_id(), target);
  }

  // string ex_code = 6;
  if (!this->_internal_ex_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ex_code().data(), static_cast<int>(this->_internal_ex_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_BilateralOrder_Req.ex_code");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_ex_code(), target);
  }

  // string commodity_type = 7;
  if (!this->_internal_commodity_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_commodity_type().data(), static_cast<int>(this->_internal_commodity_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_BilateralOrder_Req.commodity_type");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_commodity_type(), target);
  }

  // string secu_code = 8;
  if (!this->_internal_secu_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secu_code().data(), static_cast<int>(this->_internal_secu_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_BilateralOrder_Req.secu_code");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_secu_code(), target);
  }

  // string secu_name = 9;
  if (!this->_internal_secu_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secu_name().data(), static_cast<int>(this->_internal_secu_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_BilateralOrder_Req.secu_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_secu_name(), target);
  }

  // string order_price_type = 10;
  if (!this->_internal_order_price_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_price_type().data(), static_cast<int>(this->_internal_order_price_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_BilateralOrder_Req.order_price_type");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_order_price_type(), target);
  }

  // string offset_flag = 11;
  if (!this->_internal_offset_flag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_offset_flag().data(), static_cast<int>(this->_internal_offset_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_BilateralOrder_Req.offset_flag");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_offset_flag(), target);
  }

  // string hedge_flag = 12;
  if (!this->_internal_hedge_flag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hedge_flag().data(), static_cast<int>(this->_internal_hedge_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_BilateralOrder_Req.hedge_flag");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_hedge_flag(), target);
  }

  // string seat_order_id = 13;
  if (!this->_internal_seat_order_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_seat_order_id().data(), static_cast<int>(this->_internal_seat_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_BilateralOrder_Req.seat_order_id");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_seat_order_id(), target);
  }

  // float bid_price = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_price = this->_internal_bid_price();
  uint32_t raw_bid_price;
  memcpy(&raw_bid_price, &tmp_bid_price, sizeof(tmp_bid_price));
  if (raw_bid_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_bid_price(), target);
  }

  // uint64 bid_vol = 15;
  if (this->_internal_bid_vol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(15, this->_internal_bid_vol(), target);
  }

  // float ask_price = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_price = this->_internal_ask_price();
  uint32_t raw_ask_price;
  memcpy(&raw_ask_price, &tmp_ask_price, sizeof(tmp_ask_price));
  if (raw_ask_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_ask_price(), target);
  }

  // uint64 ask_vol = 17;
  if (this->_internal_ask_vol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(17, this->_internal_ask_vol(), target);
  }

  // string time_cond = 18;
  if (!this->_internal_time_cond().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time_cond().data(), static_cast<int>(this->_internal_time_cond().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_BilateralOrder_Req.time_cond");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_time_cond(), target);
  }

  // uint64 strategy_code = 19;
  if (this->_internal_strategy_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(19, this->_internal_strategy_code(), target);
  }

  // string text = 20;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_BilateralOrder_Req.text");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_text(), target);
  }

  // string order_sys_id = 21;
  if (!this->_internal_order_sys_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_sys_id().data(), static_cast<int>(this->_internal_order_sys_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_BilateralOrder_Req.order_sys_id");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_order_sys_id(), target);
  }

  // string trade_date = 22;
  if (!this->_internal_trade_date().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trade_date().data(), static_cast<int>(this->_internal_trade_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_BilateralOrder_Req.trade_date");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_trade_date(), target);
  }

  // string insert_time = 23;
  if (!this->_internal_insert_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_insert_time().data(), static_cast<int>(this->_internal_insert_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_BilateralOrder_Req.insert_time");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_insert_time(), target);
  }

  // float bid_ytm = 24;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_ytm = this->_internal_bid_ytm();
  uint32_t raw_bid_ytm;
  memcpy(&raw_bid_ytm, &tmp_bid_ytm, sizeof(tmp_bid_ytm));
  if (raw_bid_ytm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(24, this->_internal_bid_ytm(), target);
  }

  // float bid_strike_yeild = 25;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_strike_yeild = this->_internal_bid_strike_yeild();
  uint32_t raw_bid_strike_yeild;
  memcpy(&raw_bid_strike_yeild, &tmp_bid_strike_yeild, sizeof(tmp_bid_strike_yeild));
  if (raw_bid_strike_yeild != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(25, this->_internal_bid_strike_yeild(), target);
  }

  // uint64 bid_legsettl_type = 26;
  if (this->_internal_bid_legsettl_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(26, this->_internal_bid_legsettl_type(), target);
  }

  // uint64 bid_delivery_type = 27;
  if (this->_internal_bid_delivery_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(27, this->_internal_bid_delivery_type(), target);
  }

  // uint64 bid_clearing_method = 28;
  if (this->_internal_bid_clearing_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(28, this->_internal_bid_clearing_method(), target);
  }

  // float ask_ytm = 29;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_ytm = this->_internal_ask_ytm();
  uint32_t raw_ask_ytm;
  memcpy(&raw_ask_ytm, &tmp_ask_ytm, sizeof(tmp_ask_ytm));
  if (raw_ask_ytm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(29, this->_internal_ask_ytm(), target);
  }

  // float ask_strike_yeild = 30;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_strike_yeild = this->_internal_ask_strike_yeild();
  uint32_t raw_ask_strike_yeild;
  memcpy(&raw_ask_strike_yeild, &tmp_ask_strike_yeild, sizeof(tmp_ask_strike_yeild));
  if (raw_ask_strike_yeild != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(30, this->_internal_ask_strike_yeild(), target);
  }

  // uint64 ask_legsettl_type = 31;
  if (this->_internal_ask_legsettl_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(31, this->_internal_ask_legsettl_type(), target);
  }

  // uint64 ask_delivery_type = 32;
  if (this->_internal_ask_delivery_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(32, this->_internal_ask_delivery_type(), target);
  }

  // uint64 ask_clearing_method = 33;
  if (this->_internal_ask_clearing_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(33, this->_internal_ask_clearing_method(), target);
  }

  // uint64 quote_type = 34;
  if (this->_internal_quote_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(34, this->_internal_quote_type(), target);
  }

  // uint64 max_floor = 35;
  if (this->_internal_max_floor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(35, this->_internal_max_floor(), target);
  }

  // string valid_until_time = 36;
  if (!this->_internal_valid_until_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_valid_until_time().data(), static_cast<int>(this->_internal_valid_until_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_BilateralOrder_Req.valid_until_time");
    target = stream->WriteStringMaybeAliased(
        36, this->_internal_valid_until_time(), target);
  }

  // string client_ref_id = 37;
  if (!this->_internal_client_ref_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_ref_id().data(), static_cast<int>(this->_internal_client_ref_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_BilateralOrder_Req.client_ref_id");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_client_ref_id(), target);
  }

  // uint64 routing_type = 38;
  if (this->_internal_routing_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(38, this->_internal_routing_type(), target);
  }

  // uint64 market_indicator = 39;
  if (this->_internal_market_indicator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(39, this->_internal_market_indicator(), target);
  }

  // string order_source = 40;
  if (!this->_internal_order_source().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_source().data(), static_cast<int>(this->_internal_order_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_BilateralOrder_Req.order_source");
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_order_source(), target);
  }

  // string secu_type_id = 41;
  if (!this->_internal_secu_type_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secu_type_id().data(), static_cast<int>(this->_internal_secu_type_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_BilateralOrder_Req.secu_type_id");
    target = stream->WriteStringMaybeAliased(
        41, this->_internal_secu_type_id(), target);
  }

  // string maturity = 42;
  if (!this->_internal_maturity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_maturity().data(), static_cast<int>(this->_internal_maturity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_BilateralOrder_Req.maturity");
    target = stream->WriteStringMaybeAliased(
        42, this->_internal_maturity(), target);
  }

  // string issuer_party_id = 43;
  if (!this->_internal_issuer_party_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_issuer_party_id().data(), static_cast<int>(this->_internal_issuer_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_BilateralOrder_Req.issuer_party_id");
    target = stream->WriteStringMaybeAliased(
        43, this->_internal_issuer_party_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ficc_message.ficc_Exch_BilateralOrder_Req)
  return target;
}

size_t ficc_Exch_BilateralOrder_Req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ficc_message.ficc_Exch_BilateralOrder_Req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trade_acct = 2;
  if (!this->_internal_trade_acct().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trade_acct());
  }

  // string fund_acct = 3;
  if (!this->_internal_fund_acct().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fund_acct());
  }

  // string combino = 4;
  if (!this->_internal_combino().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_combino());
  }

  // string ex_code = 6;
  if (!this->_internal_ex_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ex_code());
  }

  // string commodity_type = 7;
  if (!this->_internal_commodity_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_commodity_type());
  }

  // string secu_code = 8;
  if (!this->_internal_secu_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secu_code());
  }

  // string secu_name = 9;
  if (!this->_internal_secu_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secu_name());
  }

  // string order_price_type = 10;
  if (!this->_internal_order_price_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_price_type());
  }

  // string offset_flag = 11;
  if (!this->_internal_offset_flag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_offset_flag());
  }

  // string hedge_flag = 12;
  if (!this->_internal_hedge_flag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hedge_flag());
  }

  // string seat_order_id = 13;
  if (!this->_internal_seat_order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_seat_order_id());
  }

  // string time_cond = 18;
  if (!this->_internal_time_cond().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time_cond());
  }

  // string text = 20;
  if (!this->_internal_text().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string order_sys_id = 21;
  if (!this->_internal_order_sys_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_sys_id());
  }

  // string trade_date = 22;
  if (!this->_internal_trade_date().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trade_date());
  }

  // string insert_time = 23;
  if (!this->_internal_insert_time().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_insert_time());
  }

  // string valid_until_time = 36;
  if (!this->_internal_valid_until_time().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_valid_until_time());
  }

  // string client_ref_id = 37;
  if (!this->_internal_client_ref_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_ref_id());
  }

  // string order_source = 40;
  if (!this->_internal_order_source().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_source());
  }

  // string secu_type_id = 41;
  if (!this->_internal_secu_type_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secu_type_id());
  }

  // string maturity = 42;
  if (!this->_internal_maturity().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_maturity());
  }

  // string issuer_party_id = 43;
  if (!this->_internal_issuer_party_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_issuer_party_id());
  }

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  // uint32 user_id = 5;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // float bid_price = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_price = this->_internal_bid_price();
  uint32_t raw_bid_price;
  memcpy(&raw_bid_price, &tmp_bid_price, sizeof(tmp_bid_price));
  if (raw_bid_price != 0) {
    total_size += 1 + 4;
  }

  // uint64 bid_vol = 15;
  if (this->_internal_bid_vol() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bid_vol());
  }

  // uint64 ask_vol = 17;
  if (this->_internal_ask_vol() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_ask_vol());
  }

  // uint64 strategy_code = 19;
  if (this->_internal_strategy_code() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_strategy_code());
  }

  // float ask_price = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_price = this->_internal_ask_price();
  uint32_t raw_ask_price;
  memcpy(&raw_ask_price, &tmp_ask_price, sizeof(tmp_ask_price));
  if (raw_ask_price != 0) {
    total_size += 2 + 4;
  }

  // float bid_ytm = 24;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_ytm = this->_internal_bid_ytm();
  uint32_t raw_bid_ytm;
  memcpy(&raw_bid_ytm, &tmp_bid_ytm, sizeof(tmp_bid_ytm));
  if (raw_bid_ytm != 0) {
    total_size += 2 + 4;
  }

  // uint64 bid_legsettl_type = 26;
  if (this->_internal_bid_legsettl_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_bid_legsettl_type());
  }

  // uint64 bid_delivery_type = 27;
  if (this->_internal_bid_delivery_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_bid_delivery_type());
  }

  // float bid_strike_yeild = 25;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_strike_yeild = this->_internal_bid_strike_yeild();
  uint32_t raw_bid_strike_yeild;
  memcpy(&raw_bid_strike_yeild, &tmp_bid_strike_yeild, sizeof(tmp_bid_strike_yeild));
  if (raw_bid_strike_yeild != 0) {
    total_size += 2 + 4;
  }

  // float ask_ytm = 29;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_ytm = this->_internal_ask_ytm();
  uint32_t raw_ask_ytm;
  memcpy(&raw_ask_ytm, &tmp_ask_ytm, sizeof(tmp_ask_ytm));
  if (raw_ask_ytm != 0) {
    total_size += 2 + 4;
  }

  // uint64 bid_clearing_method = 28;
  if (this->_internal_bid_clearing_method() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_bid_clearing_method());
  }

  // uint64 ask_legsettl_type = 31;
  if (this->_internal_ask_legsettl_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_ask_legsettl_type());
  }

  // uint64 ask_delivery_type = 32;
  if (this->_internal_ask_delivery_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_ask_delivery_type());
  }

  // uint64 ask_clearing_method = 33;
  if (this->_internal_ask_clearing_method() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_ask_clearing_method());
  }

  // uint64 quote_type = 34;
  if (this->_internal_quote_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_quote_type());
  }

  // uint64 max_floor = 35;
  if (this->_internal_max_floor() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_max_floor());
  }

  // uint64 routing_type = 38;
  if (this->_internal_routing_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_routing_type());
  }

  // uint64 market_indicator = 39;
  if (this->_internal_market_indicator() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_market_indicator());
  }

  // float ask_strike_yeild = 30;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_strike_yeild = this->_internal_ask_strike_yeild();
  uint32_t raw_ask_strike_yeild;
  memcpy(&raw_ask_strike_yeild, &tmp_ask_strike_yeild, sizeof(tmp_ask_strike_yeild));
  if (raw_ask_strike_yeild != 0) {
    total_size += 2 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ficc_Exch_BilateralOrder_Req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ficc_Exch_BilateralOrder_Req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ficc_Exch_BilateralOrder_Req::GetClassData() const { return &_class_data_; }

void ficc_Exch_BilateralOrder_Req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ficc_Exch_BilateralOrder_Req *>(to)->MergeFrom(
      static_cast<const ficc_Exch_BilateralOrder_Req &>(from));
}


void ficc_Exch_BilateralOrder_Req::MergeFrom(const ficc_Exch_BilateralOrder_Req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ficc_message.ficc_Exch_BilateralOrder_Req)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_trade_acct().empty()) {
    _internal_set_trade_acct(from._internal_trade_acct());
  }
  if (!from._internal_fund_acct().empty()) {
    _internal_set_fund_acct(from._internal_fund_acct());
  }
  if (!from._internal_combino().empty()) {
    _internal_set_combino(from._internal_combino());
  }
  if (!from._internal_ex_code().empty()) {
    _internal_set_ex_code(from._internal_ex_code());
  }
  if (!from._internal_commodity_type().empty()) {
    _internal_set_commodity_type(from._internal_commodity_type());
  }
  if (!from._internal_secu_code().empty()) {
    _internal_set_secu_code(from._internal_secu_code());
  }
  if (!from._internal_secu_name().empty()) {
    _internal_set_secu_name(from._internal_secu_name());
  }
  if (!from._internal_order_price_type().empty()) {
    _internal_set_order_price_type(from._internal_order_price_type());
  }
  if (!from._internal_offset_flag().empty()) {
    _internal_set_offset_flag(from._internal_offset_flag());
  }
  if (!from._internal_hedge_flag().empty()) {
    _internal_set_hedge_flag(from._internal_hedge_flag());
  }
  if (!from._internal_seat_order_id().empty()) {
    _internal_set_seat_order_id(from._internal_seat_order_id());
  }
  if (!from._internal_time_cond().empty()) {
    _internal_set_time_cond(from._internal_time_cond());
  }
  if (!from._internal_text().empty()) {
    _internal_set_text(from._internal_text());
  }
  if (!from._internal_order_sys_id().empty()) {
    _internal_set_order_sys_id(from._internal_order_sys_id());
  }
  if (!from._internal_trade_date().empty()) {
    _internal_set_trade_date(from._internal_trade_date());
  }
  if (!from._internal_insert_time().empty()) {
    _internal_set_insert_time(from._internal_insert_time());
  }
  if (!from._internal_valid_until_time().empty()) {
    _internal_set_valid_until_time(from._internal_valid_until_time());
  }
  if (!from._internal_client_ref_id().empty()) {
    _internal_set_client_ref_id(from._internal_client_ref_id());
  }
  if (!from._internal_order_source().empty()) {
    _internal_set_order_source(from._internal_order_source());
  }
  if (!from._internal_secu_type_id().empty()) {
    _internal_set_secu_type_id(from._internal_secu_type_id());
  }
  if (!from._internal_maturity().empty()) {
    _internal_set_maturity(from._internal_maturity());
  }
  if (!from._internal_issuer_party_id().empty()) {
    _internal_set_issuer_party_id(from._internal_issuer_party_id());
  }
  if (from._internal_has_head()) {
    _internal_mutable_head()->::message_head::head::MergeFrom(from._internal_head());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_price = from._internal_bid_price();
  uint32_t raw_bid_price;
  memcpy(&raw_bid_price, &tmp_bid_price, sizeof(tmp_bid_price));
  if (raw_bid_price != 0) {
    _internal_set_bid_price(from._internal_bid_price());
  }
  if (from._internal_bid_vol() != 0) {
    _internal_set_bid_vol(from._internal_bid_vol());
  }
  if (from._internal_ask_vol() != 0) {
    _internal_set_ask_vol(from._internal_ask_vol());
  }
  if (from._internal_strategy_code() != 0) {
    _internal_set_strategy_code(from._internal_strategy_code());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_price = from._internal_ask_price();
  uint32_t raw_ask_price;
  memcpy(&raw_ask_price, &tmp_ask_price, sizeof(tmp_ask_price));
  if (raw_ask_price != 0) {
    _internal_set_ask_price(from._internal_ask_price());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_ytm = from._internal_bid_ytm();
  uint32_t raw_bid_ytm;
  memcpy(&raw_bid_ytm, &tmp_bid_ytm, sizeof(tmp_bid_ytm));
  if (raw_bid_ytm != 0) {
    _internal_set_bid_ytm(from._internal_bid_ytm());
  }
  if (from._internal_bid_legsettl_type() != 0) {
    _internal_set_bid_legsettl_type(from._internal_bid_legsettl_type());
  }
  if (from._internal_bid_delivery_type() != 0) {
    _internal_set_bid_delivery_type(from._internal_bid_delivery_type());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_strike_yeild = from._internal_bid_strike_yeild();
  uint32_t raw_bid_strike_yeild;
  memcpy(&raw_bid_strike_yeild, &tmp_bid_strike_yeild, sizeof(tmp_bid_strike_yeild));
  if (raw_bid_strike_yeild != 0) {
    _internal_set_bid_strike_yeild(from._internal_bid_strike_yeild());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_ytm = from._internal_ask_ytm();
  uint32_t raw_ask_ytm;
  memcpy(&raw_ask_ytm, &tmp_ask_ytm, sizeof(tmp_ask_ytm));
  if (raw_ask_ytm != 0) {
    _internal_set_ask_ytm(from._internal_ask_ytm());
  }
  if (from._internal_bid_clearing_method() != 0) {
    _internal_set_bid_clearing_method(from._internal_bid_clearing_method());
  }
  if (from._internal_ask_legsettl_type() != 0) {
    _internal_set_ask_legsettl_type(from._internal_ask_legsettl_type());
  }
  if (from._internal_ask_delivery_type() != 0) {
    _internal_set_ask_delivery_type(from._internal_ask_delivery_type());
  }
  if (from._internal_ask_clearing_method() != 0) {
    _internal_set_ask_clearing_method(from._internal_ask_clearing_method());
  }
  if (from._internal_quote_type() != 0) {
    _internal_set_quote_type(from._internal_quote_type());
  }
  if (from._internal_max_floor() != 0) {
    _internal_set_max_floor(from._internal_max_floor());
  }
  if (from._internal_routing_type() != 0) {
    _internal_set_routing_type(from._internal_routing_type());
  }
  if (from._internal_market_indicator() != 0) {
    _internal_set_market_indicator(from._internal_market_indicator());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_strike_yeild = from._internal_ask_strike_yeild();
  uint32_t raw_ask_strike_yeild;
  memcpy(&raw_ask_strike_yeild, &tmp_ask_strike_yeild, sizeof(tmp_ask_strike_yeild));
  if (raw_ask_strike_yeild != 0) {
    _internal_set_ask_strike_yeild(from._internal_ask_strike_yeild());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ficc_Exch_BilateralOrder_Req::CopyFrom(const ficc_Exch_BilateralOrder_Req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ficc_message.ficc_Exch_BilateralOrder_Req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ficc_Exch_BilateralOrder_Req::IsInitialized() const {
  return true;
}

void ficc_Exch_BilateralOrder_Req::InternalSwap(ficc_Exch_BilateralOrder_Req* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trade_acct_, lhs_arena,
      &other->trade_acct_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &fund_acct_, lhs_arena,
      &other->fund_acct_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &combino_, lhs_arena,
      &other->combino_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ex_code_, lhs_arena,
      &other->ex_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &commodity_type_, lhs_arena,
      &other->commodity_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &secu_code_, lhs_arena,
      &other->secu_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &secu_name_, lhs_arena,
      &other->secu_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_price_type_, lhs_arena,
      &other->order_price_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &offset_flag_, lhs_arena,
      &other->offset_flag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &hedge_flag_, lhs_arena,
      &other->hedge_flag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &seat_order_id_, lhs_arena,
      &other->seat_order_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &time_cond_, lhs_arena,
      &other->time_cond_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_sys_id_, lhs_arena,
      &other->order_sys_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trade_date_, lhs_arena,
      &other->trade_date_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &insert_time_, lhs_arena,
      &other->insert_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &valid_until_time_, lhs_arena,
      &other->valid_until_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &client_ref_id_, lhs_arena,
      &other->client_ref_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_source_, lhs_arena,
      &other->order_source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &secu_type_id_, lhs_arena,
      &other->secu_type_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &maturity_, lhs_arena,
      &other->maturity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &issuer_party_id_, lhs_arena,
      &other->issuer_party_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ficc_Exch_BilateralOrder_Req, ask_strike_yeild_)
      + sizeof(ficc_Exch_BilateralOrder_Req::ask_strike_yeild_)
      - PROTOBUF_FIELD_OFFSET(ficc_Exch_BilateralOrder_Req, head_)>(
          reinterpret_cast<char*>(&head_),
          reinterpret_cast<char*>(&other->head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ficc_Exch_BilateralOrder_Req::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ficc_2eproto_getter, &descriptor_table_ficc_2eproto_once,
      file_level_metadata_ficc_2eproto[14]);
}

// ===================================================================

class ficc_Exch_BilateralOrder_Rtn::_Internal {
 public:
  static const ::message_head::head& head(const ficc_Exch_BilateralOrder_Rtn* msg);
};

const ::message_head::head&
ficc_Exch_BilateralOrder_Rtn::_Internal::head(const ficc_Exch_BilateralOrder_Rtn* msg) {
  return *msg->head_;
}
void ficc_Exch_BilateralOrder_Rtn::clear_head() {
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
}
ficc_Exch_BilateralOrder_Rtn::ficc_Exch_BilateralOrder_Rtn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ficc_message.ficc_Exch_BilateralOrder_Rtn)
}
ficc_Exch_BilateralOrder_Rtn::ficc_Exch_BilateralOrder_Rtn(const ficc_Exch_BilateralOrder_Rtn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  order_status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_status().empty()) {
    order_status_.Set(from._internal_order_status(), 
      GetArenaForAllocation());
  }
  acction_flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    acction_flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_acction_flag().empty()) {
    acction_flag_.Set(from._internal_acction_flag(), 
      GetArenaForAllocation());
  }
  valid_until_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    valid_until_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_valid_until_time().empty()) {
    valid_until_time_.Set(from._internal_valid_until_time(), 
      GetArenaForAllocation());
  }
  seat_order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    seat_order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_seat_order_id().empty()) {
    seat_order_id_.Set(from._internal_seat_order_id(), 
      GetArenaForAllocation());
  }
  order_sys_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_sys_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_sys_id().empty()) {
    order_sys_id_.Set(from._internal_order_sys_id(), 
      GetArenaForAllocation());
  }
  insert_date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    insert_date_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_insert_date().empty()) {
    insert_date_.Set(from._internal_insert_date(), 
      GetArenaForAllocation());
  }
  update_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    update_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_update_time().empty()) {
    update_time_.Set(from._internal_update_time(), 
      GetArenaForAllocation());
  }
  secu_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secu_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secu_code().empty()) {
    secu_code_.Set(from._internal_secu_code(), 
      GetArenaForAllocation());
  }
  fund_acct_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fund_acct_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fund_acct().empty()) {
    fund_acct_.Set(from._internal_fund_acct(), 
      GetArenaForAllocation());
  }
  trade_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trade_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trade_id().empty()) {
    trade_id_.Set(from._internal_trade_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_head()) {
    head_ = new ::message_head::head(*from.head_);
  } else {
    head_ = nullptr;
  }
  ::memcpy(&max_floor_, &from.max_floor_,
    static_cast<size_t>(reinterpret_cast<char*>(&ask_strike_yeild_) -
    reinterpret_cast<char*>(&max_floor_)) + sizeof(ask_strike_yeild_));
  // @@protoc_insertion_point(copy_constructor:ficc_message.ficc_Exch_BilateralOrder_Rtn)
}

inline void ficc_Exch_BilateralOrder_Rtn::SharedCtor() {
order_status_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_status_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
acction_flag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  acction_flag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
valid_until_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  valid_until_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
seat_order_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  seat_order_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
order_sys_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_sys_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
insert_date_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  insert_date_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
update_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  update_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secu_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secu_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
fund_acct_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fund_acct_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
trade_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trade_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&head_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ask_strike_yeild_) -
    reinterpret_cast<char*>(&head_)) + sizeof(ask_strike_yeild_));
}

ficc_Exch_BilateralOrder_Rtn::~ficc_Exch_BilateralOrder_Rtn() {
  // @@protoc_insertion_point(destructor:ficc_message.ficc_Exch_BilateralOrder_Rtn)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ficc_Exch_BilateralOrder_Rtn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  order_status_.Destroy();
  acction_flag_.Destroy();
  valid_until_time_.Destroy();
  seat_order_id_.Destroy();
  order_sys_id_.Destroy();
  insert_date_.Destroy();
  update_time_.Destroy();
  secu_code_.Destroy();
  fund_acct_.Destroy();
  trade_id_.Destroy();
  if (this != internal_default_instance()) delete head_;
}

void ficc_Exch_BilateralOrder_Rtn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ficc_Exch_BilateralOrder_Rtn::Clear() {
// @@protoc_insertion_point(message_clear_start:ficc_message.ficc_Exch_BilateralOrder_Rtn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_status_.ClearToEmpty();
  acction_flag_.ClearToEmpty();
  valid_until_time_.ClearToEmpty();
  seat_order_id_.ClearToEmpty();
  order_sys_id_.ClearToEmpty();
  insert_date_.ClearToEmpty();
  update_time_.ClearToEmpty();
  secu_code_.ClearToEmpty();
  fund_acct_.ClearToEmpty();
  trade_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  ::memset(&max_floor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ask_strike_yeild_) -
      reinterpret_cast<char*>(&max_floor_)) + sizeof(ask_strike_yeild_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ficc_Exch_BilateralOrder_Rtn::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message_head.head head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string order_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_order_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_BilateralOrder_Rtn.order_status"));
        } else
          goto handle_unusual;
        continue;
      // string acction_flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_acction_flag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_BilateralOrder_Rtn.acction_flag"));
        } else
          goto handle_unusual;
        continue;
      // string valid_until_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_valid_until_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_BilateralOrder_Rtn.valid_until_time"));
        } else
          goto handle_unusual;
        continue;
      // string seat_order_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_seat_order_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_BilateralOrder_Rtn.seat_order_id"));
        } else
          goto handle_unusual;
        continue;
      // string order_sys_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_order_sys_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_BilateralOrder_Rtn.order_sys_id"));
        } else
          goto handle_unusual;
        continue;
      // string insert_date = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_insert_date();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_BilateralOrder_Rtn.insert_date"));
        } else
          goto handle_unusual;
        continue;
      // string update_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_update_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_BilateralOrder_Rtn.update_time"));
        } else
          goto handle_unusual;
        continue;
      // string secu_code = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_secu_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_BilateralOrder_Rtn.secu_code"));
        } else
          goto handle_unusual;
        continue;
      // uint64 max_floor = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          max_floor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 bid_vol = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          bid_vol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 bid_vol_traded = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          bid_vol_traded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 bid_vol_total = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          bid_vol_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ask_vol = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          ask_vol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ask_vol_traded = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          ask_vol_traded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ask_vol_total = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          ask_vol_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float bid_price = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          bid_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float ask_price = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          ask_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 bid_legsettl_type = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          bid_legsettl_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 bid_delivery_type = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          bid_delivery_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 bid_clearing_method = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          bid_clearing_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float bid_ytm = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 181)) {
          bid_ytm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float bid_strike_yeild = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 189)) {
          bid_strike_yeild_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 ask_legsettl_type = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          ask_legsettl_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ask_delivery_type = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          ask_delivery_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ask_clearing_method = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          ask_clearing_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float ask_ytm = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 221)) {
          ask_ytm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float ask_strike_yeild = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 229)) {
          ask_strike_yeild_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string fund_acct = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_fund_acct();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_BilateralOrder_Rtn.fund_acct"));
        } else
          goto handle_unusual;
        continue;
      // string trade_id = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_trade_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_BilateralOrder_Rtn.trade_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ficc_Exch_BilateralOrder_Rtn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ficc_message.ficc_Exch_BilateralOrder_Rtn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // string order_status = 2;
  if (!this->_internal_order_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_status().data(), static_cast<int>(this->_internal_order_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_BilateralOrder_Rtn.order_status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_order_status(), target);
  }

  // string acction_flag = 3;
  if (!this->_internal_acction_flag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_acction_flag().data(), static_cast<int>(this->_internal_acction_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_BilateralOrder_Rtn.acction_flag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_acction_flag(), target);
  }

  // string valid_until_time = 4;
  if (!this->_internal_valid_until_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_valid_until_time().data(), static_cast<int>(this->_internal_valid_until_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_BilateralOrder_Rtn.valid_until_time");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_valid_until_time(), target);
  }

  // string seat_order_id = 5;
  if (!this->_internal_seat_order_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_seat_order_id().data(), static_cast<int>(this->_internal_seat_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_BilateralOrder_Rtn.seat_order_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_seat_order_id(), target);
  }

  // string order_sys_id = 6;
  if (!this->_internal_order_sys_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_sys_id().data(), static_cast<int>(this->_internal_order_sys_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_BilateralOrder_Rtn.order_sys_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_order_sys_id(), target);
  }

  // string insert_date = 7;
  if (!this->_internal_insert_date().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_insert_date().data(), static_cast<int>(this->_internal_insert_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_BilateralOrder_Rtn.insert_date");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_insert_date(), target);
  }

  // string update_time = 8;
  if (!this->_internal_update_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_update_time().data(), static_cast<int>(this->_internal_update_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_BilateralOrder_Rtn.update_time");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_update_time(), target);
  }

  // string secu_code = 9;
  if (!this->_internal_secu_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secu_code().data(), static_cast<int>(this->_internal_secu_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_BilateralOrder_Rtn.secu_code");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_secu_code(), target);
  }

  // uint64 max_floor = 10;
  if (this->_internal_max_floor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_max_floor(), target);
  }

  // uint64 bid_vol = 11;
  if (this->_internal_bid_vol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_bid_vol(), target);
  }

  // uint64 bid_vol_traded = 12;
  if (this->_internal_bid_vol_traded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(12, this->_internal_bid_vol_traded(), target);
  }

  // uint64 bid_vol_total = 13;
  if (this->_internal_bid_vol_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(13, this->_internal_bid_vol_total(), target);
  }

  // uint64 ask_vol = 14;
  if (this->_internal_ask_vol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(14, this->_internal_ask_vol(), target);
  }

  // uint64 ask_vol_traded = 15;
  if (this->_internal_ask_vol_traded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(15, this->_internal_ask_vol_traded(), target);
  }

  // uint64 ask_vol_total = 16;
  if (this->_internal_ask_vol_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(16, this->_internal_ask_vol_total(), target);
  }

  // float bid_price = 17;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_price = this->_internal_bid_price();
  uint32_t raw_bid_price;
  memcpy(&raw_bid_price, &tmp_bid_price, sizeof(tmp_bid_price));
  if (raw_bid_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_bid_price(), target);
  }

  // float ask_price = 18;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_price = this->_internal_ask_price();
  uint32_t raw_ask_price;
  memcpy(&raw_ask_price, &tmp_ask_price, sizeof(tmp_ask_price));
  if (raw_ask_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(18, this->_internal_ask_price(), target);
  }

  // uint64 bid_legsettl_type = 19;
  if (this->_internal_bid_legsettl_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(19, this->_internal_bid_legsettl_type(), target);
  }

  // uint64 bid_delivery_type = 20;
  if (this->_internal_bid_delivery_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(20, this->_internal_bid_delivery_type(), target);
  }

  // uint64 bid_clearing_method = 21;
  if (this->_internal_bid_clearing_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(21, this->_internal_bid_clearing_method(), target);
  }

  // float bid_ytm = 22;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_ytm = this->_internal_bid_ytm();
  uint32_t raw_bid_ytm;
  memcpy(&raw_bid_ytm, &tmp_bid_ytm, sizeof(tmp_bid_ytm));
  if (raw_bid_ytm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(22, this->_internal_bid_ytm(), target);
  }

  // float bid_strike_yeild = 23;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_strike_yeild = this->_internal_bid_strike_yeild();
  uint32_t raw_bid_strike_yeild;
  memcpy(&raw_bid_strike_yeild, &tmp_bid_strike_yeild, sizeof(tmp_bid_strike_yeild));
  if (raw_bid_strike_yeild != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(23, this->_internal_bid_strike_yeild(), target);
  }

  // uint64 ask_legsettl_type = 24;
  if (this->_internal_ask_legsettl_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(24, this->_internal_ask_legsettl_type(), target);
  }

  // uint64 ask_delivery_type = 25;
  if (this->_internal_ask_delivery_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(25, this->_internal_ask_delivery_type(), target);
  }

  // uint64 ask_clearing_method = 26;
  if (this->_internal_ask_clearing_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(26, this->_internal_ask_clearing_method(), target);
  }

  // float ask_ytm = 27;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_ytm = this->_internal_ask_ytm();
  uint32_t raw_ask_ytm;
  memcpy(&raw_ask_ytm, &tmp_ask_ytm, sizeof(tmp_ask_ytm));
  if (raw_ask_ytm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(27, this->_internal_ask_ytm(), target);
  }

  // float ask_strike_yeild = 28;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_strike_yeild = this->_internal_ask_strike_yeild();
  uint32_t raw_ask_strike_yeild;
  memcpy(&raw_ask_strike_yeild, &tmp_ask_strike_yeild, sizeof(tmp_ask_strike_yeild));
  if (raw_ask_strike_yeild != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(28, this->_internal_ask_strike_yeild(), target);
  }

  // string fund_acct = 29;
  if (!this->_internal_fund_acct().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fund_acct().data(), static_cast<int>(this->_internal_fund_acct().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_BilateralOrder_Rtn.fund_acct");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_fund_acct(), target);
  }

  // string trade_id = 30;
  if (!this->_internal_trade_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trade_id().data(), static_cast<int>(this->_internal_trade_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_BilateralOrder_Rtn.trade_id");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_trade_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ficc_message.ficc_Exch_BilateralOrder_Rtn)
  return target;
}

size_t ficc_Exch_BilateralOrder_Rtn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ficc_message.ficc_Exch_BilateralOrder_Rtn)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string order_status = 2;
  if (!this->_internal_order_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_status());
  }

  // string acction_flag = 3;
  if (!this->_internal_acction_flag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_acction_flag());
  }

  // string valid_until_time = 4;
  if (!this->_internal_valid_until_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_valid_until_time());
  }

  // string seat_order_id = 5;
  if (!this->_internal_seat_order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_seat_order_id());
  }

  // string order_sys_id = 6;
  if (!this->_internal_order_sys_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_sys_id());
  }

  // string insert_date = 7;
  if (!this->_internal_insert_date().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_insert_date());
  }

  // string update_time = 8;
  if (!this->_internal_update_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_update_time());
  }

  // string secu_code = 9;
  if (!this->_internal_secu_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secu_code());
  }

  // string fund_acct = 29;
  if (!this->_internal_fund_acct().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fund_acct());
  }

  // string trade_id = 30;
  if (!this->_internal_trade_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trade_id());
  }

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  // uint64 max_floor = 10;
  if (this->_internal_max_floor() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_max_floor());
  }

  // uint64 bid_vol = 11;
  if (this->_internal_bid_vol() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bid_vol());
  }

  // uint64 bid_vol_traded = 12;
  if (this->_internal_bid_vol_traded() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bid_vol_traded());
  }

  // uint64 bid_vol_total = 13;
  if (this->_internal_bid_vol_total() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bid_vol_total());
  }

  // uint64 ask_vol = 14;
  if (this->_internal_ask_vol() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ask_vol());
  }

  // uint64 ask_vol_traded = 15;
  if (this->_internal_ask_vol_traded() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ask_vol_traded());
  }

  // uint64 ask_vol_total = 16;
  if (this->_internal_ask_vol_total() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_ask_vol_total());
  }

  // float bid_price = 17;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_price = this->_internal_bid_price();
  uint32_t raw_bid_price;
  memcpy(&raw_bid_price, &tmp_bid_price, sizeof(tmp_bid_price));
  if (raw_bid_price != 0) {
    total_size += 2 + 4;
  }

  // float ask_price = 18;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_price = this->_internal_ask_price();
  uint32_t raw_ask_price;
  memcpy(&raw_ask_price, &tmp_ask_price, sizeof(tmp_ask_price));
  if (raw_ask_price != 0) {
    total_size += 2 + 4;
  }

  // uint64 bid_legsettl_type = 19;
  if (this->_internal_bid_legsettl_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_bid_legsettl_type());
  }

  // uint64 bid_delivery_type = 20;
  if (this->_internal_bid_delivery_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_bid_delivery_type());
  }

  // uint64 bid_clearing_method = 21;
  if (this->_internal_bid_clearing_method() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_bid_clearing_method());
  }

  // float bid_ytm = 22;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_ytm = this->_internal_bid_ytm();
  uint32_t raw_bid_ytm;
  memcpy(&raw_bid_ytm, &tmp_bid_ytm, sizeof(tmp_bid_ytm));
  if (raw_bid_ytm != 0) {
    total_size += 2 + 4;
  }

  // float bid_strike_yeild = 23;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_strike_yeild = this->_internal_bid_strike_yeild();
  uint32_t raw_bid_strike_yeild;
  memcpy(&raw_bid_strike_yeild, &tmp_bid_strike_yeild, sizeof(tmp_bid_strike_yeild));
  if (raw_bid_strike_yeild != 0) {
    total_size += 2 + 4;
  }

  // uint64 ask_legsettl_type = 24;
  if (this->_internal_ask_legsettl_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_ask_legsettl_type());
  }

  // uint64 ask_delivery_type = 25;
  if (this->_internal_ask_delivery_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_ask_delivery_type());
  }

  // uint64 ask_clearing_method = 26;
  if (this->_internal_ask_clearing_method() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_ask_clearing_method());
  }

  // float ask_ytm = 27;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_ytm = this->_internal_ask_ytm();
  uint32_t raw_ask_ytm;
  memcpy(&raw_ask_ytm, &tmp_ask_ytm, sizeof(tmp_ask_ytm));
  if (raw_ask_ytm != 0) {
    total_size += 2 + 4;
  }

  // float ask_strike_yeild = 28;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_strike_yeild = this->_internal_ask_strike_yeild();
  uint32_t raw_ask_strike_yeild;
  memcpy(&raw_ask_strike_yeild, &tmp_ask_strike_yeild, sizeof(tmp_ask_strike_yeild));
  if (raw_ask_strike_yeild != 0) {
    total_size += 2 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ficc_Exch_BilateralOrder_Rtn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ficc_Exch_BilateralOrder_Rtn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ficc_Exch_BilateralOrder_Rtn::GetClassData() const { return &_class_data_; }

void ficc_Exch_BilateralOrder_Rtn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ficc_Exch_BilateralOrder_Rtn *>(to)->MergeFrom(
      static_cast<const ficc_Exch_BilateralOrder_Rtn &>(from));
}


void ficc_Exch_BilateralOrder_Rtn::MergeFrom(const ficc_Exch_BilateralOrder_Rtn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ficc_message.ficc_Exch_BilateralOrder_Rtn)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_order_status().empty()) {
    _internal_set_order_status(from._internal_order_status());
  }
  if (!from._internal_acction_flag().empty()) {
    _internal_set_acction_flag(from._internal_acction_flag());
  }
  if (!from._internal_valid_until_time().empty()) {
    _internal_set_valid_until_time(from._internal_valid_until_time());
  }
  if (!from._internal_seat_order_id().empty()) {
    _internal_set_seat_order_id(from._internal_seat_order_id());
  }
  if (!from._internal_order_sys_id().empty()) {
    _internal_set_order_sys_id(from._internal_order_sys_id());
  }
  if (!from._internal_insert_date().empty()) {
    _internal_set_insert_date(from._internal_insert_date());
  }
  if (!from._internal_update_time().empty()) {
    _internal_set_update_time(from._internal_update_time());
  }
  if (!from._internal_secu_code().empty()) {
    _internal_set_secu_code(from._internal_secu_code());
  }
  if (!from._internal_fund_acct().empty()) {
    _internal_set_fund_acct(from._internal_fund_acct());
  }
  if (!from._internal_trade_id().empty()) {
    _internal_set_trade_id(from._internal_trade_id());
  }
  if (from._internal_has_head()) {
    _internal_mutable_head()->::message_head::head::MergeFrom(from._internal_head());
  }
  if (from._internal_max_floor() != 0) {
    _internal_set_max_floor(from._internal_max_floor());
  }
  if (from._internal_bid_vol() != 0) {
    _internal_set_bid_vol(from._internal_bid_vol());
  }
  if (from._internal_bid_vol_traded() != 0) {
    _internal_set_bid_vol_traded(from._internal_bid_vol_traded());
  }
  if (from._internal_bid_vol_total() != 0) {
    _internal_set_bid_vol_total(from._internal_bid_vol_total());
  }
  if (from._internal_ask_vol() != 0) {
    _internal_set_ask_vol(from._internal_ask_vol());
  }
  if (from._internal_ask_vol_traded() != 0) {
    _internal_set_ask_vol_traded(from._internal_ask_vol_traded());
  }
  if (from._internal_ask_vol_total() != 0) {
    _internal_set_ask_vol_total(from._internal_ask_vol_total());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_price = from._internal_bid_price();
  uint32_t raw_bid_price;
  memcpy(&raw_bid_price, &tmp_bid_price, sizeof(tmp_bid_price));
  if (raw_bid_price != 0) {
    _internal_set_bid_price(from._internal_bid_price());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_price = from._internal_ask_price();
  uint32_t raw_ask_price;
  memcpy(&raw_ask_price, &tmp_ask_price, sizeof(tmp_ask_price));
  if (raw_ask_price != 0) {
    _internal_set_ask_price(from._internal_ask_price());
  }
  if (from._internal_bid_legsettl_type() != 0) {
    _internal_set_bid_legsettl_type(from._internal_bid_legsettl_type());
  }
  if (from._internal_bid_delivery_type() != 0) {
    _internal_set_bid_delivery_type(from._internal_bid_delivery_type());
  }
  if (from._internal_bid_clearing_method() != 0) {
    _internal_set_bid_clearing_method(from._internal_bid_clearing_method());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_ytm = from._internal_bid_ytm();
  uint32_t raw_bid_ytm;
  memcpy(&raw_bid_ytm, &tmp_bid_ytm, sizeof(tmp_bid_ytm));
  if (raw_bid_ytm != 0) {
    _internal_set_bid_ytm(from._internal_bid_ytm());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bid_strike_yeild = from._internal_bid_strike_yeild();
  uint32_t raw_bid_strike_yeild;
  memcpy(&raw_bid_strike_yeild, &tmp_bid_strike_yeild, sizeof(tmp_bid_strike_yeild));
  if (raw_bid_strike_yeild != 0) {
    _internal_set_bid_strike_yeild(from._internal_bid_strike_yeild());
  }
  if (from._internal_ask_legsettl_type() != 0) {
    _internal_set_ask_legsettl_type(from._internal_ask_legsettl_type());
  }
  if (from._internal_ask_delivery_type() != 0) {
    _internal_set_ask_delivery_type(from._internal_ask_delivery_type());
  }
  if (from._internal_ask_clearing_method() != 0) {
    _internal_set_ask_clearing_method(from._internal_ask_clearing_method());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_ytm = from._internal_ask_ytm();
  uint32_t raw_ask_ytm;
  memcpy(&raw_ask_ytm, &tmp_ask_ytm, sizeof(tmp_ask_ytm));
  if (raw_ask_ytm != 0) {
    _internal_set_ask_ytm(from._internal_ask_ytm());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ask_strike_yeild = from._internal_ask_strike_yeild();
  uint32_t raw_ask_strike_yeild;
  memcpy(&raw_ask_strike_yeild, &tmp_ask_strike_yeild, sizeof(tmp_ask_strike_yeild));
  if (raw_ask_strike_yeild != 0) {
    _internal_set_ask_strike_yeild(from._internal_ask_strike_yeild());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ficc_Exch_BilateralOrder_Rtn::CopyFrom(const ficc_Exch_BilateralOrder_Rtn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ficc_message.ficc_Exch_BilateralOrder_Rtn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ficc_Exch_BilateralOrder_Rtn::IsInitialized() const {
  return true;
}

void ficc_Exch_BilateralOrder_Rtn::InternalSwap(ficc_Exch_BilateralOrder_Rtn* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_status_, lhs_arena,
      &other->order_status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &acction_flag_, lhs_arena,
      &other->acction_flag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &valid_until_time_, lhs_arena,
      &other->valid_until_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &seat_order_id_, lhs_arena,
      &other->seat_order_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_sys_id_, lhs_arena,
      &other->order_sys_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &insert_date_, lhs_arena,
      &other->insert_date_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &update_time_, lhs_arena,
      &other->update_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &secu_code_, lhs_arena,
      &other->secu_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &fund_acct_, lhs_arena,
      &other->fund_acct_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trade_id_, lhs_arena,
      &other->trade_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ficc_Exch_BilateralOrder_Rtn, ask_strike_yeild_)
      + sizeof(ficc_Exch_BilateralOrder_Rtn::ask_strike_yeild_)
      - PROTOBUF_FIELD_OFFSET(ficc_Exch_BilateralOrder_Rtn, head_)>(
          reinterpret_cast<char*>(&head_),
          reinterpret_cast<char*>(&other->head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ficc_Exch_BilateralOrder_Rtn::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ficc_2eproto_getter, &descriptor_table_ficc_2eproto_once,
      file_level_metadata_ficc_2eproto[15]);
}

// ===================================================================

class ficc_Exch_Match_Rtn::_Internal {
 public:
  static const ::message_head::head& head(const ficc_Exch_Match_Rtn* msg);
};

const ::message_head::head&
ficc_Exch_Match_Rtn::_Internal::head(const ficc_Exch_Match_Rtn* msg) {
  return *msg->head_;
}
void ficc_Exch_Match_Rtn::clear_head() {
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
}
ficc_Exch_Match_Rtn::ficc_Exch_Match_Rtn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ficc_message.ficc_Exch_Match_Rtn)
}
ficc_Exch_Match_Rtn::ficc_Exch_Match_Rtn(const ficc_Exch_Match_Rtn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trade_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trade_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trade_id().empty()) {
    trade_id_.Set(from._internal_trade_id(), 
      GetArenaForAllocation());
  }
  trade_date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trade_date_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trade_date().empty()) {
    trade_date_.Set(from._internal_trade_date(), 
      GetArenaForAllocation());
  }
  trade_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trade_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trade_time().empty()) {
    trade_time_.Set(from._internal_trade_time(), 
      GetArenaForAllocation());
  }
  order_sys_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_sys_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_sys_id().empty()) {
    order_sys_id_.Set(from._internal_order_sys_id(), 
      GetArenaForAllocation());
  }
  seat_order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    seat_order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_seat_order_id().empty()) {
    seat_order_id_.Set(from._internal_seat_order_id(), 
      GetArenaForAllocation());
  }
  secu_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secu_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secu_code().empty()) {
    secu_code_.Set(from._internal_secu_code(), 
      GetArenaForAllocation());
  }
  counter_party_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    counter_party_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_counter_party_id().empty()) {
    counter_party_id_.Set(from._internal_counter_party_id(), 
      GetArenaForAllocation());
  }
  counter_party_trader_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    counter_party_trader_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_counter_party_trader().empty()) {
    counter_party_trader_.Set(from._internal_counter_party_trader(), 
      GetArenaForAllocation());
  }
  investor_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    investor_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_investor_id().empty()) {
    investor_id_.Set(from._internal_investor_id(), 
      GetArenaForAllocation());
  }
  fund_acct_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fund_acct_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fund_acct().empty()) {
    fund_acct_.Set(from._internal_fund_acct(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_head()) {
    head_ = new ::message_head::head(*from.head_);
  } else {
    head_ = nullptr;
  }
  ::memcpy(&trade_price_, &from.trade_price_,
    static_cast<size_t>(reinterpret_cast<char*>(&settle_type_) -
    reinterpret_cast<char*>(&trade_price_)) + sizeof(settle_type_));
  // @@protoc_insertion_point(copy_constructor:ficc_message.ficc_Exch_Match_Rtn)
}

inline void ficc_Exch_Match_Rtn::SharedCtor() {
trade_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trade_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
trade_date_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trade_date_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
trade_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trade_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
order_sys_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_sys_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
seat_order_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  seat_order_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secu_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secu_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
counter_party_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  counter_party_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
counter_party_trader_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  counter_party_trader_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
investor_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  investor_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
fund_acct_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fund_acct_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&head_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&settle_type_) -
    reinterpret_cast<char*>(&head_)) + sizeof(settle_type_));
}

ficc_Exch_Match_Rtn::~ficc_Exch_Match_Rtn() {
  // @@protoc_insertion_point(destructor:ficc_message.ficc_Exch_Match_Rtn)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ficc_Exch_Match_Rtn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  trade_id_.Destroy();
  trade_date_.Destroy();
  trade_time_.Destroy();
  order_sys_id_.Destroy();
  seat_order_id_.Destroy();
  secu_code_.Destroy();
  counter_party_id_.Destroy();
  counter_party_trader_.Destroy();
  investor_id_.Destroy();
  fund_acct_.Destroy();
  if (this != internal_default_instance()) delete head_;
}

void ficc_Exch_Match_Rtn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ficc_Exch_Match_Rtn::Clear() {
// @@protoc_insertion_point(message_clear_start:ficc_message.ficc_Exch_Match_Rtn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trade_id_.ClearToEmpty();
  trade_date_.ClearToEmpty();
  trade_time_.ClearToEmpty();
  order_sys_id_.ClearToEmpty();
  seat_order_id_.ClearToEmpty();
  secu_code_.ClearToEmpty();
  counter_party_id_.ClearToEmpty();
  counter_party_trader_.ClearToEmpty();
  investor_id_.ClearToEmpty();
  fund_acct_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  ::memset(&trade_price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&settle_type_) -
      reinterpret_cast<char*>(&trade_price_)) + sizeof(settle_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ficc_Exch_Match_Rtn::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message_head.head head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string trade_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_trade_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Match_Rtn.trade_id"));
        } else
          goto handle_unusual;
        continue;
      // string trade_date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_trade_date();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Match_Rtn.trade_date"));
        } else
          goto handle_unusual;
        continue;
      // string trade_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_trade_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Match_Rtn.trade_time"));
        } else
          goto handle_unusual;
        continue;
      // string order_sys_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_order_sys_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Match_Rtn.order_sys_id"));
        } else
          goto handle_unusual;
        continue;
      // string seat_order_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_seat_order_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Match_Rtn.seat_order_id"));
        } else
          goto handle_unusual;
        continue;
      // string secu_code = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_secu_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Match_Rtn.secu_code"));
        } else
          goto handle_unusual;
        continue;
      // float trade_price = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          trade_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float accrued_interest_amt = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          accrued_interest_amt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 vol_traded = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          vol_traded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string counter_party_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_counter_party_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Match_Rtn.counter_party_id"));
        } else
          goto handle_unusual;
        continue;
      // string counter_party_trader = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_counter_party_trader();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Match_Rtn.counter_party_trader"));
        } else
          goto handle_unusual;
        continue;
      // string investor_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_investor_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Match_Rtn.investor_id"));
        } else
          goto handle_unusual;
        continue;
      // string fund_acct = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_fund_acct();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Match_Rtn.fund_acct"));
        } else
          goto handle_unusual;
        continue;
      // uint64 settle_type = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          settle_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ficc_Exch_Match_Rtn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ficc_message.ficc_Exch_Match_Rtn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // string trade_id = 2;
  if (!this->_internal_trade_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trade_id().data(), static_cast<int>(this->_internal_trade_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Match_Rtn.trade_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_trade_id(), target);
  }

  // string trade_date = 3;
  if (!this->_internal_trade_date().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trade_date().data(), static_cast<int>(this->_internal_trade_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Match_Rtn.trade_date");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_trade_date(), target);
  }

  // string trade_time = 4;
  if (!this->_internal_trade_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trade_time().data(), static_cast<int>(this->_internal_trade_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Match_Rtn.trade_time");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_trade_time(), target);
  }

  // string order_sys_id = 5;
  if (!this->_internal_order_sys_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_sys_id().data(), static_cast<int>(this->_internal_order_sys_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Match_Rtn.order_sys_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_order_sys_id(), target);
  }

  // string seat_order_id = 6;
  if (!this->_internal_seat_order_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_seat_order_id().data(), static_cast<int>(this->_internal_seat_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Match_Rtn.seat_order_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_seat_order_id(), target);
  }

  // string secu_code = 7;
  if (!this->_internal_secu_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secu_code().data(), static_cast<int>(this->_internal_secu_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Match_Rtn.secu_code");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_secu_code(), target);
  }

  // float trade_price = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_trade_price = this->_internal_trade_price();
  uint32_t raw_trade_price;
  memcpy(&raw_trade_price, &tmp_trade_price, sizeof(tmp_trade_price));
  if (raw_trade_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_trade_price(), target);
  }

  // float accrued_interest_amt = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_accrued_interest_amt = this->_internal_accrued_interest_amt();
  uint32_t raw_accrued_interest_amt;
  memcpy(&raw_accrued_interest_amt, &tmp_accrued_interest_amt, sizeof(tmp_accrued_interest_amt));
  if (raw_accrued_interest_amt != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_accrued_interest_amt(), target);
  }

  // uint64 vol_traded = 10;
  if (this->_internal_vol_traded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_vol_traded(), target);
  }

  // string counter_party_id = 11;
  if (!this->_internal_counter_party_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_counter_party_id().data(), static_cast<int>(this->_internal_counter_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Match_Rtn.counter_party_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_counter_party_id(), target);
  }

  // string counter_party_trader = 12;
  if (!this->_internal_counter_party_trader().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_counter_party_trader().data(), static_cast<int>(this->_internal_counter_party_trader().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Match_Rtn.counter_party_trader");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_counter_party_trader(), target);
  }

  // string investor_id = 13;
  if (!this->_internal_investor_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_investor_id().data(), static_cast<int>(this->_internal_investor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Match_Rtn.investor_id");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_investor_id(), target);
  }

  // string fund_acct = 14;
  if (!this->_internal_fund_acct().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fund_acct().data(), static_cast<int>(this->_internal_fund_acct().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Match_Rtn.fund_acct");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_fund_acct(), target);
  }

  // uint64 settle_type = 15;
  if (this->_internal_settle_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(15, this->_internal_settle_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ficc_message.ficc_Exch_Match_Rtn)
  return target;
}

size_t ficc_Exch_Match_Rtn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ficc_message.ficc_Exch_Match_Rtn)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trade_id = 2;
  if (!this->_internal_trade_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trade_id());
  }

  // string trade_date = 3;
  if (!this->_internal_trade_date().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trade_date());
  }

  // string trade_time = 4;
  if (!this->_internal_trade_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trade_time());
  }

  // string order_sys_id = 5;
  if (!this->_internal_order_sys_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_sys_id());
  }

  // string seat_order_id = 6;
  if (!this->_internal_seat_order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_seat_order_id());
  }

  // string secu_code = 7;
  if (!this->_internal_secu_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secu_code());
  }

  // string counter_party_id = 11;
  if (!this->_internal_counter_party_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_counter_party_id());
  }

  // string counter_party_trader = 12;
  if (!this->_internal_counter_party_trader().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_counter_party_trader());
  }

  // string investor_id = 13;
  if (!this->_internal_investor_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_investor_id());
  }

  // string fund_acct = 14;
  if (!this->_internal_fund_acct().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fund_acct());
  }

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  // float trade_price = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_trade_price = this->_internal_trade_price();
  uint32_t raw_trade_price;
  memcpy(&raw_trade_price, &tmp_trade_price, sizeof(tmp_trade_price));
  if (raw_trade_price != 0) {
    total_size += 1 + 4;
  }

  // float accrued_interest_amt = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_accrued_interest_amt = this->_internal_accrued_interest_amt();
  uint32_t raw_accrued_interest_amt;
  memcpy(&raw_accrued_interest_amt, &tmp_accrued_interest_amt, sizeof(tmp_accrued_interest_amt));
  if (raw_accrued_interest_amt != 0) {
    total_size += 1 + 4;
  }

  // uint64 vol_traded = 10;
  if (this->_internal_vol_traded() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_vol_traded());
  }

  // uint64 settle_type = 15;
  if (this->_internal_settle_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_settle_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ficc_Exch_Match_Rtn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ficc_Exch_Match_Rtn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ficc_Exch_Match_Rtn::GetClassData() const { return &_class_data_; }

void ficc_Exch_Match_Rtn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ficc_Exch_Match_Rtn *>(to)->MergeFrom(
      static_cast<const ficc_Exch_Match_Rtn &>(from));
}


void ficc_Exch_Match_Rtn::MergeFrom(const ficc_Exch_Match_Rtn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ficc_message.ficc_Exch_Match_Rtn)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_trade_id().empty()) {
    _internal_set_trade_id(from._internal_trade_id());
  }
  if (!from._internal_trade_date().empty()) {
    _internal_set_trade_date(from._internal_trade_date());
  }
  if (!from._internal_trade_time().empty()) {
    _internal_set_trade_time(from._internal_trade_time());
  }
  if (!from._internal_order_sys_id().empty()) {
    _internal_set_order_sys_id(from._internal_order_sys_id());
  }
  if (!from._internal_seat_order_id().empty()) {
    _internal_set_seat_order_id(from._internal_seat_order_id());
  }
  if (!from._internal_secu_code().empty()) {
    _internal_set_secu_code(from._internal_secu_code());
  }
  if (!from._internal_counter_party_id().empty()) {
    _internal_set_counter_party_id(from._internal_counter_party_id());
  }
  if (!from._internal_counter_party_trader().empty()) {
    _internal_set_counter_party_trader(from._internal_counter_party_trader());
  }
  if (!from._internal_investor_id().empty()) {
    _internal_set_investor_id(from._internal_investor_id());
  }
  if (!from._internal_fund_acct().empty()) {
    _internal_set_fund_acct(from._internal_fund_acct());
  }
  if (from._internal_has_head()) {
    _internal_mutable_head()->::message_head::head::MergeFrom(from._internal_head());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_trade_price = from._internal_trade_price();
  uint32_t raw_trade_price;
  memcpy(&raw_trade_price, &tmp_trade_price, sizeof(tmp_trade_price));
  if (raw_trade_price != 0) {
    _internal_set_trade_price(from._internal_trade_price());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_accrued_interest_amt = from._internal_accrued_interest_amt();
  uint32_t raw_accrued_interest_amt;
  memcpy(&raw_accrued_interest_amt, &tmp_accrued_interest_amt, sizeof(tmp_accrued_interest_amt));
  if (raw_accrued_interest_amt != 0) {
    _internal_set_accrued_interest_amt(from._internal_accrued_interest_amt());
  }
  if (from._internal_vol_traded() != 0) {
    _internal_set_vol_traded(from._internal_vol_traded());
  }
  if (from._internal_settle_type() != 0) {
    _internal_set_settle_type(from._internal_settle_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ficc_Exch_Match_Rtn::CopyFrom(const ficc_Exch_Match_Rtn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ficc_message.ficc_Exch_Match_Rtn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ficc_Exch_Match_Rtn::IsInitialized() const {
  return true;
}

void ficc_Exch_Match_Rtn::InternalSwap(ficc_Exch_Match_Rtn* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trade_id_, lhs_arena,
      &other->trade_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trade_date_, lhs_arena,
      &other->trade_date_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trade_time_, lhs_arena,
      &other->trade_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_sys_id_, lhs_arena,
      &other->order_sys_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &seat_order_id_, lhs_arena,
      &other->seat_order_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &secu_code_, lhs_arena,
      &other->secu_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &counter_party_id_, lhs_arena,
      &other->counter_party_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &counter_party_trader_, lhs_arena,
      &other->counter_party_trader_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &investor_id_, lhs_arena,
      &other->investor_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &fund_acct_, lhs_arena,
      &other->fund_acct_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ficc_Exch_Match_Rtn, settle_type_)
      + sizeof(ficc_Exch_Match_Rtn::settle_type_)
      - PROTOBUF_FIELD_OFFSET(ficc_Exch_Match_Rtn, head_)>(
          reinterpret_cast<char*>(&head_),
          reinterpret_cast<char*>(&other->head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ficc_Exch_Match_Rtn::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ficc_2eproto_getter, &descriptor_table_ficc_2eproto_once,
      file_level_metadata_ficc_2eproto[16]);
}

// ===================================================================

class ficc_Exch_Order_Action::_Internal {
 public:
  static const ::message_head::head& head(const ficc_Exch_Order_Action* msg);
};

const ::message_head::head&
ficc_Exch_Order_Action::_Internal::head(const ficc_Exch_Order_Action* msg) {
  return *msg->head_;
}
void ficc_Exch_Order_Action::clear_head() {
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
}
ficc_Exch_Order_Action::ficc_Exch_Order_Action(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ficc_message.ficc_Exch_Order_Action)
}
ficc_Exch_Order_Action::ficc_Exch_Order_Action(const ficc_Exch_Order_Action& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  order_inner_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_inner_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_inner_id().empty()) {
    order_inner_id_.Set(from._internal_order_inner_id(), 
      GetArenaForAllocation());
  }
  investor_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    investor_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_investor_id().empty()) {
    investor_id_.Set(from._internal_investor_id(), 
      GetArenaForAllocation());
  }
  acction_flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    acction_flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_acction_flag().empty()) {
    acction_flag_.Set(from._internal_acction_flag(), 
      GetArenaForAllocation());
  }
  broker_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    broker_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_broker_id().empty()) {
    broker_id_.Set(from._internal_broker_id(), 
      GetArenaForAllocation());
  }
  ex_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ex_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ex_code().empty()) {
    ex_code_.Set(from._internal_ex_code(), 
      GetArenaForAllocation());
  }
  order_sys_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_sys_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_sys_id().empty()) {
    order_sys_id_.Set(from._internal_order_sys_id(), 
      GetArenaForAllocation());
  }
  trade_acct_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trade_acct_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trade_acct().empty()) {
    trade_acct_.Set(from._internal_trade_acct(), 
      GetArenaForAllocation());
  }
  secu_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secu_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secu_code().empty()) {
    secu_code_.Set(from._internal_secu_code(), 
      GetArenaForAllocation());
  }
  commodity_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    commodity_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_commodity_type().empty()) {
    commodity_type_.Set(from._internal_commodity_type(), 
      GetArenaForAllocation());
  }
  valid_until_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    valid_until_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_valid_until_time().empty()) {
    valid_until_time_.Set(from._internal_valid_until_time(), 
      GetArenaForAllocation());
  }
  insert_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    insert_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_insert_time().empty()) {
    insert_time_.Set(from._internal_insert_time(), 
      GetArenaForAllocation());
  }
  client_ref_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    client_ref_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_ref_id().empty()) {
    client_ref_id_.Set(from._internal_client_ref_id(), 
      GetArenaForAllocation());
  }
  direction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    direction_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_direction().empty()) {
    direction_.Set(from._internal_direction(), 
      GetArenaForAllocation());
  }
  quote_req_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    quote_req_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quote_req_id().empty()) {
    quote_req_id_.Set(from._internal_quote_req_id(), 
      GetArenaForAllocation());
  }
  acction_status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    acction_status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_acction_status().empty()) {
    acction_status_.Set(from._internal_acction_status(), 
      GetArenaForAllocation());
  }
  status_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    status_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status_msg().empty()) {
    status_msg_.Set(from._internal_status_msg(), 
      GetArenaForAllocation());
  }
  acction_date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    acction_date_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_acction_date().empty()) {
    acction_date_.Set(from._internal_acction_date(), 
      GetArenaForAllocation());
  }
  acction_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    acction_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_acction_time().empty()) {
    acction_time_.Set(from._internal_acction_time(), 
      GetArenaForAllocation());
  }
  trade_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trade_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trade_id().empty()) {
    trade_id_.Set(from._internal_trade_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_head()) {
    head_ = new ::message_head::head(*from.head_);
  } else {
    head_ = nullptr;
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&strike_yeild_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(strike_yeild_));
  // @@protoc_insertion_point(copy_constructor:ficc_message.ficc_Exch_Order_Action)
}

inline void ficc_Exch_Order_Action::SharedCtor() {
order_inner_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_inner_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
investor_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  investor_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
acction_flag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  acction_flag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
broker_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  broker_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ex_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ex_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
order_sys_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_sys_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
trade_acct_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trade_acct_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secu_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secu_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
commodity_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  commodity_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
valid_until_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  valid_until_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
insert_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  insert_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
client_ref_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  client_ref_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
direction_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  direction_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
quote_req_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  quote_req_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
acction_status_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  acction_status_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_msg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  status_msg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
acction_date_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  acction_date_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
acction_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  acction_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
trade_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trade_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&head_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&strike_yeild_) -
    reinterpret_cast<char*>(&head_)) + sizeof(strike_yeild_));
}

ficc_Exch_Order_Action::~ficc_Exch_Order_Action() {
  // @@protoc_insertion_point(destructor:ficc_message.ficc_Exch_Order_Action)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ficc_Exch_Order_Action::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  order_inner_id_.Destroy();
  investor_id_.Destroy();
  acction_flag_.Destroy();
  broker_id_.Destroy();
  ex_code_.Destroy();
  order_sys_id_.Destroy();
  trade_acct_.Destroy();
  secu_code_.Destroy();
  commodity_type_.Destroy();
  valid_until_time_.Destroy();
  insert_time_.Destroy();
  client_ref_id_.Destroy();
  direction_.Destroy();
  quote_req_id_.Destroy();
  acction_status_.Destroy();
  status_msg_.Destroy();
  acction_date_.Destroy();
  acction_time_.Destroy();
  trade_id_.Destroy();
  if (this != internal_default_instance()) delete head_;
}

void ficc_Exch_Order_Action::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ficc_Exch_Order_Action::Clear() {
// @@protoc_insertion_point(message_clear_start:ficc_message.ficc_Exch_Order_Action)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_inner_id_.ClearToEmpty();
  investor_id_.ClearToEmpty();
  acction_flag_.ClearToEmpty();
  broker_id_.ClearToEmpty();
  ex_code_.ClearToEmpty();
  order_sys_id_.ClearToEmpty();
  trade_acct_.ClearToEmpty();
  secu_code_.ClearToEmpty();
  commodity_type_.ClearToEmpty();
  valid_until_time_.ClearToEmpty();
  insert_time_.ClearToEmpty();
  client_ref_id_.ClearToEmpty();
  direction_.ClearToEmpty();
  quote_req_id_.ClearToEmpty();
  acction_status_.ClearToEmpty();
  status_msg_.ClearToEmpty();
  acction_date_.ClearToEmpty();
  acction_time_.ClearToEmpty();
  trade_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&strike_yeild_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(strike_yeild_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ficc_Exch_Order_Action::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message_head.head head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string order_inner_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_order_inner_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Action.order_inner_id"));
        } else
          goto handle_unusual;
        continue;
      // string investor_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_investor_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Action.investor_id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string acction_flag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_acction_flag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Action.acction_flag"));
        } else
          goto handle_unusual;
        continue;
      // float price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 vol = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          vol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string broker_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_broker_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Action.broker_id"));
        } else
          goto handle_unusual;
        continue;
      // string ex_code = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_ex_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Action.ex_code"));
        } else
          goto handle_unusual;
        continue;
      // string order_sys_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_order_sys_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Action.order_sys_id"));
        } else
          goto handle_unusual;
        continue;
      // uint64 strategy_code = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          strategy_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string trade_acct = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_trade_acct();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Action.trade_acct"));
        } else
          goto handle_unusual;
        continue;
      // string secu_code = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_secu_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Action.secu_code"));
        } else
          goto handle_unusual;
        continue;
      // string commodity_type = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_commodity_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Action.commodity_type"));
        } else
          goto handle_unusual;
        continue;
      // uint64 match_type = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          match_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 quote_type = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          quote_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string valid_until_time = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_valid_until_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Action.valid_until_time"));
        } else
          goto handle_unusual;
        continue;
      // string insert_time = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_insert_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Action.insert_time"));
        } else
          goto handle_unusual;
        continue;
      // string client_ref_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_client_ref_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Action.client_ref_id"));
        } else
          goto handle_unusual;
        continue;
      // uint64 market_indicator = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          market_indicator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string direction = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_direction();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Action.direction"));
        } else
          goto handle_unusual;
        continue;
      // string quote_req_id = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_quote_req_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Action.quote_req_id"));
        } else
          goto handle_unusual;
        continue;
      // float ytm = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 189)) {
          ytm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float strike_yeild = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 197)) {
          strike_yeild_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string acction_status = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_acction_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Action.acction_status"));
        } else
          goto handle_unusual;
        continue;
      // string status_msg = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_status_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Action.status_msg"));
        } else
          goto handle_unusual;
        continue;
      // string acction_date = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_acction_date();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Action.acction_date"));
        } else
          goto handle_unusual;
        continue;
      // string acction_time = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_acction_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Action.acction_time"));
        } else
          goto handle_unusual;
        continue;
      // string trade_id = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_trade_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Action.trade_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ficc_Exch_Order_Action::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ficc_message.ficc_Exch_Order_Action)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // string order_inner_id = 2;
  if (!this->_internal_order_inner_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_inner_id().data(), static_cast<int>(this->_internal_order_inner_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Action.order_inner_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_order_inner_id(), target);
  }

  // string investor_id = 3;
  if (!this->_internal_investor_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_investor_id().data(), static_cast<int>(this->_internal_investor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Action.investor_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_investor_id(), target);
  }

  // uint32 user_id = 4;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_user_id(), target);
  }

  // string acction_flag = 5;
  if (!this->_internal_acction_flag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_acction_flag().data(), static_cast<int>(this->_internal_acction_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Action.acction_flag");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_acction_flag(), target);
  }

  // float price = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_price = this->_internal_price();
  uint32_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_price(), target);
  }

  // uint64 vol = 7;
  if (this->_internal_vol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_vol(), target);
  }

  // string broker_id = 8;
  if (!this->_internal_broker_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_broker_id().data(), static_cast<int>(this->_internal_broker_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Action.broker_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_broker_id(), target);
  }

  // string ex_code = 9;
  if (!this->_internal_ex_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ex_code().data(), static_cast<int>(this->_internal_ex_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Action.ex_code");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_ex_code(), target);
  }

  // string order_sys_id = 10;
  if (!this->_internal_order_sys_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_sys_id().data(), static_cast<int>(this->_internal_order_sys_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Action.order_sys_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_order_sys_id(), target);
  }

  // uint64 strategy_code = 11;
  if (this->_internal_strategy_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_strategy_code(), target);
  }

  // string trade_acct = 12;
  if (!this->_internal_trade_acct().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trade_acct().data(), static_cast<int>(this->_internal_trade_acct().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Action.trade_acct");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_trade_acct(), target);
  }

  // string secu_code = 13;
  if (!this->_internal_secu_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secu_code().data(), static_cast<int>(this->_internal_secu_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Action.secu_code");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_secu_code(), target);
  }

  // string commodity_type = 14;
  if (!this->_internal_commodity_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_commodity_type().data(), static_cast<int>(this->_internal_commodity_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Action.commodity_type");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_commodity_type(), target);
  }

  // uint64 match_type = 15;
  if (this->_internal_match_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(15, this->_internal_match_type(), target);
  }

  // uint64 quote_type = 16;
  if (this->_internal_quote_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(16, this->_internal_quote_type(), target);
  }

  // string valid_until_time = 17;
  if (!this->_internal_valid_until_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_valid_until_time().data(), static_cast<int>(this->_internal_valid_until_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Action.valid_until_time");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_valid_until_time(), target);
  }

  // string insert_time = 18;
  if (!this->_internal_insert_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_insert_time().data(), static_cast<int>(this->_internal_insert_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Action.insert_time");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_insert_time(), target);
  }

  // string client_ref_id = 19;
  if (!this->_internal_client_ref_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_ref_id().data(), static_cast<int>(this->_internal_client_ref_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Action.client_ref_id");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_client_ref_id(), target);
  }

  // uint64 market_indicator = 20;
  if (this->_internal_market_indicator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(20, this->_internal_market_indicator(), target);
  }

  // string direction = 21;
  if (!this->_internal_direction().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_direction().data(), static_cast<int>(this->_internal_direction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Action.direction");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_direction(), target);
  }

  // string quote_req_id = 22;
  if (!this->_internal_quote_req_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quote_req_id().data(), static_cast<int>(this->_internal_quote_req_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Action.quote_req_id");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_quote_req_id(), target);
  }

  // float ytm = 23;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ytm = this->_internal_ytm();
  uint32_t raw_ytm;
  memcpy(&raw_ytm, &tmp_ytm, sizeof(tmp_ytm));
  if (raw_ytm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(23, this->_internal_ytm(), target);
  }

  // float strike_yeild = 24;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_strike_yeild = this->_internal_strike_yeild();
  uint32_t raw_strike_yeild;
  memcpy(&raw_strike_yeild, &tmp_strike_yeild, sizeof(tmp_strike_yeild));
  if (raw_strike_yeild != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(24, this->_internal_strike_yeild(), target);
  }

  // string acction_status = 25;
  if (!this->_internal_acction_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_acction_status().data(), static_cast<int>(this->_internal_acction_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Action.acction_status");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_acction_status(), target);
  }

  // string status_msg = 26;
  if (!this->_internal_status_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status_msg().data(), static_cast<int>(this->_internal_status_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Action.status_msg");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_status_msg(), target);
  }

  // string acction_date = 27;
  if (!this->_internal_acction_date().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_acction_date().data(), static_cast<int>(this->_internal_acction_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Action.acction_date");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_acction_date(), target);
  }

  // string acction_time = 28;
  if (!this->_internal_acction_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_acction_time().data(), static_cast<int>(this->_internal_acction_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Action.acction_time");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_acction_time(), target);
  }

  // string trade_id = 29;
  if (!this->_internal_trade_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trade_id().data(), static_cast<int>(this->_internal_trade_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Action.trade_id");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_trade_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ficc_message.ficc_Exch_Order_Action)
  return target;
}

size_t ficc_Exch_Order_Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ficc_message.ficc_Exch_Order_Action)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string order_inner_id = 2;
  if (!this->_internal_order_inner_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_inner_id());
  }

  // string investor_id = 3;
  if (!this->_internal_investor_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_investor_id());
  }

  // string acction_flag = 5;
  if (!this->_internal_acction_flag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_acction_flag());
  }

  // string broker_id = 8;
  if (!this->_internal_broker_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_broker_id());
  }

  // string ex_code = 9;
  if (!this->_internal_ex_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ex_code());
  }

  // string order_sys_id = 10;
  if (!this->_internal_order_sys_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_sys_id());
  }

  // string trade_acct = 12;
  if (!this->_internal_trade_acct().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trade_acct());
  }

  // string secu_code = 13;
  if (!this->_internal_secu_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secu_code());
  }

  // string commodity_type = 14;
  if (!this->_internal_commodity_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_commodity_type());
  }

  // string valid_until_time = 17;
  if (!this->_internal_valid_until_time().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_valid_until_time());
  }

  // string insert_time = 18;
  if (!this->_internal_insert_time().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_insert_time());
  }

  // string client_ref_id = 19;
  if (!this->_internal_client_ref_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_ref_id());
  }

  // string direction = 21;
  if (!this->_internal_direction().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_direction());
  }

  // string quote_req_id = 22;
  if (!this->_internal_quote_req_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quote_req_id());
  }

  // string acction_status = 25;
  if (!this->_internal_acction_status().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_acction_status());
  }

  // string status_msg = 26;
  if (!this->_internal_status_msg().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status_msg());
  }

  // string acction_date = 27;
  if (!this->_internal_acction_date().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_acction_date());
  }

  // string acction_time = 28;
  if (!this->_internal_acction_time().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_acction_time());
  }

  // string trade_id = 29;
  if (!this->_internal_trade_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trade_id());
  }

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  // uint32 user_id = 4;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // float price = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_price = this->_internal_price();
  uint32_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    total_size += 1 + 4;
  }

  // uint64 vol = 7;
  if (this->_internal_vol() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_vol());
  }

  // uint64 strategy_code = 11;
  if (this->_internal_strategy_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_strategy_code());
  }

  // uint64 match_type = 15;
  if (this->_internal_match_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_type());
  }

  // uint64 quote_type = 16;
  if (this->_internal_quote_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_quote_type());
  }

  // uint64 market_indicator = 20;
  if (this->_internal_market_indicator() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_market_indicator());
  }

  // float ytm = 23;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ytm = this->_internal_ytm();
  uint32_t raw_ytm;
  memcpy(&raw_ytm, &tmp_ytm, sizeof(tmp_ytm));
  if (raw_ytm != 0) {
    total_size += 2 + 4;
  }

  // float strike_yeild = 24;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_strike_yeild = this->_internal_strike_yeild();
  uint32_t raw_strike_yeild;
  memcpy(&raw_strike_yeild, &tmp_strike_yeild, sizeof(tmp_strike_yeild));
  if (raw_strike_yeild != 0) {
    total_size += 2 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ficc_Exch_Order_Action::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ficc_Exch_Order_Action::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ficc_Exch_Order_Action::GetClassData() const { return &_class_data_; }

void ficc_Exch_Order_Action::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ficc_Exch_Order_Action *>(to)->MergeFrom(
      static_cast<const ficc_Exch_Order_Action &>(from));
}


void ficc_Exch_Order_Action::MergeFrom(const ficc_Exch_Order_Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ficc_message.ficc_Exch_Order_Action)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_order_inner_id().empty()) {
    _internal_set_order_inner_id(from._internal_order_inner_id());
  }
  if (!from._internal_investor_id().empty()) {
    _internal_set_investor_id(from._internal_investor_id());
  }
  if (!from._internal_acction_flag().empty()) {
    _internal_set_acction_flag(from._internal_acction_flag());
  }
  if (!from._internal_broker_id().empty()) {
    _internal_set_broker_id(from._internal_broker_id());
  }
  if (!from._internal_ex_code().empty()) {
    _internal_set_ex_code(from._internal_ex_code());
  }
  if (!from._internal_order_sys_id().empty()) {
    _internal_set_order_sys_id(from._internal_order_sys_id());
  }
  if (!from._internal_trade_acct().empty()) {
    _internal_set_trade_acct(from._internal_trade_acct());
  }
  if (!from._internal_secu_code().empty()) {
    _internal_set_secu_code(from._internal_secu_code());
  }
  if (!from._internal_commodity_type().empty()) {
    _internal_set_commodity_type(from._internal_commodity_type());
  }
  if (!from._internal_valid_until_time().empty()) {
    _internal_set_valid_until_time(from._internal_valid_until_time());
  }
  if (!from._internal_insert_time().empty()) {
    _internal_set_insert_time(from._internal_insert_time());
  }
  if (!from._internal_client_ref_id().empty()) {
    _internal_set_client_ref_id(from._internal_client_ref_id());
  }
  if (!from._internal_direction().empty()) {
    _internal_set_direction(from._internal_direction());
  }
  if (!from._internal_quote_req_id().empty()) {
    _internal_set_quote_req_id(from._internal_quote_req_id());
  }
  if (!from._internal_acction_status().empty()) {
    _internal_set_acction_status(from._internal_acction_status());
  }
  if (!from._internal_status_msg().empty()) {
    _internal_set_status_msg(from._internal_status_msg());
  }
  if (!from._internal_acction_date().empty()) {
    _internal_set_acction_date(from._internal_acction_date());
  }
  if (!from._internal_acction_time().empty()) {
    _internal_set_acction_time(from._internal_acction_time());
  }
  if (!from._internal_trade_id().empty()) {
    _internal_set_trade_id(from._internal_trade_id());
  }
  if (from._internal_has_head()) {
    _internal_mutable_head()->::message_head::head::MergeFrom(from._internal_head());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_price = from._internal_price();
  uint32_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from._internal_vol() != 0) {
    _internal_set_vol(from._internal_vol());
  }
  if (from._internal_strategy_code() != 0) {
    _internal_set_strategy_code(from._internal_strategy_code());
  }
  if (from._internal_match_type() != 0) {
    _internal_set_match_type(from._internal_match_type());
  }
  if (from._internal_quote_type() != 0) {
    _internal_set_quote_type(from._internal_quote_type());
  }
  if (from._internal_market_indicator() != 0) {
    _internal_set_market_indicator(from._internal_market_indicator());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ytm = from._internal_ytm();
  uint32_t raw_ytm;
  memcpy(&raw_ytm, &tmp_ytm, sizeof(tmp_ytm));
  if (raw_ytm != 0) {
    _internal_set_ytm(from._internal_ytm());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_strike_yeild = from._internal_strike_yeild();
  uint32_t raw_strike_yeild;
  memcpy(&raw_strike_yeild, &tmp_strike_yeild, sizeof(tmp_strike_yeild));
  if (raw_strike_yeild != 0) {
    _internal_set_strike_yeild(from._internal_strike_yeild());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ficc_Exch_Order_Action::CopyFrom(const ficc_Exch_Order_Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ficc_message.ficc_Exch_Order_Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ficc_Exch_Order_Action::IsInitialized() const {
  return true;
}

void ficc_Exch_Order_Action::InternalSwap(ficc_Exch_Order_Action* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_inner_id_, lhs_arena,
      &other->order_inner_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &investor_id_, lhs_arena,
      &other->investor_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &acction_flag_, lhs_arena,
      &other->acction_flag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &broker_id_, lhs_arena,
      &other->broker_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ex_code_, lhs_arena,
      &other->ex_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_sys_id_, lhs_arena,
      &other->order_sys_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trade_acct_, lhs_arena,
      &other->trade_acct_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &secu_code_, lhs_arena,
      &other->secu_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &commodity_type_, lhs_arena,
      &other->commodity_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &valid_until_time_, lhs_arena,
      &other->valid_until_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &insert_time_, lhs_arena,
      &other->insert_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &client_ref_id_, lhs_arena,
      &other->client_ref_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &direction_, lhs_arena,
      &other->direction_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &quote_req_id_, lhs_arena,
      &other->quote_req_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &acction_status_, lhs_arena,
      &other->acction_status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &status_msg_, lhs_arena,
      &other->status_msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &acction_date_, lhs_arena,
      &other->acction_date_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &acction_time_, lhs_arena,
      &other->acction_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trade_id_, lhs_arena,
      &other->trade_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ficc_Exch_Order_Action, strike_yeild_)
      + sizeof(ficc_Exch_Order_Action::strike_yeild_)
      - PROTOBUF_FIELD_OFFSET(ficc_Exch_Order_Action, head_)>(
          reinterpret_cast<char*>(&head_),
          reinterpret_cast<char*>(&other->head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ficc_Exch_Order_Action::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ficc_2eproto_getter, &descriptor_table_ficc_2eproto_once,
      file_level_metadata_ficc_2eproto[17]);
}

// ===================================================================

class ficc_Exch_Order_Req::_Internal {
 public:
  static const ::message_head::head& head(const ficc_Exch_Order_Req* msg);
};

const ::message_head::head&
ficc_Exch_Order_Req::_Internal::head(const ficc_Exch_Order_Req* msg) {
  return *msg->head_;
}
void ficc_Exch_Order_Req::clear_head() {
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
}
ficc_Exch_Order_Req::ficc_Exch_Order_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ficc_message.ficc_Exch_Order_Req)
}
ficc_Exch_Order_Req::ficc_Exch_Order_Req(const ficc_Exch_Order_Req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trade_acct_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trade_acct_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trade_acct().empty()) {
    trade_acct_.Set(from._internal_trade_acct(), 
      GetArenaForAllocation());
  }
  fund_acct_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fund_acct_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fund_acct().empty()) {
    fund_acct_.Set(from._internal_fund_acct(), 
      GetArenaForAllocation());
  }
  combino_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    combino_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_combino().empty()) {
    combino_.Set(from._internal_combino(), 
      GetArenaForAllocation());
  }
  trading_day_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trading_day_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trading_day().empty()) {
    trading_day_.Set(from._internal_trading_day(), 
      GetArenaForAllocation());
  }
  ex_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ex_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ex_code().empty()) {
    ex_code_.Set(from._internal_ex_code(), 
      GetArenaForAllocation());
  }
  secu_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secu_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secu_code().empty()) {
    secu_code_.Set(from._internal_secu_code(), 
      GetArenaForAllocation());
  }
  secu_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secu_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secu_name().empty()) {
    secu_name_.Set(from._internal_secu_name(), 
      GetArenaForAllocation());
  }
  order_price_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_price_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_price_type().empty()) {
    order_price_type_.Set(from._internal_order_price_type(), 
      GetArenaForAllocation());
  }
  direction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    direction_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_direction().empty()) {
    direction_.Set(from._internal_direction(), 
      GetArenaForAllocation());
  }
  offset_flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    offset_flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_offset_flag().empty()) {
    offset_flag_.Set(from._internal_offset_flag(), 
      GetArenaForAllocation());
  }
  hedge_flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hedge_flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hedge_flag().empty()) {
    hedge_flag_.Set(from._internal_hedge_flag(), 
      GetArenaForAllocation());
  }
  time_cond_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    time_cond_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_time_cond().empty()) {
    time_cond_.Set(from._internal_time_cond(), 
      GetArenaForAllocation());
  }
  seat_order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    seat_order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_seat_order_id().empty()) {
    seat_order_id_.Set(from._internal_seat_order_id(), 
      GetArenaForAllocation());
  }
  purchase_way_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    purchase_way_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_purchase_way().empty()) {
    purchase_way_.Set(from._internal_purchase_way(), 
      GetArenaForAllocation());
  }
  text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    text_.Set(from._internal_text(), 
      GetArenaForAllocation());
  }
  quote_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    quote_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quote_id().empty()) {
    quote_id_.Set(from._internal_quote_id(), 
      GetArenaForAllocation());
  }
  valid_until_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    valid_until_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_valid_until_time().empty()) {
    valid_until_time_.Set(from._internal_valid_until_time(), 
      GetArenaForAllocation());
  }
  mdentry_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mdentry_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mdentry_time().empty()) {
    mdentry_time_.Set(from._internal_mdentry_time(), 
      GetArenaForAllocation());
  }
  client_ref_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    client_ref_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_ref_id().empty()) {
    client_ref_id_.Set(from._internal_client_ref_id(), 
      GetArenaForAllocation());
  }
  order_inner_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_inner_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_inner_id().empty()) {
    order_inner_id_.Set(from._internal_order_inner_id(), 
      GetArenaForAllocation());
  }
  order_sys_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_sys_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_sys_id().empty()) {
    order_sys_id_.Set(from._internal_order_sys_id(), 
      GetArenaForAllocation());
  }
  insert_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    insert_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_insert_time().empty()) {
    insert_time_.Set(from._internal_insert_time(), 
      GetArenaForAllocation());
  }
  order_source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_source().empty()) {
    order_source_.Set(from._internal_order_source(), 
      GetArenaForAllocation());
  }
  reserver1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reserver1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reserver1().empty()) {
    reserver1_.Set(from._internal_reserver1(), 
      GetArenaForAllocation());
  }
  reserver2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reserver2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reserver2().empty()) {
    reserver2_.Set(from._internal_reserver2(), 
      GetArenaForAllocation());
  }
  reserver3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reserver3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reserver3().empty()) {
    reserver3_.Set(from._internal_reserver3(), 
      GetArenaForAllocation());
  }
  reserver4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reserver4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reserver4().empty()) {
    reserver4_.Set(from._internal_reserver4(), 
      GetArenaForAllocation());
  }
  maturity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    maturity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_maturity().empty()) {
    maturity_.Set(from._internal_maturity(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_head()) {
    head_ = new ::message_head::head(*from.head_);
  } else {
    head_ = nullptr;
  }
  ::memcpy(&vol_, &from.vol_,
    static_cast<size_t>(reinterpret_cast<char*>(&subject_party_type_) -
    reinterpret_cast<char*>(&vol_)) + sizeof(subject_party_type_));
  // @@protoc_insertion_point(copy_constructor:ficc_message.ficc_Exch_Order_Req)
}

inline void ficc_Exch_Order_Req::SharedCtor() {
trade_acct_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trade_acct_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
fund_acct_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fund_acct_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
combino_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  combino_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
trading_day_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trading_day_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ex_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ex_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secu_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secu_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secu_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secu_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
order_price_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_price_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
direction_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  direction_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
offset_flag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  offset_flag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
hedge_flag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hedge_flag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
time_cond_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  time_cond_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
seat_order_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  seat_order_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
purchase_way_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  purchase_way_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
text_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
quote_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  quote_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
valid_until_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  valid_until_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mdentry_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mdentry_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
client_ref_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  client_ref_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
order_inner_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_inner_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
order_sys_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_sys_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
insert_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  insert_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
order_source_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_source_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
reserver1_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reserver1_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
reserver2_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reserver2_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
reserver3_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reserver3_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
reserver4_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reserver4_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
maturity_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  maturity_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&head_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&subject_party_type_) -
    reinterpret_cast<char*>(&head_)) + sizeof(subject_party_type_));
}

ficc_Exch_Order_Req::~ficc_Exch_Order_Req() {
  // @@protoc_insertion_point(destructor:ficc_message.ficc_Exch_Order_Req)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ficc_Exch_Order_Req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  trade_acct_.Destroy();
  fund_acct_.Destroy();
  combino_.Destroy();
  trading_day_.Destroy();
  ex_code_.Destroy();
  secu_code_.Destroy();
  secu_name_.Destroy();
  order_price_type_.Destroy();
  direction_.Destroy();
  offset_flag_.Destroy();
  hedge_flag_.Destroy();
  time_cond_.Destroy();
  seat_order_id_.Destroy();
  purchase_way_.Destroy();
  text_.Destroy();
  quote_id_.Destroy();
  valid_until_time_.Destroy();
  mdentry_time_.Destroy();
  client_ref_id_.Destroy();
  order_inner_id_.Destroy();
  order_sys_id_.Destroy();
  insert_time_.Destroy();
  order_source_.Destroy();
  reserver1_.Destroy();
  reserver2_.Destroy();
  reserver3_.Destroy();
  reserver4_.Destroy();
  maturity_.Destroy();
  if (this != internal_default_instance()) delete head_;
}

void ficc_Exch_Order_Req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ficc_Exch_Order_Req::Clear() {
// @@protoc_insertion_point(message_clear_start:ficc_message.ficc_Exch_Order_Req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trade_acct_.ClearToEmpty();
  fund_acct_.ClearToEmpty();
  combino_.ClearToEmpty();
  trading_day_.ClearToEmpty();
  ex_code_.ClearToEmpty();
  secu_code_.ClearToEmpty();
  secu_name_.ClearToEmpty();
  order_price_type_.ClearToEmpty();
  direction_.ClearToEmpty();
  offset_flag_.ClearToEmpty();
  hedge_flag_.ClearToEmpty();
  time_cond_.ClearToEmpty();
  seat_order_id_.ClearToEmpty();
  purchase_way_.ClearToEmpty();
  text_.ClearToEmpty();
  quote_id_.ClearToEmpty();
  valid_until_time_.ClearToEmpty();
  mdentry_time_.ClearToEmpty();
  client_ref_id_.ClearToEmpty();
  order_inner_id_.ClearToEmpty();
  order_sys_id_.ClearToEmpty();
  insert_time_.ClearToEmpty();
  order_source_.ClearToEmpty();
  reserver1_.ClearToEmpty();
  reserver2_.ClearToEmpty();
  reserver3_.ClearToEmpty();
  reserver4_.ClearToEmpty();
  maturity_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  ::memset(&vol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subject_party_type_) -
      reinterpret_cast<char*>(&vol_)) + sizeof(subject_party_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ficc_Exch_Order_Req::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message_head.head head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string trade_acct = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_trade_acct();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Req.trade_acct"));
        } else
          goto handle_unusual;
        continue;
      // string fund_acct = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_fund_acct();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Req.fund_acct"));
        } else
          goto handle_unusual;
        continue;
      // string combino = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_combino();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Req.combino"));
        } else
          goto handle_unusual;
        continue;
      // string trading_day = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_trading_day();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Req.trading_day"));
        } else
          goto handle_unusual;
        continue;
      // string ex_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_ex_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Req.ex_code"));
        } else
          goto handle_unusual;
        continue;
      // string secu_code = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_secu_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Req.secu_code"));
        } else
          goto handle_unusual;
        continue;
      // string secu_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_secu_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Req.secu_name"));
        } else
          goto handle_unusual;
        continue;
      // string order_price_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_order_price_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Req.order_price_type"));
        } else
          goto handle_unusual;
        continue;
      // string direction = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_direction();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Req.direction"));
        } else
          goto handle_unusual;
        continue;
      // string offset_flag = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_offset_flag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Req.offset_flag"));
        } else
          goto handle_unusual;
        continue;
      // string hedge_flag = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_hedge_flag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Req.hedge_flag"));
        } else
          goto handle_unusual;
        continue;
      // float price = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 vol = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          vol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string time_cond = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_time_cond();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Req.time_cond"));
        } else
          goto handle_unusual;
        continue;
      // uint64 strategy_code = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          strategy_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 user_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string seat_order_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_seat_order_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Req.seat_order_id"));
        } else
          goto handle_unusual;
        continue;
      // string purchase_way = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_purchase_way();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Req.purchase_way"));
        } else
          goto handle_unusual;
        continue;
      // string text = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Req.text"));
        } else
          goto handle_unusual;
        continue;
      // float ytm = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 173)) {
          ytm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float strike_yeild = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 181)) {
          strike_yeild_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 quote_type = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          quote_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 max_floor = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          max_floor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 min_tick_size = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          min_tick_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 settle_type = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          settle_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 match_type = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          match_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 delivery_type = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          delivery_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 clearing_method = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          clearing_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string quote_id = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_quote_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Req.quote_id"));
        } else
          goto handle_unusual;
        continue;
      // string valid_until_time = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_valid_until_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Req.valid_until_time"));
        } else
          goto handle_unusual;
        continue;
      // string mdentry_time = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          auto str = _internal_mutable_mdentry_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Req.mdentry_time"));
        } else
          goto handle_unusual;
        continue;
      // string client_ref_id = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_client_ref_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Req.client_ref_id"));
        } else
          goto handle_unusual;
        continue;
      // uint64 routing_type = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          routing_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 market_indicator = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          market_indicator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 realtime_undertake_flag = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          realtime_undertake_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 subject_party_type = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          subject_party_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string order_inner_id = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_order_inner_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Req.order_inner_id"));
        } else
          goto handle_unusual;
        continue;
      // string order_sys_id = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_order_sys_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Req.order_sys_id"));
        } else
          goto handle_unusual;
        continue;
      // string insert_time = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_insert_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Req.insert_time"));
        } else
          goto handle_unusual;
        continue;
      // string order_source = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_order_source();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Req.order_source"));
        } else
          goto handle_unusual;
        continue;
      // string reserver1 = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_reserver1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Req.reserver1"));
        } else
          goto handle_unusual;
        continue;
      // string reserver2 = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_reserver2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Req.reserver2"));
        } else
          goto handle_unusual;
        continue;
      // string reserver3 = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_reserver3();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Req.reserver3"));
        } else
          goto handle_unusual;
        continue;
      // string reserver4 = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_reserver4();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Req.reserver4"));
        } else
          goto handle_unusual;
        continue;
      // string maturity = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_maturity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Req.maturity"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ficc_Exch_Order_Req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ficc_message.ficc_Exch_Order_Req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // string trade_acct = 2;
  if (!this->_internal_trade_acct().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trade_acct().data(), static_cast<int>(this->_internal_trade_acct().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Req.trade_acct");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_trade_acct(), target);
  }

  // string fund_acct = 3;
  if (!this->_internal_fund_acct().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fund_acct().data(), static_cast<int>(this->_internal_fund_acct().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Req.fund_acct");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_fund_acct(), target);
  }

  // string combino = 4;
  if (!this->_internal_combino().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_combino().data(), static_cast<int>(this->_internal_combino().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Req.combino");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_combino(), target);
  }

  // string trading_day = 5;
  if (!this->_internal_trading_day().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trading_day().data(), static_cast<int>(this->_internal_trading_day().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Req.trading_day");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_trading_day(), target);
  }

  // string ex_code = 6;
  if (!this->_internal_ex_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ex_code().data(), static_cast<int>(this->_internal_ex_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Req.ex_code");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_ex_code(), target);
  }

  // string secu_code = 7;
  if (!this->_internal_secu_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secu_code().data(), static_cast<int>(this->_internal_secu_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Req.secu_code");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_secu_code(), target);
  }

  // string secu_name = 8;
  if (!this->_internal_secu_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secu_name().data(), static_cast<int>(this->_internal_secu_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Req.secu_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_secu_name(), target);
  }

  // string order_price_type = 9;
  if (!this->_internal_order_price_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_price_type().data(), static_cast<int>(this->_internal_order_price_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Req.order_price_type");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_order_price_type(), target);
  }

  // string direction = 10;
  if (!this->_internal_direction().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_direction().data(), static_cast<int>(this->_internal_direction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Req.direction");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_direction(), target);
  }

  // string offset_flag = 11;
  if (!this->_internal_offset_flag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_offset_flag().data(), static_cast<int>(this->_internal_offset_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Req.offset_flag");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_offset_flag(), target);
  }

  // string hedge_flag = 12;
  if (!this->_internal_hedge_flag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hedge_flag().data(), static_cast<int>(this->_internal_hedge_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Req.hedge_flag");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_hedge_flag(), target);
  }

  // float price = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_price = this->_internal_price();
  uint32_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_price(), target);
  }

  // uint64 vol = 14;
  if (this->_internal_vol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(14, this->_internal_vol(), target);
  }

  // string time_cond = 15;
  if (!this->_internal_time_cond().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time_cond().data(), static_cast<int>(this->_internal_time_cond().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Req.time_cond");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_time_cond(), target);
  }

  // uint64 strategy_code = 16;
  if (this->_internal_strategy_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(16, this->_internal_strategy_code(), target);
  }

  // uint32 user_id = 17;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_user_id(), target);
  }

  // string seat_order_id = 18;
  if (!this->_internal_seat_order_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_seat_order_id().data(), static_cast<int>(this->_internal_seat_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Req.seat_order_id");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_seat_order_id(), target);
  }

  // string purchase_way = 19;
  if (!this->_internal_purchase_way().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_purchase_way().data(), static_cast<int>(this->_internal_purchase_way().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Req.purchase_way");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_purchase_way(), target);
  }

  // string text = 20;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Req.text");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_text(), target);
  }

  // float ytm = 21;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ytm = this->_internal_ytm();
  uint32_t raw_ytm;
  memcpy(&raw_ytm, &tmp_ytm, sizeof(tmp_ytm));
  if (raw_ytm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(21, this->_internal_ytm(), target);
  }

  // float strike_yeild = 22;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_strike_yeild = this->_internal_strike_yeild();
  uint32_t raw_strike_yeild;
  memcpy(&raw_strike_yeild, &tmp_strike_yeild, sizeof(tmp_strike_yeild));
  if (raw_strike_yeild != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(22, this->_internal_strike_yeild(), target);
  }

  // uint64 quote_type = 23;
  if (this->_internal_quote_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(23, this->_internal_quote_type(), target);
  }

  // uint64 max_floor = 24;
  if (this->_internal_max_floor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(24, this->_internal_max_floor(), target);
  }

  // uint64 min_tick_size = 25;
  if (this->_internal_min_tick_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(25, this->_internal_min_tick_size(), target);
  }

  // uint64 settle_type = 26;
  if (this->_internal_settle_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(26, this->_internal_settle_type(), target);
  }

  // uint64 match_type = 27;
  if (this->_internal_match_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(27, this->_internal_match_type(), target);
  }

  // uint64 delivery_type = 28;
  if (this->_internal_delivery_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(28, this->_internal_delivery_type(), target);
  }

  // uint64 clearing_method = 29;
  if (this->_internal_clearing_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(29, this->_internal_clearing_method(), target);
  }

  // string quote_id = 30;
  if (!this->_internal_quote_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quote_id().data(), static_cast<int>(this->_internal_quote_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Req.quote_id");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_quote_id(), target);
  }

  // string valid_until_time = 31;
  if (!this->_internal_valid_until_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_valid_until_time().data(), static_cast<int>(this->_internal_valid_until_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Req.valid_until_time");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_valid_until_time(), target);
  }

  // string mdentry_time = 32;
  if (!this->_internal_mdentry_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mdentry_time().data(), static_cast<int>(this->_internal_mdentry_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Req.mdentry_time");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_mdentry_time(), target);
  }

  // string client_ref_id = 33;
  if (!this->_internal_client_ref_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_ref_id().data(), static_cast<int>(this->_internal_client_ref_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Req.client_ref_id");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_client_ref_id(), target);
  }

  // uint64 routing_type = 34;
  if (this->_internal_routing_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(34, this->_internal_routing_type(), target);
  }

  // uint64 market_indicator = 35;
  if (this->_internal_market_indicator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(35, this->_internal_market_indicator(), target);
  }

  // uint64 realtime_undertake_flag = 36;
  if (this->_internal_realtime_undertake_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(36, this->_internal_realtime_undertake_flag(), target);
  }

  // uint64 subject_party_type = 37;
  if (this->_internal_subject_party_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(37, this->_internal_subject_party_type(), target);
  }

  // string order_inner_id = 38;
  if (!this->_internal_order_inner_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_inner_id().data(), static_cast<int>(this->_internal_order_inner_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Req.order_inner_id");
    target = stream->WriteStringMaybeAliased(
        38, this->_internal_order_inner_id(), target);
  }

  // string order_sys_id = 39;
  if (!this->_internal_order_sys_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_sys_id().data(), static_cast<int>(this->_internal_order_sys_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Req.order_sys_id");
    target = stream->WriteStringMaybeAliased(
        39, this->_internal_order_sys_id(), target);
  }

  // string insert_time = 40;
  if (!this->_internal_insert_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_insert_time().data(), static_cast<int>(this->_internal_insert_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Req.insert_time");
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_insert_time(), target);
  }

  // string order_source = 41;
  if (!this->_internal_order_source().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_source().data(), static_cast<int>(this->_internal_order_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Req.order_source");
    target = stream->WriteStringMaybeAliased(
        41, this->_internal_order_source(), target);
  }

  // string reserver1 = 42;
  if (!this->_internal_reserver1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reserver1().data(), static_cast<int>(this->_internal_reserver1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Req.reserver1");
    target = stream->WriteStringMaybeAliased(
        42, this->_internal_reserver1(), target);
  }

  // string reserver2 = 43;
  if (!this->_internal_reserver2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reserver2().data(), static_cast<int>(this->_internal_reserver2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Req.reserver2");
    target = stream->WriteStringMaybeAliased(
        43, this->_internal_reserver2(), target);
  }

  // string reserver3 = 44;
  if (!this->_internal_reserver3().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reserver3().data(), static_cast<int>(this->_internal_reserver3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Req.reserver3");
    target = stream->WriteStringMaybeAliased(
        44, this->_internal_reserver3(), target);
  }

  // string reserver4 = 45;
  if (!this->_internal_reserver4().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reserver4().data(), static_cast<int>(this->_internal_reserver4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Req.reserver4");
    target = stream->WriteStringMaybeAliased(
        45, this->_internal_reserver4(), target);
  }

  // string maturity = 46;
  if (!this->_internal_maturity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_maturity().data(), static_cast<int>(this->_internal_maturity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Req.maturity");
    target = stream->WriteStringMaybeAliased(
        46, this->_internal_maturity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ficc_message.ficc_Exch_Order_Req)
  return target;
}

size_t ficc_Exch_Order_Req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ficc_message.ficc_Exch_Order_Req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trade_acct = 2;
  if (!this->_internal_trade_acct().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trade_acct());
  }

  // string fund_acct = 3;
  if (!this->_internal_fund_acct().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fund_acct());
  }

  // string combino = 4;
  if (!this->_internal_combino().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_combino());
  }

  // string trading_day = 5;
  if (!this->_internal_trading_day().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trading_day());
  }

  // string ex_code = 6;
  if (!this->_internal_ex_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ex_code());
  }

  // string secu_code = 7;
  if (!this->_internal_secu_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secu_code());
  }

  // string secu_name = 8;
  if (!this->_internal_secu_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secu_name());
  }

  // string order_price_type = 9;
  if (!this->_internal_order_price_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_price_type());
  }

  // string direction = 10;
  if (!this->_internal_direction().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_direction());
  }

  // string offset_flag = 11;
  if (!this->_internal_offset_flag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_offset_flag());
  }

  // string hedge_flag = 12;
  if (!this->_internal_hedge_flag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hedge_flag());
  }

  // string time_cond = 15;
  if (!this->_internal_time_cond().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time_cond());
  }

  // string seat_order_id = 18;
  if (!this->_internal_seat_order_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_seat_order_id());
  }

  // string purchase_way = 19;
  if (!this->_internal_purchase_way().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_purchase_way());
  }

  // string text = 20;
  if (!this->_internal_text().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string quote_id = 30;
  if (!this->_internal_quote_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quote_id());
  }

  // string valid_until_time = 31;
  if (!this->_internal_valid_until_time().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_valid_until_time());
  }

  // string mdentry_time = 32;
  if (!this->_internal_mdentry_time().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mdentry_time());
  }

  // string client_ref_id = 33;
  if (!this->_internal_client_ref_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_ref_id());
  }

  // string order_inner_id = 38;
  if (!this->_internal_order_inner_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_inner_id());
  }

  // string order_sys_id = 39;
  if (!this->_internal_order_sys_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_sys_id());
  }

  // string insert_time = 40;
  if (!this->_internal_insert_time().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_insert_time());
  }

  // string order_source = 41;
  if (!this->_internal_order_source().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_source());
  }

  // string reserver1 = 42;
  if (!this->_internal_reserver1().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reserver1());
  }

  // string reserver2 = 43;
  if (!this->_internal_reserver2().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reserver2());
  }

  // string reserver3 = 44;
  if (!this->_internal_reserver3().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reserver3());
  }

  // string reserver4 = 45;
  if (!this->_internal_reserver4().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reserver4());
  }

  // string maturity = 46;
  if (!this->_internal_maturity().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_maturity());
  }

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  // uint64 vol = 14;
  if (this->_internal_vol() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_vol());
  }

  // float price = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_price = this->_internal_price();
  uint32_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    total_size += 1 + 4;
  }

  // uint32 user_id = 17;
  if (this->_internal_user_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  // uint64 strategy_code = 16;
  if (this->_internal_strategy_code() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_strategy_code());
  }

  // float ytm = 21;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ytm = this->_internal_ytm();
  uint32_t raw_ytm;
  memcpy(&raw_ytm, &tmp_ytm, sizeof(tmp_ytm));
  if (raw_ytm != 0) {
    total_size += 2 + 4;
  }

  // float strike_yeild = 22;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_strike_yeild = this->_internal_strike_yeild();
  uint32_t raw_strike_yeild;
  memcpy(&raw_strike_yeild, &tmp_strike_yeild, sizeof(tmp_strike_yeild));
  if (raw_strike_yeild != 0) {
    total_size += 2 + 4;
  }

  // uint64 quote_type = 23;
  if (this->_internal_quote_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_quote_type());
  }

  // uint64 max_floor = 24;
  if (this->_internal_max_floor() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_max_floor());
  }

  // uint64 min_tick_size = 25;
  if (this->_internal_min_tick_size() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_min_tick_size());
  }

  // uint64 settle_type = 26;
  if (this->_internal_settle_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_settle_type());
  }

  // uint64 match_type = 27;
  if (this->_internal_match_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_match_type());
  }

  // uint64 delivery_type = 28;
  if (this->_internal_delivery_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_delivery_type());
  }

  // uint64 clearing_method = 29;
  if (this->_internal_clearing_method() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_clearing_method());
  }

  // uint64 routing_type = 34;
  if (this->_internal_routing_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_routing_type());
  }

  // uint64 market_indicator = 35;
  if (this->_internal_market_indicator() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_market_indicator());
  }

  // uint64 realtime_undertake_flag = 36;
  if (this->_internal_realtime_undertake_flag() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_realtime_undertake_flag());
  }

  // uint64 subject_party_type = 37;
  if (this->_internal_subject_party_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_subject_party_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ficc_Exch_Order_Req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ficc_Exch_Order_Req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ficc_Exch_Order_Req::GetClassData() const { return &_class_data_; }

void ficc_Exch_Order_Req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ficc_Exch_Order_Req *>(to)->MergeFrom(
      static_cast<const ficc_Exch_Order_Req &>(from));
}


void ficc_Exch_Order_Req::MergeFrom(const ficc_Exch_Order_Req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ficc_message.ficc_Exch_Order_Req)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_trade_acct().empty()) {
    _internal_set_trade_acct(from._internal_trade_acct());
  }
  if (!from._internal_fund_acct().empty()) {
    _internal_set_fund_acct(from._internal_fund_acct());
  }
  if (!from._internal_combino().empty()) {
    _internal_set_combino(from._internal_combino());
  }
  if (!from._internal_trading_day().empty()) {
    _internal_set_trading_day(from._internal_trading_day());
  }
  if (!from._internal_ex_code().empty()) {
    _internal_set_ex_code(from._internal_ex_code());
  }
  if (!from._internal_secu_code().empty()) {
    _internal_set_secu_code(from._internal_secu_code());
  }
  if (!from._internal_secu_name().empty()) {
    _internal_set_secu_name(from._internal_secu_name());
  }
  if (!from._internal_order_price_type().empty()) {
    _internal_set_order_price_type(from._internal_order_price_type());
  }
  if (!from._internal_direction().empty()) {
    _internal_set_direction(from._internal_direction());
  }
  if (!from._internal_offset_flag().empty()) {
    _internal_set_offset_flag(from._internal_offset_flag());
  }
  if (!from._internal_hedge_flag().empty()) {
    _internal_set_hedge_flag(from._internal_hedge_flag());
  }
  if (!from._internal_time_cond().empty()) {
    _internal_set_time_cond(from._internal_time_cond());
  }
  if (!from._internal_seat_order_id().empty()) {
    _internal_set_seat_order_id(from._internal_seat_order_id());
  }
  if (!from._internal_purchase_way().empty()) {
    _internal_set_purchase_way(from._internal_purchase_way());
  }
  if (!from._internal_text().empty()) {
    _internal_set_text(from._internal_text());
  }
  if (!from._internal_quote_id().empty()) {
    _internal_set_quote_id(from._internal_quote_id());
  }
  if (!from._internal_valid_until_time().empty()) {
    _internal_set_valid_until_time(from._internal_valid_until_time());
  }
  if (!from._internal_mdentry_time().empty()) {
    _internal_set_mdentry_time(from._internal_mdentry_time());
  }
  if (!from._internal_client_ref_id().empty()) {
    _internal_set_client_ref_id(from._internal_client_ref_id());
  }
  if (!from._internal_order_inner_id().empty()) {
    _internal_set_order_inner_id(from._internal_order_inner_id());
  }
  if (!from._internal_order_sys_id().empty()) {
    _internal_set_order_sys_id(from._internal_order_sys_id());
  }
  if (!from._internal_insert_time().empty()) {
    _internal_set_insert_time(from._internal_insert_time());
  }
  if (!from._internal_order_source().empty()) {
    _internal_set_order_source(from._internal_order_source());
  }
  if (!from._internal_reserver1().empty()) {
    _internal_set_reserver1(from._internal_reserver1());
  }
  if (!from._internal_reserver2().empty()) {
    _internal_set_reserver2(from._internal_reserver2());
  }
  if (!from._internal_reserver3().empty()) {
    _internal_set_reserver3(from._internal_reserver3());
  }
  if (!from._internal_reserver4().empty()) {
    _internal_set_reserver4(from._internal_reserver4());
  }
  if (!from._internal_maturity().empty()) {
    _internal_set_maturity(from._internal_maturity());
  }
  if (from._internal_has_head()) {
    _internal_mutable_head()->::message_head::head::MergeFrom(from._internal_head());
  }
  if (from._internal_vol() != 0) {
    _internal_set_vol(from._internal_vol());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_price = from._internal_price();
  uint32_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_strategy_code() != 0) {
    _internal_set_strategy_code(from._internal_strategy_code());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ytm = from._internal_ytm();
  uint32_t raw_ytm;
  memcpy(&raw_ytm, &tmp_ytm, sizeof(tmp_ytm));
  if (raw_ytm != 0) {
    _internal_set_ytm(from._internal_ytm());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_strike_yeild = from._internal_strike_yeild();
  uint32_t raw_strike_yeild;
  memcpy(&raw_strike_yeild, &tmp_strike_yeild, sizeof(tmp_strike_yeild));
  if (raw_strike_yeild != 0) {
    _internal_set_strike_yeild(from._internal_strike_yeild());
  }
  if (from._internal_quote_type() != 0) {
    _internal_set_quote_type(from._internal_quote_type());
  }
  if (from._internal_max_floor() != 0) {
    _internal_set_max_floor(from._internal_max_floor());
  }
  if (from._internal_min_tick_size() != 0) {
    _internal_set_min_tick_size(from._internal_min_tick_size());
  }
  if (from._internal_settle_type() != 0) {
    _internal_set_settle_type(from._internal_settle_type());
  }
  if (from._internal_match_type() != 0) {
    _internal_set_match_type(from._internal_match_type());
  }
  if (from._internal_delivery_type() != 0) {
    _internal_set_delivery_type(from._internal_delivery_type());
  }
  if (from._internal_clearing_method() != 0) {
    _internal_set_clearing_method(from._internal_clearing_method());
  }
  if (from._internal_routing_type() != 0) {
    _internal_set_routing_type(from._internal_routing_type());
  }
  if (from._internal_market_indicator() != 0) {
    _internal_set_market_indicator(from._internal_market_indicator());
  }
  if (from._internal_realtime_undertake_flag() != 0) {
    _internal_set_realtime_undertake_flag(from._internal_realtime_undertake_flag());
  }
  if (from._internal_subject_party_type() != 0) {
    _internal_set_subject_party_type(from._internal_subject_party_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ficc_Exch_Order_Req::CopyFrom(const ficc_Exch_Order_Req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ficc_message.ficc_Exch_Order_Req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ficc_Exch_Order_Req::IsInitialized() const {
  return true;
}

void ficc_Exch_Order_Req::InternalSwap(ficc_Exch_Order_Req* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trade_acct_, lhs_arena,
      &other->trade_acct_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &fund_acct_, lhs_arena,
      &other->fund_acct_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &combino_, lhs_arena,
      &other->combino_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trading_day_, lhs_arena,
      &other->trading_day_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ex_code_, lhs_arena,
      &other->ex_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &secu_code_, lhs_arena,
      &other->secu_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &secu_name_, lhs_arena,
      &other->secu_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_price_type_, lhs_arena,
      &other->order_price_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &direction_, lhs_arena,
      &other->direction_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &offset_flag_, lhs_arena,
      &other->offset_flag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &hedge_flag_, lhs_arena,
      &other->hedge_flag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &time_cond_, lhs_arena,
      &other->time_cond_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &seat_order_id_, lhs_arena,
      &other->seat_order_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &purchase_way_, lhs_arena,
      &other->purchase_way_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &quote_id_, lhs_arena,
      &other->quote_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &valid_until_time_, lhs_arena,
      &other->valid_until_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &mdentry_time_, lhs_arena,
      &other->mdentry_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &client_ref_id_, lhs_arena,
      &other->client_ref_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_inner_id_, lhs_arena,
      &other->order_inner_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_sys_id_, lhs_arena,
      &other->order_sys_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &insert_time_, lhs_arena,
      &other->insert_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_source_, lhs_arena,
      &other->order_source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &reserver1_, lhs_arena,
      &other->reserver1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &reserver2_, lhs_arena,
      &other->reserver2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &reserver3_, lhs_arena,
      &other->reserver3_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &reserver4_, lhs_arena,
      &other->reserver4_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &maturity_, lhs_arena,
      &other->maturity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ficc_Exch_Order_Req, subject_party_type_)
      + sizeof(ficc_Exch_Order_Req::subject_party_type_)
      - PROTOBUF_FIELD_OFFSET(ficc_Exch_Order_Req, head_)>(
          reinterpret_cast<char*>(&head_),
          reinterpret_cast<char*>(&other->head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ficc_Exch_Order_Req::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ficc_2eproto_getter, &descriptor_table_ficc_2eproto_once,
      file_level_metadata_ficc_2eproto[18]);
}

// ===================================================================

class ficc_Exch_Order_Rtn::_Internal {
 public:
  static const ::message_head::head& head(const ficc_Exch_Order_Rtn* msg);
};

const ::message_head::head&
ficc_Exch_Order_Rtn::_Internal::head(const ficc_Exch_Order_Rtn* msg) {
  return *msg->head_;
}
void ficc_Exch_Order_Rtn::clear_head() {
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
}
ficc_Exch_Order_Rtn::ficc_Exch_Order_Rtn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:ficc_message.ficc_Exch_Order_Rtn)
}
ficc_Exch_Order_Rtn::ficc_Exch_Order_Rtn(const ficc_Exch_Order_Rtn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  order_status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_status().empty()) {
    order_status_.Set(from._internal_order_status(), 
      GetArenaForAllocation());
  }
  seat_order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    seat_order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_seat_order_id().empty()) {
    seat_order_id_.Set(from._internal_seat_order_id(), 
      GetArenaForAllocation());
  }
  order_sys_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_sys_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_sys_id().empty()) {
    order_sys_id_.Set(from._internal_order_sys_id(), 
      GetArenaForAllocation());
  }
  insert_date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    insert_date_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_insert_date().empty()) {
    insert_date_.Set(from._internal_insert_date(), 
      GetArenaForAllocation());
  }
  update_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    update_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_update_time().empty()) {
    update_time_.Set(from._internal_update_time(), 
      GetArenaForAllocation());
  }
  secu_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secu_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secu_code().empty()) {
    secu_code_.Set(from._internal_secu_code(), 
      GetArenaForAllocation());
  }
  fund_acct_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fund_acct_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fund_acct().empty()) {
    fund_acct_.Set(from._internal_fund_acct(), 
      GetArenaForAllocation());
  }
  trade_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trade_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trade_id().empty()) {
    trade_id_.Set(from._internal_trade_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_head()) {
    head_ = new ::message_head::head(*from.head_);
  } else {
    head_ = nullptr;
  }
  ::memcpy(&max_floor_, &from.max_floor_,
    static_cast<size_t>(reinterpret_cast<char*>(&strike_yeild_) -
    reinterpret_cast<char*>(&max_floor_)) + sizeof(strike_yeild_));
  // @@protoc_insertion_point(copy_constructor:ficc_message.ficc_Exch_Order_Rtn)
}

inline void ficc_Exch_Order_Rtn::SharedCtor() {
order_status_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_status_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
seat_order_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  seat_order_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
order_sys_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_sys_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
insert_date_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  insert_date_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
update_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  update_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secu_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secu_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
fund_acct_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fund_acct_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
trade_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trade_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&head_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&strike_yeild_) -
    reinterpret_cast<char*>(&head_)) + sizeof(strike_yeild_));
}

ficc_Exch_Order_Rtn::~ficc_Exch_Order_Rtn() {
  // @@protoc_insertion_point(destructor:ficc_message.ficc_Exch_Order_Rtn)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ficc_Exch_Order_Rtn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  order_status_.Destroy();
  seat_order_id_.Destroy();
  order_sys_id_.Destroy();
  insert_date_.Destroy();
  update_time_.Destroy();
  secu_code_.Destroy();
  fund_acct_.Destroy();
  trade_id_.Destroy();
  if (this != internal_default_instance()) delete head_;
}

void ficc_Exch_Order_Rtn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ficc_Exch_Order_Rtn::Clear() {
// @@protoc_insertion_point(message_clear_start:ficc_message.ficc_Exch_Order_Rtn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_status_.ClearToEmpty();
  seat_order_id_.ClearToEmpty();
  order_sys_id_.ClearToEmpty();
  insert_date_.ClearToEmpty();
  update_time_.ClearToEmpty();
  secu_code_.ClearToEmpty();
  fund_acct_.ClearToEmpty();
  trade_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  ::memset(&max_floor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&strike_yeild_) -
      reinterpret_cast<char*>(&max_floor_)) + sizeof(strike_yeild_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ficc_Exch_Order_Rtn::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message_head.head head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string order_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_order_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Rtn.order_status"));
        } else
          goto handle_unusual;
        continue;
      // string seat_order_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_seat_order_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Rtn.seat_order_id"));
        } else
          goto handle_unusual;
        continue;
      // string order_sys_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_order_sys_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Rtn.order_sys_id"));
        } else
          goto handle_unusual;
        continue;
      // string insert_date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_insert_date();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Rtn.insert_date"));
        } else
          goto handle_unusual;
        continue;
      // string update_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_update_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Rtn.update_time"));
        } else
          goto handle_unusual;
        continue;
      // string secu_code = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_secu_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Rtn.secu_code"));
        } else
          goto handle_unusual;
        continue;
      // uint64 max_floor = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          max_floor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 vol = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          vol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 vol_traded = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          vol_traded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 vol_total = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          vol_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float price = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 legsettl_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          legsettl_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 delivery_type = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          delivery_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 clearing_method = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          clearing_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float ytm = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          ytm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float strike_yeild = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          strike_yeild_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string fund_acct = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_fund_acct();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Rtn.fund_acct"));
        } else
          goto handle_unusual;
        continue;
      // string trade_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_trade_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ficc_message.ficc_Exch_Order_Rtn.trade_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ficc_Exch_Order_Rtn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ficc_message.ficc_Exch_Order_Rtn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // string order_status = 2;
  if (!this->_internal_order_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_status().data(), static_cast<int>(this->_internal_order_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Rtn.order_status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_order_status(), target);
  }

  // string seat_order_id = 3;
  if (!this->_internal_seat_order_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_seat_order_id().data(), static_cast<int>(this->_internal_seat_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Rtn.seat_order_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_seat_order_id(), target);
  }

  // string order_sys_id = 4;
  if (!this->_internal_order_sys_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_sys_id().data(), static_cast<int>(this->_internal_order_sys_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Rtn.order_sys_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_order_sys_id(), target);
  }

  // string insert_date = 5;
  if (!this->_internal_insert_date().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_insert_date().data(), static_cast<int>(this->_internal_insert_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Rtn.insert_date");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_insert_date(), target);
  }

  // string update_time = 6;
  if (!this->_internal_update_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_update_time().data(), static_cast<int>(this->_internal_update_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Rtn.update_time");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_update_time(), target);
  }

  // string secu_code = 7;
  if (!this->_internal_secu_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secu_code().data(), static_cast<int>(this->_internal_secu_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Rtn.secu_code");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_secu_code(), target);
  }

  // uint64 max_floor = 8;
  if (this->_internal_max_floor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_max_floor(), target);
  }

  // uint64 vol = 9;
  if (this->_internal_vol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_vol(), target);
  }

  // uint64 vol_traded = 10;
  if (this->_internal_vol_traded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_vol_traded(), target);
  }

  // uint64 vol_total = 11;
  if (this->_internal_vol_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_vol_total(), target);
  }

  // float price = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_price = this->_internal_price();
  uint32_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_price(), target);
  }

  // uint64 legsettl_type = 13;
  if (this->_internal_legsettl_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(13, this->_internal_legsettl_type(), target);
  }

  // uint64 delivery_type = 14;
  if (this->_internal_delivery_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(14, this->_internal_delivery_type(), target);
  }

  // uint64 clearing_method = 15;
  if (this->_internal_clearing_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(15, this->_internal_clearing_method(), target);
  }

  // float ytm = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ytm = this->_internal_ytm();
  uint32_t raw_ytm;
  memcpy(&raw_ytm, &tmp_ytm, sizeof(tmp_ytm));
  if (raw_ytm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_ytm(), target);
  }

  // float strike_yeild = 17;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_strike_yeild = this->_internal_strike_yeild();
  uint32_t raw_strike_yeild;
  memcpy(&raw_strike_yeild, &tmp_strike_yeild, sizeof(tmp_strike_yeild));
  if (raw_strike_yeild != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_strike_yeild(), target);
  }

  // string fund_acct = 18;
  if (!this->_internal_fund_acct().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fund_acct().data(), static_cast<int>(this->_internal_fund_acct().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Rtn.fund_acct");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_fund_acct(), target);
  }

  // string trade_id = 19;
  if (!this->_internal_trade_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trade_id().data(), static_cast<int>(this->_internal_trade_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ficc_message.ficc_Exch_Order_Rtn.trade_id");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_trade_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ficc_message.ficc_Exch_Order_Rtn)
  return target;
}

size_t ficc_Exch_Order_Rtn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ficc_message.ficc_Exch_Order_Rtn)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string order_status = 2;
  if (!this->_internal_order_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_status());
  }

  // string seat_order_id = 3;
  if (!this->_internal_seat_order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_seat_order_id());
  }

  // string order_sys_id = 4;
  if (!this->_internal_order_sys_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_sys_id());
  }

  // string insert_date = 5;
  if (!this->_internal_insert_date().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_insert_date());
  }

  // string update_time = 6;
  if (!this->_internal_update_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_update_time());
  }

  // string secu_code = 7;
  if (!this->_internal_secu_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secu_code());
  }

  // string fund_acct = 18;
  if (!this->_internal_fund_acct().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fund_acct());
  }

  // string trade_id = 19;
  if (!this->_internal_trade_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trade_id());
  }

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  // uint64 max_floor = 8;
  if (this->_internal_max_floor() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_max_floor());
  }

  // uint64 vol = 9;
  if (this->_internal_vol() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_vol());
  }

  // uint64 vol_traded = 10;
  if (this->_internal_vol_traded() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_vol_traded());
  }

  // uint64 vol_total = 11;
  if (this->_internal_vol_total() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_vol_total());
  }

  // uint64 legsettl_type = 13;
  if (this->_internal_legsettl_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_legsettl_type());
  }

  // uint64 delivery_type = 14;
  if (this->_internal_delivery_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_delivery_type());
  }

  // float price = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_price = this->_internal_price();
  uint32_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    total_size += 1 + 4;
  }

  // float ytm = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ytm = this->_internal_ytm();
  uint32_t raw_ytm;
  memcpy(&raw_ytm, &tmp_ytm, sizeof(tmp_ytm));
  if (raw_ytm != 0) {
    total_size += 2 + 4;
  }

  // uint64 clearing_method = 15;
  if (this->_internal_clearing_method() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_clearing_method());
  }

  // float strike_yeild = 17;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_strike_yeild = this->_internal_strike_yeild();
  uint32_t raw_strike_yeild;
  memcpy(&raw_strike_yeild, &tmp_strike_yeild, sizeof(tmp_strike_yeild));
  if (raw_strike_yeild != 0) {
    total_size += 2 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ficc_Exch_Order_Rtn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ficc_Exch_Order_Rtn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ficc_Exch_Order_Rtn::GetClassData() const { return &_class_data_; }

void ficc_Exch_Order_Rtn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ficc_Exch_Order_Rtn *>(to)->MergeFrom(
      static_cast<const ficc_Exch_Order_Rtn &>(from));
}


void ficc_Exch_Order_Rtn::MergeFrom(const ficc_Exch_Order_Rtn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ficc_message.ficc_Exch_Order_Rtn)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_order_status().empty()) {
    _internal_set_order_status(from._internal_order_status());
  }
  if (!from._internal_seat_order_id().empty()) {
    _internal_set_seat_order_id(from._internal_seat_order_id());
  }
  if (!from._internal_order_sys_id().empty()) {
    _internal_set_order_sys_id(from._internal_order_sys_id());
  }
  if (!from._internal_insert_date().empty()) {
    _internal_set_insert_date(from._internal_insert_date());
  }
  if (!from._internal_update_time().empty()) {
    _internal_set_update_time(from._internal_update_time());
  }
  if (!from._internal_secu_code().empty()) {
    _internal_set_secu_code(from._internal_secu_code());
  }
  if (!from._internal_fund_acct().empty()) {
    _internal_set_fund_acct(from._internal_fund_acct());
  }
  if (!from._internal_trade_id().empty()) {
    _internal_set_trade_id(from._internal_trade_id());
  }
  if (from._internal_has_head()) {
    _internal_mutable_head()->::message_head::head::MergeFrom(from._internal_head());
  }
  if (from._internal_max_floor() != 0) {
    _internal_set_max_floor(from._internal_max_floor());
  }
  if (from._internal_vol() != 0) {
    _internal_set_vol(from._internal_vol());
  }
  if (from._internal_vol_traded() != 0) {
    _internal_set_vol_traded(from._internal_vol_traded());
  }
  if (from._internal_vol_total() != 0) {
    _internal_set_vol_total(from._internal_vol_total());
  }
  if (from._internal_legsettl_type() != 0) {
    _internal_set_legsettl_type(from._internal_legsettl_type());
  }
  if (from._internal_delivery_type() != 0) {
    _internal_set_delivery_type(from._internal_delivery_type());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_price = from._internal_price();
  uint32_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    _internal_set_price(from._internal_price());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ytm = from._internal_ytm();
  uint32_t raw_ytm;
  memcpy(&raw_ytm, &tmp_ytm, sizeof(tmp_ytm));
  if (raw_ytm != 0) {
    _internal_set_ytm(from._internal_ytm());
  }
  if (from._internal_clearing_method() != 0) {
    _internal_set_clearing_method(from._internal_clearing_method());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_strike_yeild = from._internal_strike_yeild();
  uint32_t raw_strike_yeild;
  memcpy(&raw_strike_yeild, &tmp_strike_yeild, sizeof(tmp_strike_yeild));
  if (raw_strike_yeild != 0) {
    _internal_set_strike_yeild(from._internal_strike_yeild());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ficc_Exch_Order_Rtn::CopyFrom(const ficc_Exch_Order_Rtn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ficc_message.ficc_Exch_Order_Rtn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ficc_Exch_Order_Rtn::IsInitialized() const {
  return true;
}

void ficc_Exch_Order_Rtn::InternalSwap(ficc_Exch_Order_Rtn* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_status_, lhs_arena,
      &other->order_status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &seat_order_id_, lhs_arena,
      &other->seat_order_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &order_sys_id_, lhs_arena,
      &other->order_sys_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &insert_date_, lhs_arena,
      &other->insert_date_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &update_time_, lhs_arena,
      &other->update_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &secu_code_, lhs_arena,
      &other->secu_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &fund_acct_, lhs_arena,
      &other->fund_acct_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trade_id_, lhs_arena,
      &other->trade_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ficc_Exch_Order_Rtn, strike_yeild_)
      + sizeof(ficc_Exch_Order_Rtn::strike_yeild_)
      - PROTOBUF_FIELD_OFFSET(ficc_Exch_Order_Rtn, head_)>(
          reinterpret_cast<char*>(&head_),
          reinterpret_cast<char*>(&other->head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ficc_Exch_Order_Rtn::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ficc_2eproto_getter, &descriptor_table_ficc_2eproto_once,
      file_level_metadata_ficc_2eproto[19]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ficc_message
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ficc_message::ficc_Order_Req*
Arena::CreateMaybeMessage< ::ficc_message::ficc_Order_Req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ficc_message::ficc_Order_Req >(arena);
}
template<> PROTOBUF_NOINLINE ::ficc_message::ficc_Order_Rsp*
Arena::CreateMaybeMessage< ::ficc_message::ficc_Order_Rsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ficc_message::ficc_Order_Rsp >(arena);
}
template<> PROTOBUF_NOINLINE ::ficc_message::ficc_Order_Rtn*
Arena::CreateMaybeMessage< ::ficc_message::ficc_Order_Rtn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ficc_message::ficc_Order_Rtn >(arena);
}
template<> PROTOBUF_NOINLINE ::ficc_message::ficc_BilateralOrder_Req*
Arena::CreateMaybeMessage< ::ficc_message::ficc_BilateralOrder_Req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ficc_message::ficc_BilateralOrder_Req >(arena);
}
template<> PROTOBUF_NOINLINE ::ficc_message::ficc_BilateralOrder_Rtn*
Arena::CreateMaybeMessage< ::ficc_message::ficc_BilateralOrder_Rtn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ficc_message::ficc_BilateralOrder_Rtn >(arena);
}
template<> PROTOBUF_NOINLINE ::ficc_message::ficc_SystemMonitor*
Arena::CreateMaybeMessage< ::ficc_message::ficc_SystemMonitor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ficc_message::ficc_SystemMonitor >(arena);
}
template<> PROTOBUF_NOINLINE ::ficc_message::ficc_OrderAction_Req*
Arena::CreateMaybeMessage< ::ficc_message::ficc_OrderAction_Req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ficc_message::ficc_OrderAction_Req >(arena);
}
template<> PROTOBUF_NOINLINE ::ficc_message::ficc_OrderAction_Rsp*
Arena::CreateMaybeMessage< ::ficc_message::ficc_OrderAction_Rsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ficc_message::ficc_OrderAction_Rsp >(arena);
}
template<> PROTOBUF_NOINLINE ::ficc_message::ficc_QryBilateralOrder_Req*
Arena::CreateMaybeMessage< ::ficc_message::ficc_QryBilateralOrder_Req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ficc_message::ficc_QryBilateralOrder_Req >(arena);
}
template<> PROTOBUF_NOINLINE ::ficc_message::ficc_QryMatch_Req*
Arena::CreateMaybeMessage< ::ficc_message::ficc_QryMatch_Req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ficc_message::ficc_QryMatch_Req >(arena);
}
template<> PROTOBUF_NOINLINE ::ficc_message::ficc_Match_Rtn*
Arena::CreateMaybeMessage< ::ficc_message::ficc_Match_Rtn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ficc_message::ficc_Match_Rtn >(arena);
}
template<> PROTOBUF_NOINLINE ::ficc_message::ficc_Cfets_Makemarket_Status*
Arena::CreateMaybeMessage< ::ficc_message::ficc_Cfets_Makemarket_Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ficc_message::ficc_Cfets_Makemarket_Status >(arena);
}
template<> PROTOBUF_NOINLINE ::ficc_message::ficc_fund*
Arena::CreateMaybeMessage< ::ficc_message::ficc_fund >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ficc_message::ficc_fund >(arena);
}
template<> PROTOBUF_NOINLINE ::ficc_message::ficc_position*
Arena::CreateMaybeMessage< ::ficc_message::ficc_position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ficc_message::ficc_position >(arena);
}
template<> PROTOBUF_NOINLINE ::ficc_message::ficc_Exch_BilateralOrder_Req*
Arena::CreateMaybeMessage< ::ficc_message::ficc_Exch_BilateralOrder_Req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ficc_message::ficc_Exch_BilateralOrder_Req >(arena);
}
template<> PROTOBUF_NOINLINE ::ficc_message::ficc_Exch_BilateralOrder_Rtn*
Arena::CreateMaybeMessage< ::ficc_message::ficc_Exch_BilateralOrder_Rtn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ficc_message::ficc_Exch_BilateralOrder_Rtn >(arena);
}
template<> PROTOBUF_NOINLINE ::ficc_message::ficc_Exch_Match_Rtn*
Arena::CreateMaybeMessage< ::ficc_message::ficc_Exch_Match_Rtn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ficc_message::ficc_Exch_Match_Rtn >(arena);
}
template<> PROTOBUF_NOINLINE ::ficc_message::ficc_Exch_Order_Action*
Arena::CreateMaybeMessage< ::ficc_message::ficc_Exch_Order_Action >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ficc_message::ficc_Exch_Order_Action >(arena);
}
template<> PROTOBUF_NOINLINE ::ficc_message::ficc_Exch_Order_Req*
Arena::CreateMaybeMessage< ::ficc_message::ficc_Exch_Order_Req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ficc_message::ficc_Exch_Order_Req >(arena);
}
template<> PROTOBUF_NOINLINE ::ficc_message::ficc_Exch_Order_Rtn*
Arena::CreateMaybeMessage< ::ficc_message::ficc_Exch_Order_Rtn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ficc_message::ficc_Exch_Order_Rtn >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
