// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ficc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ficc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ficc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "message_head.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ficc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ficc_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ficc_2eproto;
namespace ficc_message {
class ficc_BilateralOrder_Req;
struct ficc_BilateralOrder_ReqDefaultTypeInternal;
extern ficc_BilateralOrder_ReqDefaultTypeInternal _ficc_BilateralOrder_Req_default_instance_;
class ficc_BilateralOrder_Rtn;
struct ficc_BilateralOrder_RtnDefaultTypeInternal;
extern ficc_BilateralOrder_RtnDefaultTypeInternal _ficc_BilateralOrder_Rtn_default_instance_;
class ficc_Cfets_Makemarket_Status;
struct ficc_Cfets_Makemarket_StatusDefaultTypeInternal;
extern ficc_Cfets_Makemarket_StatusDefaultTypeInternal _ficc_Cfets_Makemarket_Status_default_instance_;
class ficc_Exch_BilateralOrder_Req;
struct ficc_Exch_BilateralOrder_ReqDefaultTypeInternal;
extern ficc_Exch_BilateralOrder_ReqDefaultTypeInternal _ficc_Exch_BilateralOrder_Req_default_instance_;
class ficc_Exch_BilateralOrder_Rtn;
struct ficc_Exch_BilateralOrder_RtnDefaultTypeInternal;
extern ficc_Exch_BilateralOrder_RtnDefaultTypeInternal _ficc_Exch_BilateralOrder_Rtn_default_instance_;
class ficc_Exch_Match_Rtn;
struct ficc_Exch_Match_RtnDefaultTypeInternal;
extern ficc_Exch_Match_RtnDefaultTypeInternal _ficc_Exch_Match_Rtn_default_instance_;
class ficc_Exch_Order_Action;
struct ficc_Exch_Order_ActionDefaultTypeInternal;
extern ficc_Exch_Order_ActionDefaultTypeInternal _ficc_Exch_Order_Action_default_instance_;
class ficc_Exch_Order_Req;
struct ficc_Exch_Order_ReqDefaultTypeInternal;
extern ficc_Exch_Order_ReqDefaultTypeInternal _ficc_Exch_Order_Req_default_instance_;
class ficc_Exch_Order_Rtn;
struct ficc_Exch_Order_RtnDefaultTypeInternal;
extern ficc_Exch_Order_RtnDefaultTypeInternal _ficc_Exch_Order_Rtn_default_instance_;
class ficc_Match_Rtn;
struct ficc_Match_RtnDefaultTypeInternal;
extern ficc_Match_RtnDefaultTypeInternal _ficc_Match_Rtn_default_instance_;
class ficc_OrderAction_Req;
struct ficc_OrderAction_ReqDefaultTypeInternal;
extern ficc_OrderAction_ReqDefaultTypeInternal _ficc_OrderAction_Req_default_instance_;
class ficc_OrderAction_Rsp;
struct ficc_OrderAction_RspDefaultTypeInternal;
extern ficc_OrderAction_RspDefaultTypeInternal _ficc_OrderAction_Rsp_default_instance_;
class ficc_Order_Req;
struct ficc_Order_ReqDefaultTypeInternal;
extern ficc_Order_ReqDefaultTypeInternal _ficc_Order_Req_default_instance_;
class ficc_Order_Rsp;
struct ficc_Order_RspDefaultTypeInternal;
extern ficc_Order_RspDefaultTypeInternal _ficc_Order_Rsp_default_instance_;
class ficc_Order_Rtn;
struct ficc_Order_RtnDefaultTypeInternal;
extern ficc_Order_RtnDefaultTypeInternal _ficc_Order_Rtn_default_instance_;
class ficc_QryBilateralOrder_Req;
struct ficc_QryBilateralOrder_ReqDefaultTypeInternal;
extern ficc_QryBilateralOrder_ReqDefaultTypeInternal _ficc_QryBilateralOrder_Req_default_instance_;
class ficc_QryMatch_Req;
struct ficc_QryMatch_ReqDefaultTypeInternal;
extern ficc_QryMatch_ReqDefaultTypeInternal _ficc_QryMatch_Req_default_instance_;
class ficc_SystemMonitor;
struct ficc_SystemMonitorDefaultTypeInternal;
extern ficc_SystemMonitorDefaultTypeInternal _ficc_SystemMonitor_default_instance_;
class ficc_fund;
struct ficc_fundDefaultTypeInternal;
extern ficc_fundDefaultTypeInternal _ficc_fund_default_instance_;
class ficc_position;
struct ficc_positionDefaultTypeInternal;
extern ficc_positionDefaultTypeInternal _ficc_position_default_instance_;
}  // namespace ficc_message
PROTOBUF_NAMESPACE_OPEN
template<> ::ficc_message::ficc_BilateralOrder_Req* Arena::CreateMaybeMessage<::ficc_message::ficc_BilateralOrder_Req>(Arena*);
template<> ::ficc_message::ficc_BilateralOrder_Rtn* Arena::CreateMaybeMessage<::ficc_message::ficc_BilateralOrder_Rtn>(Arena*);
template<> ::ficc_message::ficc_Cfets_Makemarket_Status* Arena::CreateMaybeMessage<::ficc_message::ficc_Cfets_Makemarket_Status>(Arena*);
template<> ::ficc_message::ficc_Exch_BilateralOrder_Req* Arena::CreateMaybeMessage<::ficc_message::ficc_Exch_BilateralOrder_Req>(Arena*);
template<> ::ficc_message::ficc_Exch_BilateralOrder_Rtn* Arena::CreateMaybeMessage<::ficc_message::ficc_Exch_BilateralOrder_Rtn>(Arena*);
template<> ::ficc_message::ficc_Exch_Match_Rtn* Arena::CreateMaybeMessage<::ficc_message::ficc_Exch_Match_Rtn>(Arena*);
template<> ::ficc_message::ficc_Exch_Order_Action* Arena::CreateMaybeMessage<::ficc_message::ficc_Exch_Order_Action>(Arena*);
template<> ::ficc_message::ficc_Exch_Order_Req* Arena::CreateMaybeMessage<::ficc_message::ficc_Exch_Order_Req>(Arena*);
template<> ::ficc_message::ficc_Exch_Order_Rtn* Arena::CreateMaybeMessage<::ficc_message::ficc_Exch_Order_Rtn>(Arena*);
template<> ::ficc_message::ficc_Match_Rtn* Arena::CreateMaybeMessage<::ficc_message::ficc_Match_Rtn>(Arena*);
template<> ::ficc_message::ficc_OrderAction_Req* Arena::CreateMaybeMessage<::ficc_message::ficc_OrderAction_Req>(Arena*);
template<> ::ficc_message::ficc_OrderAction_Rsp* Arena::CreateMaybeMessage<::ficc_message::ficc_OrderAction_Rsp>(Arena*);
template<> ::ficc_message::ficc_Order_Req* Arena::CreateMaybeMessage<::ficc_message::ficc_Order_Req>(Arena*);
template<> ::ficc_message::ficc_Order_Rsp* Arena::CreateMaybeMessage<::ficc_message::ficc_Order_Rsp>(Arena*);
template<> ::ficc_message::ficc_Order_Rtn* Arena::CreateMaybeMessage<::ficc_message::ficc_Order_Rtn>(Arena*);
template<> ::ficc_message::ficc_QryBilateralOrder_Req* Arena::CreateMaybeMessage<::ficc_message::ficc_QryBilateralOrder_Req>(Arena*);
template<> ::ficc_message::ficc_QryMatch_Req* Arena::CreateMaybeMessage<::ficc_message::ficc_QryMatch_Req>(Arena*);
template<> ::ficc_message::ficc_SystemMonitor* Arena::CreateMaybeMessage<::ficc_message::ficc_SystemMonitor>(Arena*);
template<> ::ficc_message::ficc_fund* Arena::CreateMaybeMessage<::ficc_message::ficc_fund>(Arena*);
template<> ::ficc_message::ficc_position* Arena::CreateMaybeMessage<::ficc_message::ficc_position>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ficc_message {

// ===================================================================

class ficc_Order_Req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ficc_message.ficc_Order_Req) */ {
 public:
  inline ficc_Order_Req() : ficc_Order_Req(nullptr) {}
  ~ficc_Order_Req() override;
  explicit PROTOBUF_CONSTEXPR ficc_Order_Req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ficc_Order_Req(const ficc_Order_Req& from);
  ficc_Order_Req(ficc_Order_Req&& from) noexcept
    : ficc_Order_Req() {
    *this = ::std::move(from);
  }

  inline ficc_Order_Req& operator=(const ficc_Order_Req& from) {
    CopyFrom(from);
    return *this;
  }
  inline ficc_Order_Req& operator=(ficc_Order_Req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ficc_Order_Req& default_instance() {
    return *internal_default_instance();
  }
  static inline const ficc_Order_Req* internal_default_instance() {
    return reinterpret_cast<const ficc_Order_Req*>(
               &_ficc_Order_Req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ficc_Order_Req& a, ficc_Order_Req& b) {
    a.Swap(&b);
  }
  inline void Swap(ficc_Order_Req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ficc_Order_Req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ficc_Order_Req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ficc_Order_Req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ficc_Order_Req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ficc_Order_Req& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ficc_Order_Req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ficc_message.ficc_Order_Req";
  }
  protected:
  explicit ficc_Order_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradeAcctFieldNumber = 2,
    kSecuCodeFieldNumber = 3,
    kOrderPriceTypeFieldNumber = 4,
    kDirectionFieldNumber = 5,
    kOffsetFlagFieldNumber = 6,
    kHedgeFlagFieldNumber = 7,
    kTimeCondFieldNumber = 10,
    kPurchaseWayFieldNumber = 13,
    kTextFieldNumber = 14,
    kValidUntilTimeFieldNumber = 24,
    kMdentryTimeFieldNumber = 25,
    kClientRefIdFieldNumber = 26,
    kReserver1FieldNumber = 31,
    kQuoteIdFieldNumber = 32,
    kHeadFieldNumber = 1,
    kVolFieldNumber = 9,
    kPriceFieldNumber = 8,
    kUserIdFieldNumber = 12,
    kStrategyCodeFieldNumber = 11,
    kYtmFieldNumber = 15,
    kStrikeYeildFieldNumber = 16,
    kQuoteTypeFieldNumber = 17,
    kMaxFloorFieldNumber = 18,
    kMinTickSizeFieldNumber = 19,
    kSettleTypeFieldNumber = 20,
    kMatchTypeFieldNumber = 21,
    kDeliveryTypeFieldNumber = 22,
    kClearingMethodFieldNumber = 23,
    kRoutingTypeFieldNumber = 27,
    kMarketIndicatorFieldNumber = 28,
    kRealtimeUndertakeFlagFieldNumber = 29,
    kSubjectPartyTypeFieldNumber = 30,
  };
  // string trade_acct = 2;
  void clear_trade_acct();
  const std::string& trade_acct() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_acct(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_acct();
  PROTOBUF_NODISCARD std::string* release_trade_acct();
  void set_allocated_trade_acct(std::string* trade_acct);
  private:
  const std::string& _internal_trade_acct() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_acct(const std::string& value);
  std::string* _internal_mutable_trade_acct();
  public:

  // string secu_code = 3;
  void clear_secu_code();
  const std::string& secu_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secu_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secu_code();
  PROTOBUF_NODISCARD std::string* release_secu_code();
  void set_allocated_secu_code(std::string* secu_code);
  private:
  const std::string& _internal_secu_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secu_code(const std::string& value);
  std::string* _internal_mutable_secu_code();
  public:

  // string order_price_type = 4;
  void clear_order_price_type();
  const std::string& order_price_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_price_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_price_type();
  PROTOBUF_NODISCARD std::string* release_order_price_type();
  void set_allocated_order_price_type(std::string* order_price_type);
  private:
  const std::string& _internal_order_price_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_price_type(const std::string& value);
  std::string* _internal_mutable_order_price_type();
  public:

  // string direction = 5;
  void clear_direction();
  const std::string& direction() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_direction(ArgT0&& arg0, ArgT... args);
  std::string* mutable_direction();
  PROTOBUF_NODISCARD std::string* release_direction();
  void set_allocated_direction(std::string* direction);
  private:
  const std::string& _internal_direction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_direction(const std::string& value);
  std::string* _internal_mutable_direction();
  public:

  // string offset_flag = 6;
  void clear_offset_flag();
  const std::string& offset_flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_offset_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_offset_flag();
  PROTOBUF_NODISCARD std::string* release_offset_flag();
  void set_allocated_offset_flag(std::string* offset_flag);
  private:
  const std::string& _internal_offset_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_offset_flag(const std::string& value);
  std::string* _internal_mutable_offset_flag();
  public:

  // string hedge_flag = 7;
  void clear_hedge_flag();
  const std::string& hedge_flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hedge_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hedge_flag();
  PROTOBUF_NODISCARD std::string* release_hedge_flag();
  void set_allocated_hedge_flag(std::string* hedge_flag);
  private:
  const std::string& _internal_hedge_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hedge_flag(const std::string& value);
  std::string* _internal_mutable_hedge_flag();
  public:

  // string time_cond = 10;
  void clear_time_cond();
  const std::string& time_cond() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_time_cond(ArgT0&& arg0, ArgT... args);
  std::string* mutable_time_cond();
  PROTOBUF_NODISCARD std::string* release_time_cond();
  void set_allocated_time_cond(std::string* time_cond);
  private:
  const std::string& _internal_time_cond() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time_cond(const std::string& value);
  std::string* _internal_mutable_time_cond();
  public:

  // string purchase_way = 13;
  void clear_purchase_way();
  const std::string& purchase_way() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_purchase_way(ArgT0&& arg0, ArgT... args);
  std::string* mutable_purchase_way();
  PROTOBUF_NODISCARD std::string* release_purchase_way();
  void set_allocated_purchase_way(std::string* purchase_way);
  private:
  const std::string& _internal_purchase_way() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_purchase_way(const std::string& value);
  std::string* _internal_mutable_purchase_way();
  public:

  // string text = 14;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string valid_until_time = 24;
  void clear_valid_until_time();
  const std::string& valid_until_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_valid_until_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_valid_until_time();
  PROTOBUF_NODISCARD std::string* release_valid_until_time();
  void set_allocated_valid_until_time(std::string* valid_until_time);
  private:
  const std::string& _internal_valid_until_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_valid_until_time(const std::string& value);
  std::string* _internal_mutable_valid_until_time();
  public:

  // string mdentry_time = 25;
  void clear_mdentry_time();
  const std::string& mdentry_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mdentry_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mdentry_time();
  PROTOBUF_NODISCARD std::string* release_mdentry_time();
  void set_allocated_mdentry_time(std::string* mdentry_time);
  private:
  const std::string& _internal_mdentry_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mdentry_time(const std::string& value);
  std::string* _internal_mutable_mdentry_time();
  public:

  // string client_ref_id = 26;
  void clear_client_ref_id();
  const std::string& client_ref_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_ref_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_ref_id();
  PROTOBUF_NODISCARD std::string* release_client_ref_id();
  void set_allocated_client_ref_id(std::string* client_ref_id);
  private:
  const std::string& _internal_client_ref_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_ref_id(const std::string& value);
  std::string* _internal_mutable_client_ref_id();
  public:

  // string reserver1 = 31;
  void clear_reserver1();
  const std::string& reserver1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserver1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserver1();
  PROTOBUF_NODISCARD std::string* release_reserver1();
  void set_allocated_reserver1(std::string* reserver1);
  private:
  const std::string& _internal_reserver1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserver1(const std::string& value);
  std::string* _internal_mutable_reserver1();
  public:

  // string quote_id = 32;
  void clear_quote_id();
  const std::string& quote_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_quote_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_quote_id();
  PROTOBUF_NODISCARD std::string* release_quote_id();
  void set_allocated_quote_id(std::string* quote_id);
  private:
  const std::string& _internal_quote_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quote_id(const std::string& value);
  std::string* _internal_mutable_quote_id();
  public:

  // .message_head.head head = 1;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  const ::message_head::head& head() const;
  PROTOBUF_NODISCARD ::message_head::head* release_head();
  ::message_head::head* mutable_head();
  void set_allocated_head(::message_head::head* head);
  private:
  const ::message_head::head& _internal_head() const;
  ::message_head::head* _internal_mutable_head();
  public:
  void unsafe_arena_set_allocated_head(
      ::message_head::head* head);
  ::message_head::head* unsafe_arena_release_head();

  // uint64 vol = 9;
  void clear_vol();
  uint64_t vol() const;
  void set_vol(uint64_t value);
  private:
  uint64_t _internal_vol() const;
  void _internal_set_vol(uint64_t value);
  public:

  // float price = 8;
  void clear_price();
  float price() const;
  void set_price(float value);
  private:
  float _internal_price() const;
  void _internal_set_price(float value);
  public:

  // uint32 user_id = 12;
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // uint64 strategy_code = 11;
  void clear_strategy_code();
  uint64_t strategy_code() const;
  void set_strategy_code(uint64_t value);
  private:
  uint64_t _internal_strategy_code() const;
  void _internal_set_strategy_code(uint64_t value);
  public:

  // float ytm = 15;
  void clear_ytm();
  float ytm() const;
  void set_ytm(float value);
  private:
  float _internal_ytm() const;
  void _internal_set_ytm(float value);
  public:

  // float strike_yeild = 16;
  void clear_strike_yeild();
  float strike_yeild() const;
  void set_strike_yeild(float value);
  private:
  float _internal_strike_yeild() const;
  void _internal_set_strike_yeild(float value);
  public:

  // uint64 quote_type = 17;
  void clear_quote_type();
  uint64_t quote_type() const;
  void set_quote_type(uint64_t value);
  private:
  uint64_t _internal_quote_type() const;
  void _internal_set_quote_type(uint64_t value);
  public:

  // uint64 max_floor = 18;
  void clear_max_floor();
  uint64_t max_floor() const;
  void set_max_floor(uint64_t value);
  private:
  uint64_t _internal_max_floor() const;
  void _internal_set_max_floor(uint64_t value);
  public:

  // uint64 min_tick_size = 19;
  void clear_min_tick_size();
  uint64_t min_tick_size() const;
  void set_min_tick_size(uint64_t value);
  private:
  uint64_t _internal_min_tick_size() const;
  void _internal_set_min_tick_size(uint64_t value);
  public:

  // uint64 settle_type = 20;
  void clear_settle_type();
  uint64_t settle_type() const;
  void set_settle_type(uint64_t value);
  private:
  uint64_t _internal_settle_type() const;
  void _internal_set_settle_type(uint64_t value);
  public:

  // uint64 match_type = 21;
  void clear_match_type();
  uint64_t match_type() const;
  void set_match_type(uint64_t value);
  private:
  uint64_t _internal_match_type() const;
  void _internal_set_match_type(uint64_t value);
  public:

  // uint64 delivery_type = 22;
  void clear_delivery_type();
  uint64_t delivery_type() const;
  void set_delivery_type(uint64_t value);
  private:
  uint64_t _internal_delivery_type() const;
  void _internal_set_delivery_type(uint64_t value);
  public:

  // uint64 clearing_method = 23;
  void clear_clearing_method();
  uint64_t clearing_method() const;
  void set_clearing_method(uint64_t value);
  private:
  uint64_t _internal_clearing_method() const;
  void _internal_set_clearing_method(uint64_t value);
  public:

  // uint64 routing_type = 27;
  void clear_routing_type();
  uint64_t routing_type() const;
  void set_routing_type(uint64_t value);
  private:
  uint64_t _internal_routing_type() const;
  void _internal_set_routing_type(uint64_t value);
  public:

  // uint64 market_indicator = 28;
  void clear_market_indicator();
  uint64_t market_indicator() const;
  void set_market_indicator(uint64_t value);
  private:
  uint64_t _internal_market_indicator() const;
  void _internal_set_market_indicator(uint64_t value);
  public:

  // uint64 realtime_undertake_flag = 29;
  void clear_realtime_undertake_flag();
  uint64_t realtime_undertake_flag() const;
  void set_realtime_undertake_flag(uint64_t value);
  private:
  uint64_t _internal_realtime_undertake_flag() const;
  void _internal_set_realtime_undertake_flag(uint64_t value);
  public:

  // uint64 subject_party_type = 30;
  void clear_subject_party_type();
  uint64_t subject_party_type() const;
  void set_subject_party_type(uint64_t value);
  private:
  uint64_t _internal_subject_party_type() const;
  void _internal_set_subject_party_type(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ficc_message.ficc_Order_Req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_acct_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secu_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_price_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr direction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr offset_flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hedge_flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_cond_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr purchase_way_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr valid_until_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mdentry_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_ref_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserver1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quote_id_;
  ::message_head::head* head_;
  uint64_t vol_;
  float price_;
  uint32_t user_id_;
  uint64_t strategy_code_;
  float ytm_;
  float strike_yeild_;
  uint64_t quote_type_;
  uint64_t max_floor_;
  uint64_t min_tick_size_;
  uint64_t settle_type_;
  uint64_t match_type_;
  uint64_t delivery_type_;
  uint64_t clearing_method_;
  uint64_t routing_type_;
  uint64_t market_indicator_;
  uint64_t realtime_undertake_flag_;
  uint64_t subject_party_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ficc_2eproto;
};
// -------------------------------------------------------------------

class ficc_Order_Rsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ficc_message.ficc_Order_Rsp) */ {
 public:
  inline ficc_Order_Rsp() : ficc_Order_Rsp(nullptr) {}
  ~ficc_Order_Rsp() override;
  explicit PROTOBUF_CONSTEXPR ficc_Order_Rsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ficc_Order_Rsp(const ficc_Order_Rsp& from);
  ficc_Order_Rsp(ficc_Order_Rsp&& from) noexcept
    : ficc_Order_Rsp() {
    *this = ::std::move(from);
  }

  inline ficc_Order_Rsp& operator=(const ficc_Order_Rsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ficc_Order_Rsp& operator=(ficc_Order_Rsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ficc_Order_Rsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const ficc_Order_Rsp* internal_default_instance() {
    return reinterpret_cast<const ficc_Order_Rsp*>(
               &_ficc_Order_Rsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ficc_Order_Rsp& a, ficc_Order_Rsp& b) {
    a.Swap(&b);
  }
  inline void Swap(ficc_Order_Rsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ficc_Order_Rsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ficc_Order_Rsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ficc_Order_Rsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ficc_Order_Rsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ficc_Order_Rsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ficc_Order_Rsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ficc_message.ficc_Order_Rsp";
  }
  protected:
  explicit ficc_Order_Rsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradeAcctFieldNumber = 2,
    kFundAcctFieldNumber = 3,
    kCombinoFieldNumber = 4,
    kSecuCodeFieldNumber = 5,
    kOrderInnerIdFieldNumber = 6,
    kSendTimeFieldNumber = 7,
    kOrderStatusFieldNumber = 8,
    kErrMsgFieldNumber = 10,
    kHeadFieldNumber = 1,
    kErrIdFieldNumber = 9,
  };
  // string trade_acct = 2;
  void clear_trade_acct();
  const std::string& trade_acct() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_acct(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_acct();
  PROTOBUF_NODISCARD std::string* release_trade_acct();
  void set_allocated_trade_acct(std::string* trade_acct);
  private:
  const std::string& _internal_trade_acct() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_acct(const std::string& value);
  std::string* _internal_mutable_trade_acct();
  public:

  // string fund_acct = 3;
  void clear_fund_acct();
  const std::string& fund_acct() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fund_acct(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fund_acct();
  PROTOBUF_NODISCARD std::string* release_fund_acct();
  void set_allocated_fund_acct(std::string* fund_acct);
  private:
  const std::string& _internal_fund_acct() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fund_acct(const std::string& value);
  std::string* _internal_mutable_fund_acct();
  public:

  // string combino = 4;
  void clear_combino();
  const std::string& combino() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_combino(ArgT0&& arg0, ArgT... args);
  std::string* mutable_combino();
  PROTOBUF_NODISCARD std::string* release_combino();
  void set_allocated_combino(std::string* combino);
  private:
  const std::string& _internal_combino() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_combino(const std::string& value);
  std::string* _internal_mutable_combino();
  public:

  // string secu_code = 5;
  void clear_secu_code();
  const std::string& secu_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secu_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secu_code();
  PROTOBUF_NODISCARD std::string* release_secu_code();
  void set_allocated_secu_code(std::string* secu_code);
  private:
  const std::string& _internal_secu_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secu_code(const std::string& value);
  std::string* _internal_mutable_secu_code();
  public:

  // string order_inner_id = 6;
  void clear_order_inner_id();
  const std::string& order_inner_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_inner_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_inner_id();
  PROTOBUF_NODISCARD std::string* release_order_inner_id();
  void set_allocated_order_inner_id(std::string* order_inner_id);
  private:
  const std::string& _internal_order_inner_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_inner_id(const std::string& value);
  std::string* _internal_mutable_order_inner_id();
  public:

  // string send_time = 7;
  void clear_send_time();
  const std::string& send_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_send_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_send_time();
  PROTOBUF_NODISCARD std::string* release_send_time();
  void set_allocated_send_time(std::string* send_time);
  private:
  const std::string& _internal_send_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_send_time(const std::string& value);
  std::string* _internal_mutable_send_time();
  public:

  // string order_status = 8;
  void clear_order_status();
  const std::string& order_status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_status();
  PROTOBUF_NODISCARD std::string* release_order_status();
  void set_allocated_order_status(std::string* order_status);
  private:
  const std::string& _internal_order_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_status(const std::string& value);
  std::string* _internal_mutable_order_status();
  public:

  // string err_msg = 10;
  void clear_err_msg();
  const std::string& err_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err_msg();
  PROTOBUF_NODISCARD std::string* release_err_msg();
  void set_allocated_err_msg(std::string* err_msg);
  private:
  const std::string& _internal_err_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_msg(const std::string& value);
  std::string* _internal_mutable_err_msg();
  public:

  // .message_head.head head = 1;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  const ::message_head::head& head() const;
  PROTOBUF_NODISCARD ::message_head::head* release_head();
  ::message_head::head* mutable_head();
  void set_allocated_head(::message_head::head* head);
  private:
  const ::message_head::head& _internal_head() const;
  ::message_head::head* _internal_mutable_head();
  public:
  void unsafe_arena_set_allocated_head(
      ::message_head::head* head);
  ::message_head::head* unsafe_arena_release_head();

  // uint32 err_id = 9;
  void clear_err_id();
  uint32_t err_id() const;
  void set_err_id(uint32_t value);
  private:
  uint32_t _internal_err_id() const;
  void _internal_set_err_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ficc_message.ficc_Order_Rsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_acct_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fund_acct_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr combino_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secu_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_inner_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr send_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_msg_;
  ::message_head::head* head_;
  uint32_t err_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ficc_2eproto;
};
// -------------------------------------------------------------------

class ficc_Order_Rtn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ficc_message.ficc_Order_Rtn) */ {
 public:
  inline ficc_Order_Rtn() : ficc_Order_Rtn(nullptr) {}
  ~ficc_Order_Rtn() override;
  explicit PROTOBUF_CONSTEXPR ficc_Order_Rtn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ficc_Order_Rtn(const ficc_Order_Rtn& from);
  ficc_Order_Rtn(ficc_Order_Rtn&& from) noexcept
    : ficc_Order_Rtn() {
    *this = ::std::move(from);
  }

  inline ficc_Order_Rtn& operator=(const ficc_Order_Rtn& from) {
    CopyFrom(from);
    return *this;
  }
  inline ficc_Order_Rtn& operator=(ficc_Order_Rtn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ficc_Order_Rtn& default_instance() {
    return *internal_default_instance();
  }
  static inline const ficc_Order_Rtn* internal_default_instance() {
    return reinterpret_cast<const ficc_Order_Rtn*>(
               &_ficc_Order_Rtn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ficc_Order_Rtn& a, ficc_Order_Rtn& b) {
    a.Swap(&b);
  }
  inline void Swap(ficc_Order_Rtn* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ficc_Order_Rtn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ficc_Order_Rtn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ficc_Order_Rtn>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ficc_Order_Rtn& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ficc_Order_Rtn& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ficc_Order_Rtn* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ficc_message.ficc_Order_Rtn";
  }
  protected:
  explicit ficc_Order_Rtn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradeAcctFieldNumber = 2,
    kFundAcctFieldNumber = 3,
    kCombinoFieldNumber = 4,
    kTradingDayFieldNumber = 5,
    kExCodeFieldNumber = 6,
    kSecuCodeFieldNumber = 7,
    kSecuNameFieldNumber = 8,
    kOrderPriceTypeFieldNumber = 9,
    kDirectionFieldNumber = 10,
    kOffsetFlagFieldNumber = 11,
    kHedgeFlagFieldNumber = 12,
    kTimeCondFieldNumber = 15,
    kBilateralIdFieldNumber = 18,
    kPurchaseWayFieldNumber = 19,
    kTextFieldNumber = 20,
    kQuoteIdFieldNumber = 30,
    kValidUntilTimeFieldNumber = 31,
    kMdentryTimeFieldNumber = 32,
    kClientRefIdFieldNumber = 33,
    kOrderInnerIdFieldNumber = 38,
    kOrderSysIdFieldNumber = 39,
    kInsertTimeFieldNumber = 40,
    kOrderSubmitStatusFieldNumber = 45,
    kOrderStatusFieldNumber = 46,
    kTradeDateFieldNumber = 47,
    kUpdateDateFieldNumber = 48,
    kUpdateTimeFieldNumber = 49,
    kCancelTimeFieldNumber = 50,
    kRetMsgFieldNumber = 52,
    kOrderSourceFieldNumber = 54,
    kClientIdFieldNumber = 55,
    kReserver1FieldNumber = 56,
    kReserver2FieldNumber = 57,
    kReserver3FieldNumber = 58,
    kReserver4FieldNumber = 59,
    kHeadFieldNumber = 1,
    kVolFieldNumber = 14,
    kPriceFieldNumber = 13,
    kUserIdFieldNumber = 17,
    kStrategyCodeFieldNumber = 16,
    kYtmFieldNumber = 21,
    kStrikeYeildFieldNumber = 22,
    kQuoteTypeFieldNumber = 23,
    kMaxFloorFieldNumber = 24,
    kMinTickSizeFieldNumber = 25,
    kSettleTypeFieldNumber = 26,
    kMatchTypeFieldNumber = 27,
    kDeliveryTypeFieldNumber = 28,
    kClearingMethodFieldNumber = 29,
    kRoutingTypeFieldNumber = 34,
    kMarketIndicatorFieldNumber = 35,
    kRealtimeUndertakeFlagFieldNumber = 36,
    kSubjectPartyTypeFieldNumber = 37,
    kTradePriceFieldNumber = 41,
    kAvgTradePriceFieldNumber = 42,
    kVolTradedFieldNumber = 43,
    kVolTotalFieldNumber = 44,
    kRetCodeFieldNumber = 51,
    kSettlementIdFieldNumber = 53,
    kSequenceNoFieldNumber = 60,
  };
  // string trade_acct = 2;
  void clear_trade_acct();
  const std::string& trade_acct() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_acct(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_acct();
  PROTOBUF_NODISCARD std::string* release_trade_acct();
  void set_allocated_trade_acct(std::string* trade_acct);
  private:
  const std::string& _internal_trade_acct() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_acct(const std::string& value);
  std::string* _internal_mutable_trade_acct();
  public:

  // string fund_acct = 3;
  void clear_fund_acct();
  const std::string& fund_acct() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fund_acct(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fund_acct();
  PROTOBUF_NODISCARD std::string* release_fund_acct();
  void set_allocated_fund_acct(std::string* fund_acct);
  private:
  const std::string& _internal_fund_acct() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fund_acct(const std::string& value);
  std::string* _internal_mutable_fund_acct();
  public:

  // string combino = 4;
  void clear_combino();
  const std::string& combino() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_combino(ArgT0&& arg0, ArgT... args);
  std::string* mutable_combino();
  PROTOBUF_NODISCARD std::string* release_combino();
  void set_allocated_combino(std::string* combino);
  private:
  const std::string& _internal_combino() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_combino(const std::string& value);
  std::string* _internal_mutable_combino();
  public:

  // string trading_day = 5;
  void clear_trading_day();
  const std::string& trading_day() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trading_day(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trading_day();
  PROTOBUF_NODISCARD std::string* release_trading_day();
  void set_allocated_trading_day(std::string* trading_day);
  private:
  const std::string& _internal_trading_day() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trading_day(const std::string& value);
  std::string* _internal_mutable_trading_day();
  public:

  // string ex_code = 6;
  void clear_ex_code();
  const std::string& ex_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ex_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ex_code();
  PROTOBUF_NODISCARD std::string* release_ex_code();
  void set_allocated_ex_code(std::string* ex_code);
  private:
  const std::string& _internal_ex_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ex_code(const std::string& value);
  std::string* _internal_mutable_ex_code();
  public:

  // string secu_code = 7;
  void clear_secu_code();
  const std::string& secu_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secu_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secu_code();
  PROTOBUF_NODISCARD std::string* release_secu_code();
  void set_allocated_secu_code(std::string* secu_code);
  private:
  const std::string& _internal_secu_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secu_code(const std::string& value);
  std::string* _internal_mutable_secu_code();
  public:

  // string secu_name = 8;
  void clear_secu_name();
  const std::string& secu_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secu_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secu_name();
  PROTOBUF_NODISCARD std::string* release_secu_name();
  void set_allocated_secu_name(std::string* secu_name);
  private:
  const std::string& _internal_secu_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secu_name(const std::string& value);
  std::string* _internal_mutable_secu_name();
  public:

  // string order_price_type = 9;
  void clear_order_price_type();
  const std::string& order_price_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_price_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_price_type();
  PROTOBUF_NODISCARD std::string* release_order_price_type();
  void set_allocated_order_price_type(std::string* order_price_type);
  private:
  const std::string& _internal_order_price_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_price_type(const std::string& value);
  std::string* _internal_mutable_order_price_type();
  public:

  // string direction = 10;
  void clear_direction();
  const std::string& direction() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_direction(ArgT0&& arg0, ArgT... args);
  std::string* mutable_direction();
  PROTOBUF_NODISCARD std::string* release_direction();
  void set_allocated_direction(std::string* direction);
  private:
  const std::string& _internal_direction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_direction(const std::string& value);
  std::string* _internal_mutable_direction();
  public:

  // string offset_flag = 11;
  void clear_offset_flag();
  const std::string& offset_flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_offset_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_offset_flag();
  PROTOBUF_NODISCARD std::string* release_offset_flag();
  void set_allocated_offset_flag(std::string* offset_flag);
  private:
  const std::string& _internal_offset_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_offset_flag(const std::string& value);
  std::string* _internal_mutable_offset_flag();
  public:

  // string hedge_flag = 12;
  void clear_hedge_flag();
  const std::string& hedge_flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hedge_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hedge_flag();
  PROTOBUF_NODISCARD std::string* release_hedge_flag();
  void set_allocated_hedge_flag(std::string* hedge_flag);
  private:
  const std::string& _internal_hedge_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hedge_flag(const std::string& value);
  std::string* _internal_mutable_hedge_flag();
  public:

  // string time_cond = 15;
  void clear_time_cond();
  const std::string& time_cond() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_time_cond(ArgT0&& arg0, ArgT... args);
  std::string* mutable_time_cond();
  PROTOBUF_NODISCARD std::string* release_time_cond();
  void set_allocated_time_cond(std::string* time_cond);
  private:
  const std::string& _internal_time_cond() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time_cond(const std::string& value);
  std::string* _internal_mutable_time_cond();
  public:

  // string bilateral_id = 18;
  void clear_bilateral_id();
  const std::string& bilateral_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bilateral_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bilateral_id();
  PROTOBUF_NODISCARD std::string* release_bilateral_id();
  void set_allocated_bilateral_id(std::string* bilateral_id);
  private:
  const std::string& _internal_bilateral_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bilateral_id(const std::string& value);
  std::string* _internal_mutable_bilateral_id();
  public:

  // string purchase_way = 19;
  void clear_purchase_way();
  const std::string& purchase_way() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_purchase_way(ArgT0&& arg0, ArgT... args);
  std::string* mutable_purchase_way();
  PROTOBUF_NODISCARD std::string* release_purchase_way();
  void set_allocated_purchase_way(std::string* purchase_way);
  private:
  const std::string& _internal_purchase_way() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_purchase_way(const std::string& value);
  std::string* _internal_mutable_purchase_way();
  public:

  // string text = 20;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string quote_id = 30;
  void clear_quote_id();
  const std::string& quote_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_quote_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_quote_id();
  PROTOBUF_NODISCARD std::string* release_quote_id();
  void set_allocated_quote_id(std::string* quote_id);
  private:
  const std::string& _internal_quote_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quote_id(const std::string& value);
  std::string* _internal_mutable_quote_id();
  public:

  // string valid_until_time = 31;
  void clear_valid_until_time();
  const std::string& valid_until_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_valid_until_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_valid_until_time();
  PROTOBUF_NODISCARD std::string* release_valid_until_time();
  void set_allocated_valid_until_time(std::string* valid_until_time);
  private:
  const std::string& _internal_valid_until_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_valid_until_time(const std::string& value);
  std::string* _internal_mutable_valid_until_time();
  public:

  // string mdentry_time = 32;
  void clear_mdentry_time();
  const std::string& mdentry_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mdentry_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mdentry_time();
  PROTOBUF_NODISCARD std::string* release_mdentry_time();
  void set_allocated_mdentry_time(std::string* mdentry_time);
  private:
  const std::string& _internal_mdentry_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mdentry_time(const std::string& value);
  std::string* _internal_mutable_mdentry_time();
  public:

  // string client_ref_id = 33;
  void clear_client_ref_id();
  const std::string& client_ref_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_ref_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_ref_id();
  PROTOBUF_NODISCARD std::string* release_client_ref_id();
  void set_allocated_client_ref_id(std::string* client_ref_id);
  private:
  const std::string& _internal_client_ref_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_ref_id(const std::string& value);
  std::string* _internal_mutable_client_ref_id();
  public:

  // string order_inner_id = 38;
  void clear_order_inner_id();
  const std::string& order_inner_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_inner_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_inner_id();
  PROTOBUF_NODISCARD std::string* release_order_inner_id();
  void set_allocated_order_inner_id(std::string* order_inner_id);
  private:
  const std::string& _internal_order_inner_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_inner_id(const std::string& value);
  std::string* _internal_mutable_order_inner_id();
  public:

  // string order_sys_id = 39;
  void clear_order_sys_id();
  const std::string& order_sys_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_sys_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_sys_id();
  PROTOBUF_NODISCARD std::string* release_order_sys_id();
  void set_allocated_order_sys_id(std::string* order_sys_id);
  private:
  const std::string& _internal_order_sys_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_sys_id(const std::string& value);
  std::string* _internal_mutable_order_sys_id();
  public:

  // string insert_time = 40;
  void clear_insert_time();
  const std::string& insert_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_insert_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_insert_time();
  PROTOBUF_NODISCARD std::string* release_insert_time();
  void set_allocated_insert_time(std::string* insert_time);
  private:
  const std::string& _internal_insert_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_insert_time(const std::string& value);
  std::string* _internal_mutable_insert_time();
  public:

  // string order_submit_status = 45;
  void clear_order_submit_status();
  const std::string& order_submit_status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_submit_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_submit_status();
  PROTOBUF_NODISCARD std::string* release_order_submit_status();
  void set_allocated_order_submit_status(std::string* order_submit_status);
  private:
  const std::string& _internal_order_submit_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_submit_status(const std::string& value);
  std::string* _internal_mutable_order_submit_status();
  public:

  // string order_status = 46;
  void clear_order_status();
  const std::string& order_status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_status();
  PROTOBUF_NODISCARD std::string* release_order_status();
  void set_allocated_order_status(std::string* order_status);
  private:
  const std::string& _internal_order_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_status(const std::string& value);
  std::string* _internal_mutable_order_status();
  public:

  // string trade_date = 47;
  void clear_trade_date();
  const std::string& trade_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_date();
  PROTOBUF_NODISCARD std::string* release_trade_date();
  void set_allocated_trade_date(std::string* trade_date);
  private:
  const std::string& _internal_trade_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_date(const std::string& value);
  std::string* _internal_mutable_trade_date();
  public:

  // string update_date = 48;
  void clear_update_date();
  const std::string& update_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_update_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_update_date();
  PROTOBUF_NODISCARD std::string* release_update_date();
  void set_allocated_update_date(std::string* update_date);
  private:
  const std::string& _internal_update_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_update_date(const std::string& value);
  std::string* _internal_mutable_update_date();
  public:

  // string update_time = 49;
  void clear_update_time();
  const std::string& update_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_update_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_update_time();
  PROTOBUF_NODISCARD std::string* release_update_time();
  void set_allocated_update_time(std::string* update_time);
  private:
  const std::string& _internal_update_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_update_time(const std::string& value);
  std::string* _internal_mutable_update_time();
  public:

  // string cancel_time = 50;
  void clear_cancel_time();
  const std::string& cancel_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cancel_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cancel_time();
  PROTOBUF_NODISCARD std::string* release_cancel_time();
  void set_allocated_cancel_time(std::string* cancel_time);
  private:
  const std::string& _internal_cancel_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cancel_time(const std::string& value);
  std::string* _internal_mutable_cancel_time();
  public:

  // string ret_msg = 52;
  void clear_ret_msg();
  const std::string& ret_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ret_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ret_msg();
  PROTOBUF_NODISCARD std::string* release_ret_msg();
  void set_allocated_ret_msg(std::string* ret_msg);
  private:
  const std::string& _internal_ret_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ret_msg(const std::string& value);
  std::string* _internal_mutable_ret_msg();
  public:

  // string order_source = 54;
  void clear_order_source();
  const std::string& order_source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_source();
  PROTOBUF_NODISCARD std::string* release_order_source();
  void set_allocated_order_source(std::string* order_source);
  private:
  const std::string& _internal_order_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_source(const std::string& value);
  std::string* _internal_mutable_order_source();
  public:

  // string client_id = 55;
  void clear_client_id();
  const std::string& client_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string reserver1 = 56;
  void clear_reserver1();
  const std::string& reserver1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserver1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserver1();
  PROTOBUF_NODISCARD std::string* release_reserver1();
  void set_allocated_reserver1(std::string* reserver1);
  private:
  const std::string& _internal_reserver1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserver1(const std::string& value);
  std::string* _internal_mutable_reserver1();
  public:

  // string reserver2 = 57;
  void clear_reserver2();
  const std::string& reserver2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserver2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserver2();
  PROTOBUF_NODISCARD std::string* release_reserver2();
  void set_allocated_reserver2(std::string* reserver2);
  private:
  const std::string& _internal_reserver2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserver2(const std::string& value);
  std::string* _internal_mutable_reserver2();
  public:

  // string reserver3 = 58;
  void clear_reserver3();
  const std::string& reserver3() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserver3(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserver3();
  PROTOBUF_NODISCARD std::string* release_reserver3();
  void set_allocated_reserver3(std::string* reserver3);
  private:
  const std::string& _internal_reserver3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserver3(const std::string& value);
  std::string* _internal_mutable_reserver3();
  public:

  // string reserver4 = 59;
  void clear_reserver4();
  const std::string& reserver4() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserver4(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserver4();
  PROTOBUF_NODISCARD std::string* release_reserver4();
  void set_allocated_reserver4(std::string* reserver4);
  private:
  const std::string& _internal_reserver4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserver4(const std::string& value);
  std::string* _internal_mutable_reserver4();
  public:

  // .message_head.head head = 1;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  const ::message_head::head& head() const;
  PROTOBUF_NODISCARD ::message_head::head* release_head();
  ::message_head::head* mutable_head();
  void set_allocated_head(::message_head::head* head);
  private:
  const ::message_head::head& _internal_head() const;
  ::message_head::head* _internal_mutable_head();
  public:
  void unsafe_arena_set_allocated_head(
      ::message_head::head* head);
  ::message_head::head* unsafe_arena_release_head();

  // uint64 vol = 14;
  void clear_vol();
  uint64_t vol() const;
  void set_vol(uint64_t value);
  private:
  uint64_t _internal_vol() const;
  void _internal_set_vol(uint64_t value);
  public:

  // float price = 13;
  void clear_price();
  float price() const;
  void set_price(float value);
  private:
  float _internal_price() const;
  void _internal_set_price(float value);
  public:

  // uint32 user_id = 17;
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // uint64 strategy_code = 16;
  void clear_strategy_code();
  uint64_t strategy_code() const;
  void set_strategy_code(uint64_t value);
  private:
  uint64_t _internal_strategy_code() const;
  void _internal_set_strategy_code(uint64_t value);
  public:

  // float ytm = 21;
  void clear_ytm();
  float ytm() const;
  void set_ytm(float value);
  private:
  float _internal_ytm() const;
  void _internal_set_ytm(float value);
  public:

  // float strike_yeild = 22;
  void clear_strike_yeild();
  float strike_yeild() const;
  void set_strike_yeild(float value);
  private:
  float _internal_strike_yeild() const;
  void _internal_set_strike_yeild(float value);
  public:

  // uint64 quote_type = 23;
  void clear_quote_type();
  uint64_t quote_type() const;
  void set_quote_type(uint64_t value);
  private:
  uint64_t _internal_quote_type() const;
  void _internal_set_quote_type(uint64_t value);
  public:

  // uint64 max_floor = 24;
  void clear_max_floor();
  uint64_t max_floor() const;
  void set_max_floor(uint64_t value);
  private:
  uint64_t _internal_max_floor() const;
  void _internal_set_max_floor(uint64_t value);
  public:

  // uint64 min_tick_size = 25;
  void clear_min_tick_size();
  uint64_t min_tick_size() const;
  void set_min_tick_size(uint64_t value);
  private:
  uint64_t _internal_min_tick_size() const;
  void _internal_set_min_tick_size(uint64_t value);
  public:

  // uint64 settle_type = 26;
  void clear_settle_type();
  uint64_t settle_type() const;
  void set_settle_type(uint64_t value);
  private:
  uint64_t _internal_settle_type() const;
  void _internal_set_settle_type(uint64_t value);
  public:

  // uint64 match_type = 27;
  void clear_match_type();
  uint64_t match_type() const;
  void set_match_type(uint64_t value);
  private:
  uint64_t _internal_match_type() const;
  void _internal_set_match_type(uint64_t value);
  public:

  // uint64 delivery_type = 28;
  void clear_delivery_type();
  uint64_t delivery_type() const;
  void set_delivery_type(uint64_t value);
  private:
  uint64_t _internal_delivery_type() const;
  void _internal_set_delivery_type(uint64_t value);
  public:

  // uint64 clearing_method = 29;
  void clear_clearing_method();
  uint64_t clearing_method() const;
  void set_clearing_method(uint64_t value);
  private:
  uint64_t _internal_clearing_method() const;
  void _internal_set_clearing_method(uint64_t value);
  public:

  // uint64 routing_type = 34;
  void clear_routing_type();
  uint64_t routing_type() const;
  void set_routing_type(uint64_t value);
  private:
  uint64_t _internal_routing_type() const;
  void _internal_set_routing_type(uint64_t value);
  public:

  // uint64 market_indicator = 35;
  void clear_market_indicator();
  uint64_t market_indicator() const;
  void set_market_indicator(uint64_t value);
  private:
  uint64_t _internal_market_indicator() const;
  void _internal_set_market_indicator(uint64_t value);
  public:

  // uint64 realtime_undertake_flag = 36;
  void clear_realtime_undertake_flag();
  uint64_t realtime_undertake_flag() const;
  void set_realtime_undertake_flag(uint64_t value);
  private:
  uint64_t _internal_realtime_undertake_flag() const;
  void _internal_set_realtime_undertake_flag(uint64_t value);
  public:

  // uint64 subject_party_type = 37;
  void clear_subject_party_type();
  uint64_t subject_party_type() const;
  void set_subject_party_type(uint64_t value);
  private:
  uint64_t _internal_subject_party_type() const;
  void _internal_set_subject_party_type(uint64_t value);
  public:

  // float trade_price = 41;
  void clear_trade_price();
  float trade_price() const;
  void set_trade_price(float value);
  private:
  float _internal_trade_price() const;
  void _internal_set_trade_price(float value);
  public:

  // float avg_trade_price = 42;
  void clear_avg_trade_price();
  float avg_trade_price() const;
  void set_avg_trade_price(float value);
  private:
  float _internal_avg_trade_price() const;
  void _internal_set_avg_trade_price(float value);
  public:

  // uint64 vol_traded = 43;
  void clear_vol_traded();
  uint64_t vol_traded() const;
  void set_vol_traded(uint64_t value);
  private:
  uint64_t _internal_vol_traded() const;
  void _internal_set_vol_traded(uint64_t value);
  public:

  // uint64 vol_total = 44;
  void clear_vol_total();
  uint64_t vol_total() const;
  void set_vol_total(uint64_t value);
  private:
  uint64_t _internal_vol_total() const;
  void _internal_set_vol_total(uint64_t value);
  public:

  // uint64 ret_code = 51;
  void clear_ret_code();
  uint64_t ret_code() const;
  void set_ret_code(uint64_t value);
  private:
  uint64_t _internal_ret_code() const;
  void _internal_set_ret_code(uint64_t value);
  public:

  // uint64 settlement_id = 53;
  void clear_settlement_id();
  uint64_t settlement_id() const;
  void set_settlement_id(uint64_t value);
  private:
  uint64_t _internal_settlement_id() const;
  void _internal_set_settlement_id(uint64_t value);
  public:

  // uint32 sequence_no = 60;
  void clear_sequence_no();
  uint32_t sequence_no() const;
  void set_sequence_no(uint32_t value);
  private:
  uint32_t _internal_sequence_no() const;
  void _internal_set_sequence_no(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ficc_message.ficc_Order_Rtn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_acct_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fund_acct_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr combino_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trading_day_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ex_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secu_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secu_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_price_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr direction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr offset_flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hedge_flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_cond_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bilateral_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr purchase_way_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quote_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr valid_until_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mdentry_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_ref_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_inner_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_sys_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr insert_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_submit_status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr update_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr update_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cancel_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ret_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserver1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserver2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserver3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserver4_;
  ::message_head::head* head_;
  uint64_t vol_;
  float price_;
  uint32_t user_id_;
  uint64_t strategy_code_;
  float ytm_;
  float strike_yeild_;
  uint64_t quote_type_;
  uint64_t max_floor_;
  uint64_t min_tick_size_;
  uint64_t settle_type_;
  uint64_t match_type_;
  uint64_t delivery_type_;
  uint64_t clearing_method_;
  uint64_t routing_type_;
  uint64_t market_indicator_;
  uint64_t realtime_undertake_flag_;
  uint64_t subject_party_type_;
  float trade_price_;
  float avg_trade_price_;
  uint64_t vol_traded_;
  uint64_t vol_total_;
  uint64_t ret_code_;
  uint64_t settlement_id_;
  uint32_t sequence_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ficc_2eproto;
};
// -------------------------------------------------------------------

class ficc_BilateralOrder_Req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ficc_message.ficc_BilateralOrder_Req) */ {
 public:
  inline ficc_BilateralOrder_Req() : ficc_BilateralOrder_Req(nullptr) {}
  ~ficc_BilateralOrder_Req() override;
  explicit PROTOBUF_CONSTEXPR ficc_BilateralOrder_Req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ficc_BilateralOrder_Req(const ficc_BilateralOrder_Req& from);
  ficc_BilateralOrder_Req(ficc_BilateralOrder_Req&& from) noexcept
    : ficc_BilateralOrder_Req() {
    *this = ::std::move(from);
  }

  inline ficc_BilateralOrder_Req& operator=(const ficc_BilateralOrder_Req& from) {
    CopyFrom(from);
    return *this;
  }
  inline ficc_BilateralOrder_Req& operator=(ficc_BilateralOrder_Req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ficc_BilateralOrder_Req& default_instance() {
    return *internal_default_instance();
  }
  static inline const ficc_BilateralOrder_Req* internal_default_instance() {
    return reinterpret_cast<const ficc_BilateralOrder_Req*>(
               &_ficc_BilateralOrder_Req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ficc_BilateralOrder_Req& a, ficc_BilateralOrder_Req& b) {
    a.Swap(&b);
  }
  inline void Swap(ficc_BilateralOrder_Req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ficc_BilateralOrder_Req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ficc_BilateralOrder_Req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ficc_BilateralOrder_Req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ficc_BilateralOrder_Req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ficc_BilateralOrder_Req& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ficc_BilateralOrder_Req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ficc_message.ficc_BilateralOrder_Req";
  }
  protected:
  explicit ficc_BilateralOrder_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradeAcctFieldNumber = 2,
    kSecuCodeFieldNumber = 3,
    kOrderPriceTypeFieldNumber = 4,
    kTimeCondFieldNumber = 9,
    kTextFieldNumber = 12,
    kOrderSysIdFieldNumber = 13,
    kValidUntilTimeFieldNumber = 26,
    kClientRefIdFieldNumber = 27,
    kReserver1FieldNumber = 30,
    kHeadFieldNumber = 1,
    kBidVolFieldNumber = 6,
    kBidPriceFieldNumber = 5,
    kAskPriceFieldNumber = 7,
    kAskVolFieldNumber = 8,
    kStrategyCodeFieldNumber = 11,
    kUserIdFieldNumber = 10,
    kBidYtmFieldNumber = 14,
    kBidLegsettlTypeFieldNumber = 16,
    kBidDeliveryTypeFieldNumber = 17,
    kBidStrikeYeildFieldNumber = 15,
    kAskYtmFieldNumber = 19,
    kBidClearingMethodFieldNumber = 18,
    kAskLegsettlTypeFieldNumber = 21,
    kAskDeliveryTypeFieldNumber = 22,
    kAskClearingMethodFieldNumber = 23,
    kQuoteTypeFieldNumber = 24,
    kMaxFloorFieldNumber = 25,
    kRoutingTypeFieldNumber = 28,
    kMarketIndicatorFieldNumber = 29,
    kAskStrikeYeildFieldNumber = 20,
  };
  // string trade_acct = 2;
  void clear_trade_acct();
  const std::string& trade_acct() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_acct(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_acct();
  PROTOBUF_NODISCARD std::string* release_trade_acct();
  void set_allocated_trade_acct(std::string* trade_acct);
  private:
  const std::string& _internal_trade_acct() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_acct(const std::string& value);
  std::string* _internal_mutable_trade_acct();
  public:

  // string secu_code = 3;
  void clear_secu_code();
  const std::string& secu_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secu_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secu_code();
  PROTOBUF_NODISCARD std::string* release_secu_code();
  void set_allocated_secu_code(std::string* secu_code);
  private:
  const std::string& _internal_secu_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secu_code(const std::string& value);
  std::string* _internal_mutable_secu_code();
  public:

  // string order_price_type = 4;
  void clear_order_price_type();
  const std::string& order_price_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_price_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_price_type();
  PROTOBUF_NODISCARD std::string* release_order_price_type();
  void set_allocated_order_price_type(std::string* order_price_type);
  private:
  const std::string& _internal_order_price_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_price_type(const std::string& value);
  std::string* _internal_mutable_order_price_type();
  public:

  // string time_cond = 9;
  void clear_time_cond();
  const std::string& time_cond() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_time_cond(ArgT0&& arg0, ArgT... args);
  std::string* mutable_time_cond();
  PROTOBUF_NODISCARD std::string* release_time_cond();
  void set_allocated_time_cond(std::string* time_cond);
  private:
  const std::string& _internal_time_cond() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time_cond(const std::string& value);
  std::string* _internal_mutable_time_cond();
  public:

  // string text = 12;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string order_sys_id = 13;
  void clear_order_sys_id();
  const std::string& order_sys_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_sys_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_sys_id();
  PROTOBUF_NODISCARD std::string* release_order_sys_id();
  void set_allocated_order_sys_id(std::string* order_sys_id);
  private:
  const std::string& _internal_order_sys_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_sys_id(const std::string& value);
  std::string* _internal_mutable_order_sys_id();
  public:

  // string valid_until_time = 26;
  void clear_valid_until_time();
  const std::string& valid_until_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_valid_until_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_valid_until_time();
  PROTOBUF_NODISCARD std::string* release_valid_until_time();
  void set_allocated_valid_until_time(std::string* valid_until_time);
  private:
  const std::string& _internal_valid_until_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_valid_until_time(const std::string& value);
  std::string* _internal_mutable_valid_until_time();
  public:

  // string client_ref_id = 27;
  void clear_client_ref_id();
  const std::string& client_ref_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_ref_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_ref_id();
  PROTOBUF_NODISCARD std::string* release_client_ref_id();
  void set_allocated_client_ref_id(std::string* client_ref_id);
  private:
  const std::string& _internal_client_ref_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_ref_id(const std::string& value);
  std::string* _internal_mutable_client_ref_id();
  public:

  // string reserver1 = 30;
  void clear_reserver1();
  const std::string& reserver1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserver1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserver1();
  PROTOBUF_NODISCARD std::string* release_reserver1();
  void set_allocated_reserver1(std::string* reserver1);
  private:
  const std::string& _internal_reserver1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserver1(const std::string& value);
  std::string* _internal_mutable_reserver1();
  public:

  // .message_head.head head = 1;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  const ::message_head::head& head() const;
  PROTOBUF_NODISCARD ::message_head::head* release_head();
  ::message_head::head* mutable_head();
  void set_allocated_head(::message_head::head* head);
  private:
  const ::message_head::head& _internal_head() const;
  ::message_head::head* _internal_mutable_head();
  public:
  void unsafe_arena_set_allocated_head(
      ::message_head::head* head);
  ::message_head::head* unsafe_arena_release_head();

  // uint64 bid_vol = 6;
  void clear_bid_vol();
  uint64_t bid_vol() const;
  void set_bid_vol(uint64_t value);
  private:
  uint64_t _internal_bid_vol() const;
  void _internal_set_bid_vol(uint64_t value);
  public:

  // float bid_price = 5;
  void clear_bid_price();
  float bid_price() const;
  void set_bid_price(float value);
  private:
  float _internal_bid_price() const;
  void _internal_set_bid_price(float value);
  public:

  // float ask_price = 7;
  void clear_ask_price();
  float ask_price() const;
  void set_ask_price(float value);
  private:
  float _internal_ask_price() const;
  void _internal_set_ask_price(float value);
  public:

  // uint64 ask_vol = 8;
  void clear_ask_vol();
  uint64_t ask_vol() const;
  void set_ask_vol(uint64_t value);
  private:
  uint64_t _internal_ask_vol() const;
  void _internal_set_ask_vol(uint64_t value);
  public:

  // uint64 strategy_code = 11;
  void clear_strategy_code();
  uint64_t strategy_code() const;
  void set_strategy_code(uint64_t value);
  private:
  uint64_t _internal_strategy_code() const;
  void _internal_set_strategy_code(uint64_t value);
  public:

  // uint32 user_id = 10;
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // float bid_ytm = 14;
  void clear_bid_ytm();
  float bid_ytm() const;
  void set_bid_ytm(float value);
  private:
  float _internal_bid_ytm() const;
  void _internal_set_bid_ytm(float value);
  public:

  // uint64 bid_legsettl_type = 16;
  void clear_bid_legsettl_type();
  uint64_t bid_legsettl_type() const;
  void set_bid_legsettl_type(uint64_t value);
  private:
  uint64_t _internal_bid_legsettl_type() const;
  void _internal_set_bid_legsettl_type(uint64_t value);
  public:

  // uint64 bid_delivery_type = 17;
  void clear_bid_delivery_type();
  uint64_t bid_delivery_type() const;
  void set_bid_delivery_type(uint64_t value);
  private:
  uint64_t _internal_bid_delivery_type() const;
  void _internal_set_bid_delivery_type(uint64_t value);
  public:

  // float bid_strike_yeild = 15;
  void clear_bid_strike_yeild();
  float bid_strike_yeild() const;
  void set_bid_strike_yeild(float value);
  private:
  float _internal_bid_strike_yeild() const;
  void _internal_set_bid_strike_yeild(float value);
  public:

  // float ask_ytm = 19;
  void clear_ask_ytm();
  float ask_ytm() const;
  void set_ask_ytm(float value);
  private:
  float _internal_ask_ytm() const;
  void _internal_set_ask_ytm(float value);
  public:

  // uint64 bid_clearing_method = 18;
  void clear_bid_clearing_method();
  uint64_t bid_clearing_method() const;
  void set_bid_clearing_method(uint64_t value);
  private:
  uint64_t _internal_bid_clearing_method() const;
  void _internal_set_bid_clearing_method(uint64_t value);
  public:

  // uint64 ask_legsettl_type = 21;
  void clear_ask_legsettl_type();
  uint64_t ask_legsettl_type() const;
  void set_ask_legsettl_type(uint64_t value);
  private:
  uint64_t _internal_ask_legsettl_type() const;
  void _internal_set_ask_legsettl_type(uint64_t value);
  public:

  // uint64 ask_delivery_type = 22;
  void clear_ask_delivery_type();
  uint64_t ask_delivery_type() const;
  void set_ask_delivery_type(uint64_t value);
  private:
  uint64_t _internal_ask_delivery_type() const;
  void _internal_set_ask_delivery_type(uint64_t value);
  public:

  // uint64 ask_clearing_method = 23;
  void clear_ask_clearing_method();
  uint64_t ask_clearing_method() const;
  void set_ask_clearing_method(uint64_t value);
  private:
  uint64_t _internal_ask_clearing_method() const;
  void _internal_set_ask_clearing_method(uint64_t value);
  public:

  // uint64 quote_type = 24;
  void clear_quote_type();
  uint64_t quote_type() const;
  void set_quote_type(uint64_t value);
  private:
  uint64_t _internal_quote_type() const;
  void _internal_set_quote_type(uint64_t value);
  public:

  // uint64 max_floor = 25;
  void clear_max_floor();
  uint64_t max_floor() const;
  void set_max_floor(uint64_t value);
  private:
  uint64_t _internal_max_floor() const;
  void _internal_set_max_floor(uint64_t value);
  public:

  // uint64 routing_type = 28;
  void clear_routing_type();
  uint64_t routing_type() const;
  void set_routing_type(uint64_t value);
  private:
  uint64_t _internal_routing_type() const;
  void _internal_set_routing_type(uint64_t value);
  public:

  // uint64 market_indicator = 29;
  void clear_market_indicator();
  uint64_t market_indicator() const;
  void set_market_indicator(uint64_t value);
  private:
  uint64_t _internal_market_indicator() const;
  void _internal_set_market_indicator(uint64_t value);
  public:

  // float ask_strike_yeild = 20;
  void clear_ask_strike_yeild();
  float ask_strike_yeild() const;
  void set_ask_strike_yeild(float value);
  private:
  float _internal_ask_strike_yeild() const;
  void _internal_set_ask_strike_yeild(float value);
  public:

  // @@protoc_insertion_point(class_scope:ficc_message.ficc_BilateralOrder_Req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_acct_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secu_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_price_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_cond_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_sys_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr valid_until_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_ref_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserver1_;
  ::message_head::head* head_;
  uint64_t bid_vol_;
  float bid_price_;
  float ask_price_;
  uint64_t ask_vol_;
  uint64_t strategy_code_;
  uint32_t user_id_;
  float bid_ytm_;
  uint64_t bid_legsettl_type_;
  uint64_t bid_delivery_type_;
  float bid_strike_yeild_;
  float ask_ytm_;
  uint64_t bid_clearing_method_;
  uint64_t ask_legsettl_type_;
  uint64_t ask_delivery_type_;
  uint64_t ask_clearing_method_;
  uint64_t quote_type_;
  uint64_t max_floor_;
  uint64_t routing_type_;
  uint64_t market_indicator_;
  float ask_strike_yeild_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ficc_2eproto;
};
// -------------------------------------------------------------------

class ficc_BilateralOrder_Rtn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ficc_message.ficc_BilateralOrder_Rtn) */ {
 public:
  inline ficc_BilateralOrder_Rtn() : ficc_BilateralOrder_Rtn(nullptr) {}
  ~ficc_BilateralOrder_Rtn() override;
  explicit PROTOBUF_CONSTEXPR ficc_BilateralOrder_Rtn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ficc_BilateralOrder_Rtn(const ficc_BilateralOrder_Rtn& from);
  ficc_BilateralOrder_Rtn(ficc_BilateralOrder_Rtn&& from) noexcept
    : ficc_BilateralOrder_Rtn() {
    *this = ::std::move(from);
  }

  inline ficc_BilateralOrder_Rtn& operator=(const ficc_BilateralOrder_Rtn& from) {
    CopyFrom(from);
    return *this;
  }
  inline ficc_BilateralOrder_Rtn& operator=(ficc_BilateralOrder_Rtn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ficc_BilateralOrder_Rtn& default_instance() {
    return *internal_default_instance();
  }
  static inline const ficc_BilateralOrder_Rtn* internal_default_instance() {
    return reinterpret_cast<const ficc_BilateralOrder_Rtn*>(
               &_ficc_BilateralOrder_Rtn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ficc_BilateralOrder_Rtn& a, ficc_BilateralOrder_Rtn& b) {
    a.Swap(&b);
  }
  inline void Swap(ficc_BilateralOrder_Rtn* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ficc_BilateralOrder_Rtn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ficc_BilateralOrder_Rtn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ficc_BilateralOrder_Rtn>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ficc_BilateralOrder_Rtn& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ficc_BilateralOrder_Rtn& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ficc_BilateralOrder_Rtn* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ficc_message.ficc_BilateralOrder_Rtn";
  }
  protected:
  explicit ficc_BilateralOrder_Rtn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradeAcctFieldNumber = 2,
    kFundAcctFieldNumber = 3,
    kCombinoFieldNumber = 4,
    kExCodeFieldNumber = 6,
    kCommodityTypeFieldNumber = 7,
    kSecuCodeFieldNumber = 8,
    kSecuNameFieldNumber = 9,
    kOrderPriceTypeFieldNumber = 10,
    kOffsetFlagFieldNumber = 11,
    kHedgeFlagFieldNumber = 12,
    kBilateralIdFieldNumber = 13,
    kTimeCondFieldNumber = 18,
    kTextFieldNumber = 20,
    kOrderSysIdFieldNumber = 21,
    kTradeDateFieldNumber = 22,
    kInsertTimeFieldNumber = 23,
    kValidUntilTimeFieldNumber = 36,
    kClientRefIdFieldNumber = 37,
    kTradingDayFieldNumber = 40,
    kOrderSubmitStatusFieldNumber = 45,
    kOrderStatusFieldNumber = 46,
    kUpdateTimeFieldNumber = 47,
    kCancelTimeFieldNumber = 48,
    kRetMsgFieldNumber = 50,
    kActionFlagFieldNumber = 51,
    kOrderSourceFieldNumber = 52,
    kHeadFieldNumber = 1,
    kUserIdFieldNumber = 5,
    kBidPriceFieldNumber = 14,
    kBidVolFieldNumber = 15,
    kAskVolFieldNumber = 17,
    kStrategyCodeFieldNumber = 19,
    kAskPriceFieldNumber = 16,
    kBidYtmFieldNumber = 24,
    kBidLegsettlTypeFieldNumber = 26,
    kBidDeliveryTypeFieldNumber = 27,
    kBidStrikeYeildFieldNumber = 25,
    kAskYtmFieldNumber = 29,
    kBidClearingMethodFieldNumber = 28,
    kAskLegsettlTypeFieldNumber = 31,
    kAskDeliveryTypeFieldNumber = 32,
    kAskClearingMethodFieldNumber = 33,
    kQuoteTypeFieldNumber = 34,
    kMaxFloorFieldNumber = 35,
    kRoutingTypeFieldNumber = 38,
    kMarketIndicatorFieldNumber = 39,
    kAskVolTradedFieldNumber = 41,
    kAskStrikeYeildFieldNumber = 30,
    kSequenceNoFieldNumber = 53,
    kAskVolTotalFieldNumber = 42,
    kBidVolTradedFieldNumber = 43,
    kBidVolTotalFieldNumber = 44,
    kRetCodeFieldNumber = 49,
  };
  // string trade_acct = 2;
  void clear_trade_acct();
  const std::string& trade_acct() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_acct(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_acct();
  PROTOBUF_NODISCARD std::string* release_trade_acct();
  void set_allocated_trade_acct(std::string* trade_acct);
  private:
  const std::string& _internal_trade_acct() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_acct(const std::string& value);
  std::string* _internal_mutable_trade_acct();
  public:

  // string fund_acct = 3;
  void clear_fund_acct();
  const std::string& fund_acct() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fund_acct(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fund_acct();
  PROTOBUF_NODISCARD std::string* release_fund_acct();
  void set_allocated_fund_acct(std::string* fund_acct);
  private:
  const std::string& _internal_fund_acct() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fund_acct(const std::string& value);
  std::string* _internal_mutable_fund_acct();
  public:

  // string combino = 4;
  void clear_combino();
  const std::string& combino() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_combino(ArgT0&& arg0, ArgT... args);
  std::string* mutable_combino();
  PROTOBUF_NODISCARD std::string* release_combino();
  void set_allocated_combino(std::string* combino);
  private:
  const std::string& _internal_combino() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_combino(const std::string& value);
  std::string* _internal_mutable_combino();
  public:

  // string ex_code = 6;
  void clear_ex_code();
  const std::string& ex_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ex_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ex_code();
  PROTOBUF_NODISCARD std::string* release_ex_code();
  void set_allocated_ex_code(std::string* ex_code);
  private:
  const std::string& _internal_ex_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ex_code(const std::string& value);
  std::string* _internal_mutable_ex_code();
  public:

  // string commodity_type = 7;
  void clear_commodity_type();
  const std::string& commodity_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_commodity_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_commodity_type();
  PROTOBUF_NODISCARD std::string* release_commodity_type();
  void set_allocated_commodity_type(std::string* commodity_type);
  private:
  const std::string& _internal_commodity_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_commodity_type(const std::string& value);
  std::string* _internal_mutable_commodity_type();
  public:

  // string secu_code = 8;
  void clear_secu_code();
  const std::string& secu_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secu_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secu_code();
  PROTOBUF_NODISCARD std::string* release_secu_code();
  void set_allocated_secu_code(std::string* secu_code);
  private:
  const std::string& _internal_secu_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secu_code(const std::string& value);
  std::string* _internal_mutable_secu_code();
  public:

  // string secu_name = 9;
  void clear_secu_name();
  const std::string& secu_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secu_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secu_name();
  PROTOBUF_NODISCARD std::string* release_secu_name();
  void set_allocated_secu_name(std::string* secu_name);
  private:
  const std::string& _internal_secu_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secu_name(const std::string& value);
  std::string* _internal_mutable_secu_name();
  public:

  // string order_price_type = 10;
  void clear_order_price_type();
  const std::string& order_price_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_price_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_price_type();
  PROTOBUF_NODISCARD std::string* release_order_price_type();
  void set_allocated_order_price_type(std::string* order_price_type);
  private:
  const std::string& _internal_order_price_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_price_type(const std::string& value);
  std::string* _internal_mutable_order_price_type();
  public:

  // string offset_flag = 11;
  void clear_offset_flag();
  const std::string& offset_flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_offset_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_offset_flag();
  PROTOBUF_NODISCARD std::string* release_offset_flag();
  void set_allocated_offset_flag(std::string* offset_flag);
  private:
  const std::string& _internal_offset_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_offset_flag(const std::string& value);
  std::string* _internal_mutable_offset_flag();
  public:

  // string hedge_flag = 12;
  void clear_hedge_flag();
  const std::string& hedge_flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hedge_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hedge_flag();
  PROTOBUF_NODISCARD std::string* release_hedge_flag();
  void set_allocated_hedge_flag(std::string* hedge_flag);
  private:
  const std::string& _internal_hedge_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hedge_flag(const std::string& value);
  std::string* _internal_mutable_hedge_flag();
  public:

  // string bilateral_id = 13;
  void clear_bilateral_id();
  const std::string& bilateral_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bilateral_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bilateral_id();
  PROTOBUF_NODISCARD std::string* release_bilateral_id();
  void set_allocated_bilateral_id(std::string* bilateral_id);
  private:
  const std::string& _internal_bilateral_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bilateral_id(const std::string& value);
  std::string* _internal_mutable_bilateral_id();
  public:

  // string time_cond = 18;
  void clear_time_cond();
  const std::string& time_cond() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_time_cond(ArgT0&& arg0, ArgT... args);
  std::string* mutable_time_cond();
  PROTOBUF_NODISCARD std::string* release_time_cond();
  void set_allocated_time_cond(std::string* time_cond);
  private:
  const std::string& _internal_time_cond() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time_cond(const std::string& value);
  std::string* _internal_mutable_time_cond();
  public:

  // string text = 20;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string order_sys_id = 21;
  void clear_order_sys_id();
  const std::string& order_sys_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_sys_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_sys_id();
  PROTOBUF_NODISCARD std::string* release_order_sys_id();
  void set_allocated_order_sys_id(std::string* order_sys_id);
  private:
  const std::string& _internal_order_sys_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_sys_id(const std::string& value);
  std::string* _internal_mutable_order_sys_id();
  public:

  // string trade_date = 22;
  void clear_trade_date();
  const std::string& trade_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_date();
  PROTOBUF_NODISCARD std::string* release_trade_date();
  void set_allocated_trade_date(std::string* trade_date);
  private:
  const std::string& _internal_trade_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_date(const std::string& value);
  std::string* _internal_mutable_trade_date();
  public:

  // string insert_time = 23;
  void clear_insert_time();
  const std::string& insert_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_insert_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_insert_time();
  PROTOBUF_NODISCARD std::string* release_insert_time();
  void set_allocated_insert_time(std::string* insert_time);
  private:
  const std::string& _internal_insert_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_insert_time(const std::string& value);
  std::string* _internal_mutable_insert_time();
  public:

  // string valid_until_time = 36;
  void clear_valid_until_time();
  const std::string& valid_until_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_valid_until_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_valid_until_time();
  PROTOBUF_NODISCARD std::string* release_valid_until_time();
  void set_allocated_valid_until_time(std::string* valid_until_time);
  private:
  const std::string& _internal_valid_until_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_valid_until_time(const std::string& value);
  std::string* _internal_mutable_valid_until_time();
  public:

  // string client_ref_id = 37;
  void clear_client_ref_id();
  const std::string& client_ref_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_ref_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_ref_id();
  PROTOBUF_NODISCARD std::string* release_client_ref_id();
  void set_allocated_client_ref_id(std::string* client_ref_id);
  private:
  const std::string& _internal_client_ref_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_ref_id(const std::string& value);
  std::string* _internal_mutable_client_ref_id();
  public:

  // string trading_day = 40;
  void clear_trading_day();
  const std::string& trading_day() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trading_day(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trading_day();
  PROTOBUF_NODISCARD std::string* release_trading_day();
  void set_allocated_trading_day(std::string* trading_day);
  private:
  const std::string& _internal_trading_day() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trading_day(const std::string& value);
  std::string* _internal_mutable_trading_day();
  public:

  // string order_submit_status = 45;
  void clear_order_submit_status();
  const std::string& order_submit_status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_submit_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_submit_status();
  PROTOBUF_NODISCARD std::string* release_order_submit_status();
  void set_allocated_order_submit_status(std::string* order_submit_status);
  private:
  const std::string& _internal_order_submit_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_submit_status(const std::string& value);
  std::string* _internal_mutable_order_submit_status();
  public:

  // string order_status = 46;
  void clear_order_status();
  const std::string& order_status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_status();
  PROTOBUF_NODISCARD std::string* release_order_status();
  void set_allocated_order_status(std::string* order_status);
  private:
  const std::string& _internal_order_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_status(const std::string& value);
  std::string* _internal_mutable_order_status();
  public:

  // string update_time = 47;
  void clear_update_time();
  const std::string& update_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_update_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_update_time();
  PROTOBUF_NODISCARD std::string* release_update_time();
  void set_allocated_update_time(std::string* update_time);
  private:
  const std::string& _internal_update_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_update_time(const std::string& value);
  std::string* _internal_mutable_update_time();
  public:

  // string cancel_time = 48;
  void clear_cancel_time();
  const std::string& cancel_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cancel_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cancel_time();
  PROTOBUF_NODISCARD std::string* release_cancel_time();
  void set_allocated_cancel_time(std::string* cancel_time);
  private:
  const std::string& _internal_cancel_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cancel_time(const std::string& value);
  std::string* _internal_mutable_cancel_time();
  public:

  // string ret_msg = 50;
  void clear_ret_msg();
  const std::string& ret_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ret_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ret_msg();
  PROTOBUF_NODISCARD std::string* release_ret_msg();
  void set_allocated_ret_msg(std::string* ret_msg);
  private:
  const std::string& _internal_ret_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ret_msg(const std::string& value);
  std::string* _internal_mutable_ret_msg();
  public:

  // string action_flag = 51;
  void clear_action_flag();
  const std::string& action_flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action_flag();
  PROTOBUF_NODISCARD std::string* release_action_flag();
  void set_allocated_action_flag(std::string* action_flag);
  private:
  const std::string& _internal_action_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action_flag(const std::string& value);
  std::string* _internal_mutable_action_flag();
  public:

  // string order_source = 52;
  void clear_order_source();
  const std::string& order_source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_source();
  PROTOBUF_NODISCARD std::string* release_order_source();
  void set_allocated_order_source(std::string* order_source);
  private:
  const std::string& _internal_order_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_source(const std::string& value);
  std::string* _internal_mutable_order_source();
  public:

  // .message_head.head head = 1;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  const ::message_head::head& head() const;
  PROTOBUF_NODISCARD ::message_head::head* release_head();
  ::message_head::head* mutable_head();
  void set_allocated_head(::message_head::head* head);
  private:
  const ::message_head::head& _internal_head() const;
  ::message_head::head* _internal_mutable_head();
  public:
  void unsafe_arena_set_allocated_head(
      ::message_head::head* head);
  ::message_head::head* unsafe_arena_release_head();

  // uint32 user_id = 5;
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // float bid_price = 14;
  void clear_bid_price();
  float bid_price() const;
  void set_bid_price(float value);
  private:
  float _internal_bid_price() const;
  void _internal_set_bid_price(float value);
  public:

  // uint64 bid_vol = 15;
  void clear_bid_vol();
  uint64_t bid_vol() const;
  void set_bid_vol(uint64_t value);
  private:
  uint64_t _internal_bid_vol() const;
  void _internal_set_bid_vol(uint64_t value);
  public:

  // uint64 ask_vol = 17;
  void clear_ask_vol();
  uint64_t ask_vol() const;
  void set_ask_vol(uint64_t value);
  private:
  uint64_t _internal_ask_vol() const;
  void _internal_set_ask_vol(uint64_t value);
  public:

  // uint64 strategy_code = 19;
  void clear_strategy_code();
  uint64_t strategy_code() const;
  void set_strategy_code(uint64_t value);
  private:
  uint64_t _internal_strategy_code() const;
  void _internal_set_strategy_code(uint64_t value);
  public:

  // float ask_price = 16;
  void clear_ask_price();
  float ask_price() const;
  void set_ask_price(float value);
  private:
  float _internal_ask_price() const;
  void _internal_set_ask_price(float value);
  public:

  // float bid_ytm = 24;
  void clear_bid_ytm();
  float bid_ytm() const;
  void set_bid_ytm(float value);
  private:
  float _internal_bid_ytm() const;
  void _internal_set_bid_ytm(float value);
  public:

  // uint64 bid_legsettl_type = 26;
  void clear_bid_legsettl_type();
  uint64_t bid_legsettl_type() const;
  void set_bid_legsettl_type(uint64_t value);
  private:
  uint64_t _internal_bid_legsettl_type() const;
  void _internal_set_bid_legsettl_type(uint64_t value);
  public:

  // uint64 bid_delivery_type = 27;
  void clear_bid_delivery_type();
  uint64_t bid_delivery_type() const;
  void set_bid_delivery_type(uint64_t value);
  private:
  uint64_t _internal_bid_delivery_type() const;
  void _internal_set_bid_delivery_type(uint64_t value);
  public:

  // float bid_strike_yeild = 25;
  void clear_bid_strike_yeild();
  float bid_strike_yeild() const;
  void set_bid_strike_yeild(float value);
  private:
  float _internal_bid_strike_yeild() const;
  void _internal_set_bid_strike_yeild(float value);
  public:

  // float ask_ytm = 29;
  void clear_ask_ytm();
  float ask_ytm() const;
  void set_ask_ytm(float value);
  private:
  float _internal_ask_ytm() const;
  void _internal_set_ask_ytm(float value);
  public:

  // uint64 bid_clearing_method = 28;
  void clear_bid_clearing_method();
  uint64_t bid_clearing_method() const;
  void set_bid_clearing_method(uint64_t value);
  private:
  uint64_t _internal_bid_clearing_method() const;
  void _internal_set_bid_clearing_method(uint64_t value);
  public:

  // uint64 ask_legsettl_type = 31;
  void clear_ask_legsettl_type();
  uint64_t ask_legsettl_type() const;
  void set_ask_legsettl_type(uint64_t value);
  private:
  uint64_t _internal_ask_legsettl_type() const;
  void _internal_set_ask_legsettl_type(uint64_t value);
  public:

  // uint64 ask_delivery_type = 32;
  void clear_ask_delivery_type();
  uint64_t ask_delivery_type() const;
  void set_ask_delivery_type(uint64_t value);
  private:
  uint64_t _internal_ask_delivery_type() const;
  void _internal_set_ask_delivery_type(uint64_t value);
  public:

  // uint64 ask_clearing_method = 33;
  void clear_ask_clearing_method();
  uint64_t ask_clearing_method() const;
  void set_ask_clearing_method(uint64_t value);
  private:
  uint64_t _internal_ask_clearing_method() const;
  void _internal_set_ask_clearing_method(uint64_t value);
  public:

  // uint64 quote_type = 34;
  void clear_quote_type();
  uint64_t quote_type() const;
  void set_quote_type(uint64_t value);
  private:
  uint64_t _internal_quote_type() const;
  void _internal_set_quote_type(uint64_t value);
  public:

  // uint64 max_floor = 35;
  void clear_max_floor();
  uint64_t max_floor() const;
  void set_max_floor(uint64_t value);
  private:
  uint64_t _internal_max_floor() const;
  void _internal_set_max_floor(uint64_t value);
  public:

  // uint64 routing_type = 38;
  void clear_routing_type();
  uint64_t routing_type() const;
  void set_routing_type(uint64_t value);
  private:
  uint64_t _internal_routing_type() const;
  void _internal_set_routing_type(uint64_t value);
  public:

  // uint64 market_indicator = 39;
  void clear_market_indicator();
  uint64_t market_indicator() const;
  void set_market_indicator(uint64_t value);
  private:
  uint64_t _internal_market_indicator() const;
  void _internal_set_market_indicator(uint64_t value);
  public:

  // uint64 ask_vol_traded = 41;
  void clear_ask_vol_traded();
  uint64_t ask_vol_traded() const;
  void set_ask_vol_traded(uint64_t value);
  private:
  uint64_t _internal_ask_vol_traded() const;
  void _internal_set_ask_vol_traded(uint64_t value);
  public:

  // float ask_strike_yeild = 30;
  void clear_ask_strike_yeild();
  float ask_strike_yeild() const;
  void set_ask_strike_yeild(float value);
  private:
  float _internal_ask_strike_yeild() const;
  void _internal_set_ask_strike_yeild(float value);
  public:

  // uint32 sequence_no = 53;
  void clear_sequence_no();
  uint32_t sequence_no() const;
  void set_sequence_no(uint32_t value);
  private:
  uint32_t _internal_sequence_no() const;
  void _internal_set_sequence_no(uint32_t value);
  public:

  // uint64 ask_vol_total = 42;
  void clear_ask_vol_total();
  uint64_t ask_vol_total() const;
  void set_ask_vol_total(uint64_t value);
  private:
  uint64_t _internal_ask_vol_total() const;
  void _internal_set_ask_vol_total(uint64_t value);
  public:

  // uint64 bid_vol_traded = 43;
  void clear_bid_vol_traded();
  uint64_t bid_vol_traded() const;
  void set_bid_vol_traded(uint64_t value);
  private:
  uint64_t _internal_bid_vol_traded() const;
  void _internal_set_bid_vol_traded(uint64_t value);
  public:

  // uint64 bid_vol_total = 44;
  void clear_bid_vol_total();
  uint64_t bid_vol_total() const;
  void set_bid_vol_total(uint64_t value);
  private:
  uint64_t _internal_bid_vol_total() const;
  void _internal_set_bid_vol_total(uint64_t value);
  public:

  // uint64 ret_code = 49;
  void clear_ret_code();
  uint64_t ret_code() const;
  void set_ret_code(uint64_t value);
  private:
  uint64_t _internal_ret_code() const;
  void _internal_set_ret_code(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ficc_message.ficc_BilateralOrder_Rtn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_acct_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fund_acct_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr combino_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ex_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commodity_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secu_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secu_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_price_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr offset_flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hedge_flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bilateral_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_cond_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_sys_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr insert_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr valid_until_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_ref_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trading_day_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_submit_status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr update_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cancel_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ret_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_source_;
  ::message_head::head* head_;
  uint32_t user_id_;
  float bid_price_;
  uint64_t bid_vol_;
  uint64_t ask_vol_;
  uint64_t strategy_code_;
  float ask_price_;
  float bid_ytm_;
  uint64_t bid_legsettl_type_;
  uint64_t bid_delivery_type_;
  float bid_strike_yeild_;
  float ask_ytm_;
  uint64_t bid_clearing_method_;
  uint64_t ask_legsettl_type_;
  uint64_t ask_delivery_type_;
  uint64_t ask_clearing_method_;
  uint64_t quote_type_;
  uint64_t max_floor_;
  uint64_t routing_type_;
  uint64_t market_indicator_;
  uint64_t ask_vol_traded_;
  float ask_strike_yeild_;
  uint32_t sequence_no_;
  uint64_t ask_vol_total_;
  uint64_t bid_vol_traded_;
  uint64_t bid_vol_total_;
  uint64_t ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ficc_2eproto;
};
// -------------------------------------------------------------------

class ficc_SystemMonitor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ficc_message.ficc_SystemMonitor) */ {
 public:
  inline ficc_SystemMonitor() : ficc_SystemMonitor(nullptr) {}
  ~ficc_SystemMonitor() override;
  explicit PROTOBUF_CONSTEXPR ficc_SystemMonitor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ficc_SystemMonitor(const ficc_SystemMonitor& from);
  ficc_SystemMonitor(ficc_SystemMonitor&& from) noexcept
    : ficc_SystemMonitor() {
    *this = ::std::move(from);
  }

  inline ficc_SystemMonitor& operator=(const ficc_SystemMonitor& from) {
    CopyFrom(from);
    return *this;
  }
  inline ficc_SystemMonitor& operator=(ficc_SystemMonitor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ficc_SystemMonitor& default_instance() {
    return *internal_default_instance();
  }
  static inline const ficc_SystemMonitor* internal_default_instance() {
    return reinterpret_cast<const ficc_SystemMonitor*>(
               &_ficc_SystemMonitor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ficc_SystemMonitor& a, ficc_SystemMonitor& b) {
    a.Swap(&b);
  }
  inline void Swap(ficc_SystemMonitor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ficc_SystemMonitor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ficc_SystemMonitor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ficc_SystemMonitor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ficc_SystemMonitor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ficc_SystemMonitor& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ficc_SystemMonitor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ficc_message.ficc_SystemMonitor";
  }
  protected:
  explicit ficc_SystemMonitor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kSendTimeFieldNumber = 4,
    kTkernelIpFieldNumber = 5,
    kTradeDayFieldNumber = 6,
    kHeadFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string send_time = 4;
  void clear_send_time();
  const std::string& send_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_send_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_send_time();
  PROTOBUF_NODISCARD std::string* release_send_time();
  void set_allocated_send_time(std::string* send_time);
  private:
  const std::string& _internal_send_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_send_time(const std::string& value);
  std::string* _internal_mutable_send_time();
  public:

  // string tkernel_ip = 5;
  void clear_tkernel_ip();
  const std::string& tkernel_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tkernel_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tkernel_ip();
  PROTOBUF_NODISCARD std::string* release_tkernel_ip();
  void set_allocated_tkernel_ip(std::string* tkernel_ip);
  private:
  const std::string& _internal_tkernel_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tkernel_ip(const std::string& value);
  std::string* _internal_mutable_tkernel_ip();
  public:

  // string trade_day = 6;
  void clear_trade_day();
  const std::string& trade_day() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_day(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_day();
  PROTOBUF_NODISCARD std::string* release_trade_day();
  void set_allocated_trade_day(std::string* trade_day);
  private:
  const std::string& _internal_trade_day() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_day(const std::string& value);
  std::string* _internal_mutable_trade_day();
  public:

  // .message_head.head head = 1;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  const ::message_head::head& head() const;
  PROTOBUF_NODISCARD ::message_head::head* release_head();
  ::message_head::head* mutable_head();
  void set_allocated_head(::message_head::head* head);
  private:
  const ::message_head::head& _internal_head() const;
  ::message_head::head* _internal_mutable_head();
  public:
  void unsafe_arena_set_allocated_head(
      ::message_head::head* head);
  ::message_head::head* unsafe_arena_release_head();

  // uint32 status = 2;
  void clear_status();
  uint32_t status() const;
  void set_status(uint32_t value);
  private:
  uint32_t _internal_status() const;
  void _internal_set_status(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ficc_message.ficc_SystemMonitor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr send_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tkernel_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_day_;
  ::message_head::head* head_;
  uint32_t status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ficc_2eproto;
};
// -------------------------------------------------------------------

class ficc_OrderAction_Req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ficc_message.ficc_OrderAction_Req) */ {
 public:
  inline ficc_OrderAction_Req() : ficc_OrderAction_Req(nullptr) {}
  ~ficc_OrderAction_Req() override;
  explicit PROTOBUF_CONSTEXPR ficc_OrderAction_Req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ficc_OrderAction_Req(const ficc_OrderAction_Req& from);
  ficc_OrderAction_Req(ficc_OrderAction_Req&& from) noexcept
    : ficc_OrderAction_Req() {
    *this = ::std::move(from);
  }

  inline ficc_OrderAction_Req& operator=(const ficc_OrderAction_Req& from) {
    CopyFrom(from);
    return *this;
  }
  inline ficc_OrderAction_Req& operator=(ficc_OrderAction_Req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ficc_OrderAction_Req& default_instance() {
    return *internal_default_instance();
  }
  static inline const ficc_OrderAction_Req* internal_default_instance() {
    return reinterpret_cast<const ficc_OrderAction_Req*>(
               &_ficc_OrderAction_Req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ficc_OrderAction_Req& a, ficc_OrderAction_Req& b) {
    a.Swap(&b);
  }
  inline void Swap(ficc_OrderAction_Req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ficc_OrderAction_Req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ficc_OrderAction_Req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ficc_OrderAction_Req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ficc_OrderAction_Req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ficc_OrderAction_Req& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ficc_OrderAction_Req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ficc_message.ficc_OrderAction_Req";
  }
  protected:
  explicit ficc_OrderAction_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderInnerIdFieldNumber = 2,
    kHeadFieldNumber = 1,
    kQuoteTypeFieldNumber = 3,
    kUserIdFieldNumber = 4,
  };
  // string order_inner_id = 2;
  void clear_order_inner_id();
  const std::string& order_inner_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_inner_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_inner_id();
  PROTOBUF_NODISCARD std::string* release_order_inner_id();
  void set_allocated_order_inner_id(std::string* order_inner_id);
  private:
  const std::string& _internal_order_inner_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_inner_id(const std::string& value);
  std::string* _internal_mutable_order_inner_id();
  public:

  // .message_head.head head = 1;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  const ::message_head::head& head() const;
  PROTOBUF_NODISCARD ::message_head::head* release_head();
  ::message_head::head* mutable_head();
  void set_allocated_head(::message_head::head* head);
  private:
  const ::message_head::head& _internal_head() const;
  ::message_head::head* _internal_mutable_head();
  public:
  void unsafe_arena_set_allocated_head(
      ::message_head::head* head);
  ::message_head::head* unsafe_arena_release_head();

  // uint64 quote_type = 3;
  void clear_quote_type();
  uint64_t quote_type() const;
  void set_quote_type(uint64_t value);
  private:
  uint64_t _internal_quote_type() const;
  void _internal_set_quote_type(uint64_t value);
  public:

  // uint32 user_id = 4;
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ficc_message.ficc_OrderAction_Req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_inner_id_;
  ::message_head::head* head_;
  uint64_t quote_type_;
  uint32_t user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ficc_2eproto;
};
// -------------------------------------------------------------------

class ficc_OrderAction_Rsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ficc_message.ficc_OrderAction_Rsp) */ {
 public:
  inline ficc_OrderAction_Rsp() : ficc_OrderAction_Rsp(nullptr) {}
  ~ficc_OrderAction_Rsp() override;
  explicit PROTOBUF_CONSTEXPR ficc_OrderAction_Rsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ficc_OrderAction_Rsp(const ficc_OrderAction_Rsp& from);
  ficc_OrderAction_Rsp(ficc_OrderAction_Rsp&& from) noexcept
    : ficc_OrderAction_Rsp() {
    *this = ::std::move(from);
  }

  inline ficc_OrderAction_Rsp& operator=(const ficc_OrderAction_Rsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ficc_OrderAction_Rsp& operator=(ficc_OrderAction_Rsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ficc_OrderAction_Rsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const ficc_OrderAction_Rsp* internal_default_instance() {
    return reinterpret_cast<const ficc_OrderAction_Rsp*>(
               &_ficc_OrderAction_Rsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ficc_OrderAction_Rsp& a, ficc_OrderAction_Rsp& b) {
    a.Swap(&b);
  }
  inline void Swap(ficc_OrderAction_Rsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ficc_OrderAction_Rsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ficc_OrderAction_Rsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ficc_OrderAction_Rsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ficc_OrderAction_Rsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ficc_OrderAction_Rsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ficc_OrderAction_Rsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ficc_message.ficc_OrderAction_Rsp";
  }
  protected:
  explicit ficc_OrderAction_Rsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderInnerIdFieldNumber = 2,
    kSecuCodeFieldNumber = 3,
    kSendTimeFieldNumber = 4,
    kOrderStatusFieldNumber = 5,
    kErrMsgFieldNumber = 7,
    kHeadFieldNumber = 1,
    kErrIdFieldNumber = 6,
  };
  // string order_inner_id = 2;
  void clear_order_inner_id();
  const std::string& order_inner_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_inner_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_inner_id();
  PROTOBUF_NODISCARD std::string* release_order_inner_id();
  void set_allocated_order_inner_id(std::string* order_inner_id);
  private:
  const std::string& _internal_order_inner_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_inner_id(const std::string& value);
  std::string* _internal_mutable_order_inner_id();
  public:

  // string secu_code = 3;
  void clear_secu_code();
  const std::string& secu_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secu_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secu_code();
  PROTOBUF_NODISCARD std::string* release_secu_code();
  void set_allocated_secu_code(std::string* secu_code);
  private:
  const std::string& _internal_secu_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secu_code(const std::string& value);
  std::string* _internal_mutable_secu_code();
  public:

  // string send_time = 4;
  void clear_send_time();
  const std::string& send_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_send_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_send_time();
  PROTOBUF_NODISCARD std::string* release_send_time();
  void set_allocated_send_time(std::string* send_time);
  private:
  const std::string& _internal_send_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_send_time(const std::string& value);
  std::string* _internal_mutable_send_time();
  public:

  // string order_status = 5;
  void clear_order_status();
  const std::string& order_status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_status();
  PROTOBUF_NODISCARD std::string* release_order_status();
  void set_allocated_order_status(std::string* order_status);
  private:
  const std::string& _internal_order_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_status(const std::string& value);
  std::string* _internal_mutable_order_status();
  public:

  // string err_msg = 7;
  void clear_err_msg();
  const std::string& err_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err_msg();
  PROTOBUF_NODISCARD std::string* release_err_msg();
  void set_allocated_err_msg(std::string* err_msg);
  private:
  const std::string& _internal_err_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_msg(const std::string& value);
  std::string* _internal_mutable_err_msg();
  public:

  // .message_head.head head = 1;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  const ::message_head::head& head() const;
  PROTOBUF_NODISCARD ::message_head::head* release_head();
  ::message_head::head* mutable_head();
  void set_allocated_head(::message_head::head* head);
  private:
  const ::message_head::head& _internal_head() const;
  ::message_head::head* _internal_mutable_head();
  public:
  void unsafe_arena_set_allocated_head(
      ::message_head::head* head);
  ::message_head::head* unsafe_arena_release_head();

  // uint32 err_id = 6;
  void clear_err_id();
  uint32_t err_id() const;
  void set_err_id(uint32_t value);
  private:
  uint32_t _internal_err_id() const;
  void _internal_set_err_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ficc_message.ficc_OrderAction_Rsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_inner_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secu_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr send_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_msg_;
  ::message_head::head* head_;
  uint32_t err_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ficc_2eproto;
};
// -------------------------------------------------------------------

class ficc_QryBilateralOrder_Req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ficc_message.ficc_QryBilateralOrder_Req) */ {
 public:
  inline ficc_QryBilateralOrder_Req() : ficc_QryBilateralOrder_Req(nullptr) {}
  ~ficc_QryBilateralOrder_Req() override;
  explicit PROTOBUF_CONSTEXPR ficc_QryBilateralOrder_Req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ficc_QryBilateralOrder_Req(const ficc_QryBilateralOrder_Req& from);
  ficc_QryBilateralOrder_Req(ficc_QryBilateralOrder_Req&& from) noexcept
    : ficc_QryBilateralOrder_Req() {
    *this = ::std::move(from);
  }

  inline ficc_QryBilateralOrder_Req& operator=(const ficc_QryBilateralOrder_Req& from) {
    CopyFrom(from);
    return *this;
  }
  inline ficc_QryBilateralOrder_Req& operator=(ficc_QryBilateralOrder_Req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ficc_QryBilateralOrder_Req& default_instance() {
    return *internal_default_instance();
  }
  static inline const ficc_QryBilateralOrder_Req* internal_default_instance() {
    return reinterpret_cast<const ficc_QryBilateralOrder_Req*>(
               &_ficc_QryBilateralOrder_Req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ficc_QryBilateralOrder_Req& a, ficc_QryBilateralOrder_Req& b) {
    a.Swap(&b);
  }
  inline void Swap(ficc_QryBilateralOrder_Req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ficc_QryBilateralOrder_Req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ficc_QryBilateralOrder_Req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ficc_QryBilateralOrder_Req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ficc_QryBilateralOrder_Req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ficc_QryBilateralOrder_Req& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ficc_QryBilateralOrder_Req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ficc_message.ficc_QryBilateralOrder_Req";
  }
  protected:
  explicit ficc_QryBilateralOrder_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadFieldNumber = 1,
    kSequenceNoFieldNumber = 2,
  };
  // .message_head.head head = 1;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  const ::message_head::head& head() const;
  PROTOBUF_NODISCARD ::message_head::head* release_head();
  ::message_head::head* mutable_head();
  void set_allocated_head(::message_head::head* head);
  private:
  const ::message_head::head& _internal_head() const;
  ::message_head::head* _internal_mutable_head();
  public:
  void unsafe_arena_set_allocated_head(
      ::message_head::head* head);
  ::message_head::head* unsafe_arena_release_head();

  // uint32 sequence_no = 2;
  void clear_sequence_no();
  uint32_t sequence_no() const;
  void set_sequence_no(uint32_t value);
  private:
  uint32_t _internal_sequence_no() const;
  void _internal_set_sequence_no(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ficc_message.ficc_QryBilateralOrder_Req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::message_head::head* head_;
  uint32_t sequence_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ficc_2eproto;
};
// -------------------------------------------------------------------

class ficc_QryMatch_Req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ficc_message.ficc_QryMatch_Req) */ {
 public:
  inline ficc_QryMatch_Req() : ficc_QryMatch_Req(nullptr) {}
  ~ficc_QryMatch_Req() override;
  explicit PROTOBUF_CONSTEXPR ficc_QryMatch_Req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ficc_QryMatch_Req(const ficc_QryMatch_Req& from);
  ficc_QryMatch_Req(ficc_QryMatch_Req&& from) noexcept
    : ficc_QryMatch_Req() {
    *this = ::std::move(from);
  }

  inline ficc_QryMatch_Req& operator=(const ficc_QryMatch_Req& from) {
    CopyFrom(from);
    return *this;
  }
  inline ficc_QryMatch_Req& operator=(ficc_QryMatch_Req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ficc_QryMatch_Req& default_instance() {
    return *internal_default_instance();
  }
  static inline const ficc_QryMatch_Req* internal_default_instance() {
    return reinterpret_cast<const ficc_QryMatch_Req*>(
               &_ficc_QryMatch_Req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ficc_QryMatch_Req& a, ficc_QryMatch_Req& b) {
    a.Swap(&b);
  }
  inline void Swap(ficc_QryMatch_Req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ficc_QryMatch_Req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ficc_QryMatch_Req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ficc_QryMatch_Req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ficc_QryMatch_Req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ficc_QryMatch_Req& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ficc_QryMatch_Req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ficc_message.ficc_QryMatch_Req";
  }
  protected:
  explicit ficc_QryMatch_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadFieldNumber = 1,
    kSequenceNoFieldNumber = 2,
  };
  // .message_head.head head = 1;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  const ::message_head::head& head() const;
  PROTOBUF_NODISCARD ::message_head::head* release_head();
  ::message_head::head* mutable_head();
  void set_allocated_head(::message_head::head* head);
  private:
  const ::message_head::head& _internal_head() const;
  ::message_head::head* _internal_mutable_head();
  public:
  void unsafe_arena_set_allocated_head(
      ::message_head::head* head);
  ::message_head::head* unsafe_arena_release_head();

  // uint32 sequence_no = 2;
  void clear_sequence_no();
  uint32_t sequence_no() const;
  void set_sequence_no(uint32_t value);
  private:
  uint32_t _internal_sequence_no() const;
  void _internal_set_sequence_no(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ficc_message.ficc_QryMatch_Req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::message_head::head* head_;
  uint32_t sequence_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ficc_2eproto;
};
// -------------------------------------------------------------------

class ficc_Match_Rtn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ficc_message.ficc_Match_Rtn) */ {
 public:
  inline ficc_Match_Rtn() : ficc_Match_Rtn(nullptr) {}
  ~ficc_Match_Rtn() override;
  explicit PROTOBUF_CONSTEXPR ficc_Match_Rtn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ficc_Match_Rtn(const ficc_Match_Rtn& from);
  ficc_Match_Rtn(ficc_Match_Rtn&& from) noexcept
    : ficc_Match_Rtn() {
    *this = ::std::move(from);
  }

  inline ficc_Match_Rtn& operator=(const ficc_Match_Rtn& from) {
    CopyFrom(from);
    return *this;
  }
  inline ficc_Match_Rtn& operator=(ficc_Match_Rtn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ficc_Match_Rtn& default_instance() {
    return *internal_default_instance();
  }
  static inline const ficc_Match_Rtn* internal_default_instance() {
    return reinterpret_cast<const ficc_Match_Rtn*>(
               &_ficc_Match_Rtn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ficc_Match_Rtn& a, ficc_Match_Rtn& b) {
    a.Swap(&b);
  }
  inline void Swap(ficc_Match_Rtn* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ficc_Match_Rtn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ficc_Match_Rtn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ficc_Match_Rtn>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ficc_Match_Rtn& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ficc_Match_Rtn& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ficc_Match_Rtn* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ficc_message.ficc_Match_Rtn";
  }
  protected:
  explicit ficc_Match_Rtn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderInnerIdFieldNumber = 2,
    kExCodeFieldNumber = 3,
    kTradingDayFieldNumber = 4,
    kTradeAcctFieldNumber = 5,
    kFundAcctFieldNumber = 6,
    kOrderSysIdFieldNumber = 8,
    kTradeIdFieldNumber = 9,
    kSecuCodeFieldNumber = 10,
    kDirectionFieldNumber = 11,
    kOffsetFlagFieldNumber = 12,
    kHedgeFlagFieldNumber = 13,
    kTradeDateFieldNumber = 19,
    kTradeTimeFieldNumber = 20,
    kCurrencyFieldNumber = 22,
    kManualFeeFieldNumber = 23,
    kDeletedFlagFieldNumber = 24,
    kExInstIdFieldNumber = 26,
    kBrokerIdFieldNumber = 27,
    kInvestorIdFieldNumber = 28,
    kBilateralIdFieldNumber = 29,
    kCounterPartyIdFieldNumber = 32,
    kCounterPartyTraderFieldNumber = 33,
    kHeadFieldNumber = 1,
    kUserIdFieldNumber = 7,
    kOrderPriceFieldNumber = 14,
    kDirtyPriceFieldNumber = 15,
    kTradePriceFieldNumber = 16,
    kVolTradedFieldNumber = 18,
    kYtmFieldNumber = 17,
    kTradeFeeFieldNumber = 21,
    kCoverPriceFieldNumber = 25,
    kAccruedInterestAmtFieldNumber = 34,
    kQuoteTypeFieldNumber = 30,
    kSettleTypeFieldNumber = 31,
    kStrategyCodeFieldNumber = 36,
    kSequenceNoFieldNumber = 35,
  };
  // string order_inner_id = 2;
  void clear_order_inner_id();
  const std::string& order_inner_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_inner_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_inner_id();
  PROTOBUF_NODISCARD std::string* release_order_inner_id();
  void set_allocated_order_inner_id(std::string* order_inner_id);
  private:
  const std::string& _internal_order_inner_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_inner_id(const std::string& value);
  std::string* _internal_mutable_order_inner_id();
  public:

  // string ex_code = 3;
  void clear_ex_code();
  const std::string& ex_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ex_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ex_code();
  PROTOBUF_NODISCARD std::string* release_ex_code();
  void set_allocated_ex_code(std::string* ex_code);
  private:
  const std::string& _internal_ex_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ex_code(const std::string& value);
  std::string* _internal_mutable_ex_code();
  public:

  // string trading_day = 4;
  void clear_trading_day();
  const std::string& trading_day() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trading_day(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trading_day();
  PROTOBUF_NODISCARD std::string* release_trading_day();
  void set_allocated_trading_day(std::string* trading_day);
  private:
  const std::string& _internal_trading_day() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trading_day(const std::string& value);
  std::string* _internal_mutable_trading_day();
  public:

  // string trade_acct = 5;
  void clear_trade_acct();
  const std::string& trade_acct() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_acct(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_acct();
  PROTOBUF_NODISCARD std::string* release_trade_acct();
  void set_allocated_trade_acct(std::string* trade_acct);
  private:
  const std::string& _internal_trade_acct() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_acct(const std::string& value);
  std::string* _internal_mutable_trade_acct();
  public:

  // string fund_acct = 6;
  void clear_fund_acct();
  const std::string& fund_acct() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fund_acct(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fund_acct();
  PROTOBUF_NODISCARD std::string* release_fund_acct();
  void set_allocated_fund_acct(std::string* fund_acct);
  private:
  const std::string& _internal_fund_acct() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fund_acct(const std::string& value);
  std::string* _internal_mutable_fund_acct();
  public:

  // string order_sys_id = 8;
  void clear_order_sys_id();
  const std::string& order_sys_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_sys_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_sys_id();
  PROTOBUF_NODISCARD std::string* release_order_sys_id();
  void set_allocated_order_sys_id(std::string* order_sys_id);
  private:
  const std::string& _internal_order_sys_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_sys_id(const std::string& value);
  std::string* _internal_mutable_order_sys_id();
  public:

  // string trade_id = 9;
  void clear_trade_id();
  const std::string& trade_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_id();
  PROTOBUF_NODISCARD std::string* release_trade_id();
  void set_allocated_trade_id(std::string* trade_id);
  private:
  const std::string& _internal_trade_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_id(const std::string& value);
  std::string* _internal_mutable_trade_id();
  public:

  // string secu_code = 10;
  void clear_secu_code();
  const std::string& secu_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secu_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secu_code();
  PROTOBUF_NODISCARD std::string* release_secu_code();
  void set_allocated_secu_code(std::string* secu_code);
  private:
  const std::string& _internal_secu_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secu_code(const std::string& value);
  std::string* _internal_mutable_secu_code();
  public:

  // string direction = 11;
  void clear_direction();
  const std::string& direction() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_direction(ArgT0&& arg0, ArgT... args);
  std::string* mutable_direction();
  PROTOBUF_NODISCARD std::string* release_direction();
  void set_allocated_direction(std::string* direction);
  private:
  const std::string& _internal_direction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_direction(const std::string& value);
  std::string* _internal_mutable_direction();
  public:

  // string offset_flag = 12;
  void clear_offset_flag();
  const std::string& offset_flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_offset_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_offset_flag();
  PROTOBUF_NODISCARD std::string* release_offset_flag();
  void set_allocated_offset_flag(std::string* offset_flag);
  private:
  const std::string& _internal_offset_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_offset_flag(const std::string& value);
  std::string* _internal_mutable_offset_flag();
  public:

  // string hedge_flag = 13;
  void clear_hedge_flag();
  const std::string& hedge_flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hedge_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hedge_flag();
  PROTOBUF_NODISCARD std::string* release_hedge_flag();
  void set_allocated_hedge_flag(std::string* hedge_flag);
  private:
  const std::string& _internal_hedge_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hedge_flag(const std::string& value);
  std::string* _internal_mutable_hedge_flag();
  public:

  // string trade_date = 19;
  void clear_trade_date();
  const std::string& trade_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_date();
  PROTOBUF_NODISCARD std::string* release_trade_date();
  void set_allocated_trade_date(std::string* trade_date);
  private:
  const std::string& _internal_trade_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_date(const std::string& value);
  std::string* _internal_mutable_trade_date();
  public:

  // string trade_time = 20;
  void clear_trade_time();
  const std::string& trade_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_time();
  PROTOBUF_NODISCARD std::string* release_trade_time();
  void set_allocated_trade_time(std::string* trade_time);
  private:
  const std::string& _internal_trade_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_time(const std::string& value);
  std::string* _internal_mutable_trade_time();
  public:

  // string currency = 22;
  void clear_currency();
  const std::string& currency() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency();
  PROTOBUF_NODISCARD std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // string manual_fee = 23;
  void clear_manual_fee();
  const std::string& manual_fee() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_manual_fee(ArgT0&& arg0, ArgT... args);
  std::string* mutable_manual_fee();
  PROTOBUF_NODISCARD std::string* release_manual_fee();
  void set_allocated_manual_fee(std::string* manual_fee);
  private:
  const std::string& _internal_manual_fee() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_manual_fee(const std::string& value);
  std::string* _internal_mutable_manual_fee();
  public:

  // string deleted_flag = 24;
  void clear_deleted_flag();
  const std::string& deleted_flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deleted_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deleted_flag();
  PROTOBUF_NODISCARD std::string* release_deleted_flag();
  void set_allocated_deleted_flag(std::string* deleted_flag);
  private:
  const std::string& _internal_deleted_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deleted_flag(const std::string& value);
  std::string* _internal_mutable_deleted_flag();
  public:

  // string ex_inst_id = 26;
  void clear_ex_inst_id();
  const std::string& ex_inst_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ex_inst_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ex_inst_id();
  PROTOBUF_NODISCARD std::string* release_ex_inst_id();
  void set_allocated_ex_inst_id(std::string* ex_inst_id);
  private:
  const std::string& _internal_ex_inst_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ex_inst_id(const std::string& value);
  std::string* _internal_mutable_ex_inst_id();
  public:

  // string broker_id = 27;
  void clear_broker_id();
  const std::string& broker_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_broker_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_broker_id();
  PROTOBUF_NODISCARD std::string* release_broker_id();
  void set_allocated_broker_id(std::string* broker_id);
  private:
  const std::string& _internal_broker_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_broker_id(const std::string& value);
  std::string* _internal_mutable_broker_id();
  public:

  // string investor_id = 28;
  void clear_investor_id();
  const std::string& investor_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_investor_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_investor_id();
  PROTOBUF_NODISCARD std::string* release_investor_id();
  void set_allocated_investor_id(std::string* investor_id);
  private:
  const std::string& _internal_investor_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_investor_id(const std::string& value);
  std::string* _internal_mutable_investor_id();
  public:

  // string bilateral_id = 29;
  void clear_bilateral_id();
  const std::string& bilateral_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bilateral_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bilateral_id();
  PROTOBUF_NODISCARD std::string* release_bilateral_id();
  void set_allocated_bilateral_id(std::string* bilateral_id);
  private:
  const std::string& _internal_bilateral_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bilateral_id(const std::string& value);
  std::string* _internal_mutable_bilateral_id();
  public:

  // string counter_party_id = 32;
  void clear_counter_party_id();
  const std::string& counter_party_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_counter_party_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_counter_party_id();
  PROTOBUF_NODISCARD std::string* release_counter_party_id();
  void set_allocated_counter_party_id(std::string* counter_party_id);
  private:
  const std::string& _internal_counter_party_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_counter_party_id(const std::string& value);
  std::string* _internal_mutable_counter_party_id();
  public:

  // string counter_party_trader = 33;
  void clear_counter_party_trader();
  const std::string& counter_party_trader() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_counter_party_trader(ArgT0&& arg0, ArgT... args);
  std::string* mutable_counter_party_trader();
  PROTOBUF_NODISCARD std::string* release_counter_party_trader();
  void set_allocated_counter_party_trader(std::string* counter_party_trader);
  private:
  const std::string& _internal_counter_party_trader() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_counter_party_trader(const std::string& value);
  std::string* _internal_mutable_counter_party_trader();
  public:

  // .message_head.head head = 1;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  const ::message_head::head& head() const;
  PROTOBUF_NODISCARD ::message_head::head* release_head();
  ::message_head::head* mutable_head();
  void set_allocated_head(::message_head::head* head);
  private:
  const ::message_head::head& _internal_head() const;
  ::message_head::head* _internal_mutable_head();
  public:
  void unsafe_arena_set_allocated_head(
      ::message_head::head* head);
  ::message_head::head* unsafe_arena_release_head();

  // uint32 user_id = 7;
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // float order_price = 14;
  void clear_order_price();
  float order_price() const;
  void set_order_price(float value);
  private:
  float _internal_order_price() const;
  void _internal_set_order_price(float value);
  public:

  // float dirty_price = 15;
  void clear_dirty_price();
  float dirty_price() const;
  void set_dirty_price(float value);
  private:
  float _internal_dirty_price() const;
  void _internal_set_dirty_price(float value);
  public:

  // float trade_price = 16;
  void clear_trade_price();
  float trade_price() const;
  void set_trade_price(float value);
  private:
  float _internal_trade_price() const;
  void _internal_set_trade_price(float value);
  public:

  // uint64 vol_traded = 18;
  void clear_vol_traded();
  uint64_t vol_traded() const;
  void set_vol_traded(uint64_t value);
  private:
  uint64_t _internal_vol_traded() const;
  void _internal_set_vol_traded(uint64_t value);
  public:

  // float ytm = 17;
  void clear_ytm();
  float ytm() const;
  void set_ytm(float value);
  private:
  float _internal_ytm() const;
  void _internal_set_ytm(float value);
  public:

  // float trade_fee = 21;
  void clear_trade_fee();
  float trade_fee() const;
  void set_trade_fee(float value);
  private:
  float _internal_trade_fee() const;
  void _internal_set_trade_fee(float value);
  public:

  // float cover_price = 25;
  void clear_cover_price();
  float cover_price() const;
  void set_cover_price(float value);
  private:
  float _internal_cover_price() const;
  void _internal_set_cover_price(float value);
  public:

  // float accrued_interest_amt = 34;
  void clear_accrued_interest_amt();
  float accrued_interest_amt() const;
  void set_accrued_interest_amt(float value);
  private:
  float _internal_accrued_interest_amt() const;
  void _internal_set_accrued_interest_amt(float value);
  public:

  // uint64 quote_type = 30;
  void clear_quote_type();
  uint64_t quote_type() const;
  void set_quote_type(uint64_t value);
  private:
  uint64_t _internal_quote_type() const;
  void _internal_set_quote_type(uint64_t value);
  public:

  // uint64 settle_type = 31;
  void clear_settle_type();
  uint64_t settle_type() const;
  void set_settle_type(uint64_t value);
  private:
  uint64_t _internal_settle_type() const;
  void _internal_set_settle_type(uint64_t value);
  public:

  // uint64 strategy_code = 36;
  void clear_strategy_code();
  uint64_t strategy_code() const;
  void set_strategy_code(uint64_t value);
  private:
  uint64_t _internal_strategy_code() const;
  void _internal_set_strategy_code(uint64_t value);
  public:

  // uint32 sequence_no = 35;
  void clear_sequence_no();
  uint32_t sequence_no() const;
  void set_sequence_no(uint32_t value);
  private:
  uint32_t _internal_sequence_no() const;
  void _internal_set_sequence_no(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ficc_message.ficc_Match_Rtn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_inner_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ex_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trading_day_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_acct_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fund_acct_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_sys_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secu_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr direction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr offset_flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hedge_flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manual_fee_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deleted_flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ex_inst_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broker_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr investor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bilateral_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr counter_party_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr counter_party_trader_;
  ::message_head::head* head_;
  uint32_t user_id_;
  float order_price_;
  float dirty_price_;
  float trade_price_;
  uint64_t vol_traded_;
  float ytm_;
  float trade_fee_;
  float cover_price_;
  float accrued_interest_amt_;
  uint64_t quote_type_;
  uint64_t settle_type_;
  uint64_t strategy_code_;
  uint32_t sequence_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ficc_2eproto;
};
// -------------------------------------------------------------------

class ficc_Cfets_Makemarket_Status final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ficc_message.ficc_Cfets_Makemarket_Status) */ {
 public:
  inline ficc_Cfets_Makemarket_Status() : ficc_Cfets_Makemarket_Status(nullptr) {}
  ~ficc_Cfets_Makemarket_Status() override;
  explicit PROTOBUF_CONSTEXPR ficc_Cfets_Makemarket_Status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ficc_Cfets_Makemarket_Status(const ficc_Cfets_Makemarket_Status& from);
  ficc_Cfets_Makemarket_Status(ficc_Cfets_Makemarket_Status&& from) noexcept
    : ficc_Cfets_Makemarket_Status() {
    *this = ::std::move(from);
  }

  inline ficc_Cfets_Makemarket_Status& operator=(const ficc_Cfets_Makemarket_Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline ficc_Cfets_Makemarket_Status& operator=(ficc_Cfets_Makemarket_Status&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ficc_Cfets_Makemarket_Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const ficc_Cfets_Makemarket_Status* internal_default_instance() {
    return reinterpret_cast<const ficc_Cfets_Makemarket_Status*>(
               &_ficc_Cfets_Makemarket_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ficc_Cfets_Makemarket_Status& a, ficc_Cfets_Makemarket_Status& b) {
    a.Swap(&b);
  }
  inline void Swap(ficc_Cfets_Makemarket_Status* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ficc_Cfets_Makemarket_Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ficc_Cfets_Makemarket_Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ficc_Cfets_Makemarket_Status>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ficc_Cfets_Makemarket_Status& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ficc_Cfets_Makemarket_Status& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ficc_Cfets_Makemarket_Status* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ficc_message.ficc_Cfets_Makemarket_Status";
  }
  protected:
  explicit ficc_Cfets_Makemarket_Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecuCodeFieldNumber = 2,
    kSecuTypeFieldNumber = 3,
    kSecuNameFieldNumber = 4,
    kLastUpdateFieldNumber = 9,
    kHeadFieldNumber = 1,
    kQuoteStatusFieldNumber = 5,
    kLastRecTimeFieldNumber = 6,
    kTradeVolDayFieldNumber = 8,
    kMarketTimeDayFieldNumber = 7,
    kMaxYtmSpreadFieldNumber = 10,
    kMinVolFieldNumber = 11,
    kNotifyOutFieldNumber = 12,
  };
  // string secu_code = 2;
  void clear_secu_code();
  const std::string& secu_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secu_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secu_code();
  PROTOBUF_NODISCARD std::string* release_secu_code();
  void set_allocated_secu_code(std::string* secu_code);
  private:
  const std::string& _internal_secu_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secu_code(const std::string& value);
  std::string* _internal_mutable_secu_code();
  public:

  // string secu_type = 3;
  void clear_secu_type();
  const std::string& secu_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secu_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secu_type();
  PROTOBUF_NODISCARD std::string* release_secu_type();
  void set_allocated_secu_type(std::string* secu_type);
  private:
  const std::string& _internal_secu_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secu_type(const std::string& value);
  std::string* _internal_mutable_secu_type();
  public:

  // string secu_name = 4;
  void clear_secu_name();
  const std::string& secu_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secu_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secu_name();
  PROTOBUF_NODISCARD std::string* release_secu_name();
  void set_allocated_secu_name(std::string* secu_name);
  private:
  const std::string& _internal_secu_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secu_name(const std::string& value);
  std::string* _internal_mutable_secu_name();
  public:

  // string last_update = 9;
  void clear_last_update();
  const std::string& last_update() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_update(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_update();
  PROTOBUF_NODISCARD std::string* release_last_update();
  void set_allocated_last_update(std::string* last_update);
  private:
  const std::string& _internal_last_update() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_update(const std::string& value);
  std::string* _internal_mutable_last_update();
  public:

  // .message_head.head head = 1;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  const ::message_head::head& head() const;
  PROTOBUF_NODISCARD ::message_head::head* release_head();
  ::message_head::head* mutable_head();
  void set_allocated_head(::message_head::head* head);
  private:
  const ::message_head::head& _internal_head() const;
  ::message_head::head* _internal_mutable_head();
  public:
  void unsafe_arena_set_allocated_head(
      ::message_head::head* head);
  ::message_head::head* unsafe_arena_release_head();

  // uint32 quote_status = 5;
  void clear_quote_status();
  uint32_t quote_status() const;
  void set_quote_status(uint32_t value);
  private:
  uint32_t _internal_quote_status() const;
  void _internal_set_quote_status(uint32_t value);
  public:

  // uint32 last_rec_time = 6;
  void clear_last_rec_time();
  uint32_t last_rec_time() const;
  void set_last_rec_time(uint32_t value);
  private:
  uint32_t _internal_last_rec_time() const;
  void _internal_set_last_rec_time(uint32_t value);
  public:

  // uint64 trade_vol_day = 8;
  void clear_trade_vol_day();
  uint64_t trade_vol_day() const;
  void set_trade_vol_day(uint64_t value);
  private:
  uint64_t _internal_trade_vol_day() const;
  void _internal_set_trade_vol_day(uint64_t value);
  public:

  // uint32 market_time_day = 7;
  void clear_market_time_day();
  uint32_t market_time_day() const;
  void set_market_time_day(uint32_t value);
  private:
  uint32_t _internal_market_time_day() const;
  void _internal_set_market_time_day(uint32_t value);
  public:

  // float max_ytm_spread = 10;
  void clear_max_ytm_spread();
  float max_ytm_spread() const;
  void set_max_ytm_spread(float value);
  private:
  float _internal_max_ytm_spread() const;
  void _internal_set_max_ytm_spread(float value);
  public:

  // uint64 min_vol = 11;
  void clear_min_vol();
  uint64_t min_vol() const;
  void set_min_vol(uint64_t value);
  private:
  uint64_t _internal_min_vol() const;
  void _internal_set_min_vol(uint64_t value);
  public:

  // uint32 notify_out = 12;
  void clear_notify_out();
  uint32_t notify_out() const;
  void set_notify_out(uint32_t value);
  private:
  uint32_t _internal_notify_out() const;
  void _internal_set_notify_out(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ficc_message.ficc_Cfets_Makemarket_Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secu_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secu_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secu_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_update_;
  ::message_head::head* head_;
  uint32_t quote_status_;
  uint32_t last_rec_time_;
  uint64_t trade_vol_day_;
  uint32_t market_time_day_;
  float max_ytm_spread_;
  uint64_t min_vol_;
  uint32_t notify_out_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ficc_2eproto;
};
// -------------------------------------------------------------------

class ficc_fund final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ficc_message.ficc_fund) */ {
 public:
  inline ficc_fund() : ficc_fund(nullptr) {}
  ~ficc_fund() override;
  explicit PROTOBUF_CONSTEXPR ficc_fund(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ficc_fund(const ficc_fund& from);
  ficc_fund(ficc_fund&& from) noexcept
    : ficc_fund() {
    *this = ::std::move(from);
  }

  inline ficc_fund& operator=(const ficc_fund& from) {
    CopyFrom(from);
    return *this;
  }
  inline ficc_fund& operator=(ficc_fund&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ficc_fund& default_instance() {
    return *internal_default_instance();
  }
  static inline const ficc_fund* internal_default_instance() {
    return reinterpret_cast<const ficc_fund*>(
               &_ficc_fund_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ficc_fund& a, ficc_fund& b) {
    a.Swap(&b);
  }
  inline void Swap(ficc_fund* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ficc_fund* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ficc_fund* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ficc_fund>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ficc_fund& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ficc_fund& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ficc_fund* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ficc_message.ficc_fund";
  }
  protected:
  explicit ficc_fund(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradeAcctFieldNumber = 2,
    kCurrencyFieldNumber = 3,
    kFundAcctFieldNumber = 4,
    kTradeDayFieldNumber = 23,
    kHeadFieldNumber = 1,
    kLastBalFieldNumber = 5,
    kBalanceFieldNumber = 6,
    kAvailFundFieldNumber = 7,
    kGetFundFieldNumber = 8,
    kBaseMarginFieldNumber = 9,
    kIncomeExpenseFieldNumber = 10,
    kFrozeFundFieldNumber = 11,
    kMarginFieldNumber = 12,
    kFeeFieldNumber = 13,
    kReserveFieldNumber = 14,
    kSurplusFieldNumber = 15,
    kFloatSurplusFieldNumber = 16,
    kInteIntegralFieldNumber = 17,
    kPuniIntegralFieldNumber = 18,
    kIncrInteFieldNumber = 19,
    kArapFieldNumber = 20,
    kRiskLevelFieldNumber = 21,
    kRiskFieldNumber = 22,
  };
  // string trade_acct = 2;
  void clear_trade_acct();
  const std::string& trade_acct() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_acct(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_acct();
  PROTOBUF_NODISCARD std::string* release_trade_acct();
  void set_allocated_trade_acct(std::string* trade_acct);
  private:
  const std::string& _internal_trade_acct() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_acct(const std::string& value);
  std::string* _internal_mutable_trade_acct();
  public:

  // string currency = 3;
  void clear_currency();
  const std::string& currency() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency();
  PROTOBUF_NODISCARD std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // string fund_acct = 4;
  void clear_fund_acct();
  const std::string& fund_acct() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fund_acct(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fund_acct();
  PROTOBUF_NODISCARD std::string* release_fund_acct();
  void set_allocated_fund_acct(std::string* fund_acct);
  private:
  const std::string& _internal_fund_acct() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fund_acct(const std::string& value);
  std::string* _internal_mutable_fund_acct();
  public:

  // string trade_day = 23;
  void clear_trade_day();
  const std::string& trade_day() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_day(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_day();
  PROTOBUF_NODISCARD std::string* release_trade_day();
  void set_allocated_trade_day(std::string* trade_day);
  private:
  const std::string& _internal_trade_day() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_day(const std::string& value);
  std::string* _internal_mutable_trade_day();
  public:

  // .message_head.head head = 1;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  const ::message_head::head& head() const;
  PROTOBUF_NODISCARD ::message_head::head* release_head();
  ::message_head::head* mutable_head();
  void set_allocated_head(::message_head::head* head);
  private:
  const ::message_head::head& _internal_head() const;
  ::message_head::head* _internal_mutable_head();
  public:
  void unsafe_arena_set_allocated_head(
      ::message_head::head* head);
  ::message_head::head* unsafe_arena_release_head();

  // float last_bal = 5;
  void clear_last_bal();
  float last_bal() const;
  void set_last_bal(float value);
  private:
  float _internal_last_bal() const;
  void _internal_set_last_bal(float value);
  public:

  // float balance = 6;
  void clear_balance();
  float balance() const;
  void set_balance(float value);
  private:
  float _internal_balance() const;
  void _internal_set_balance(float value);
  public:

  // float avail_fund = 7;
  void clear_avail_fund();
  float avail_fund() const;
  void set_avail_fund(float value);
  private:
  float _internal_avail_fund() const;
  void _internal_set_avail_fund(float value);
  public:

  // float get_fund = 8;
  void clear_get_fund();
  float get_fund() const;
  void set_get_fund(float value);
  private:
  float _internal_get_fund() const;
  void _internal_set_get_fund(float value);
  public:

  // float base_margin = 9;
  void clear_base_margin();
  float base_margin() const;
  void set_base_margin(float value);
  private:
  float _internal_base_margin() const;
  void _internal_set_base_margin(float value);
  public:

  // float income_expense = 10;
  void clear_income_expense();
  float income_expense() const;
  void set_income_expense(float value);
  private:
  float _internal_income_expense() const;
  void _internal_set_income_expense(float value);
  public:

  // float froze_fund = 11;
  void clear_froze_fund();
  float froze_fund() const;
  void set_froze_fund(float value);
  private:
  float _internal_froze_fund() const;
  void _internal_set_froze_fund(float value);
  public:

  // float margin = 12;
  void clear_margin();
  float margin() const;
  void set_margin(float value);
  private:
  float _internal_margin() const;
  void _internal_set_margin(float value);
  public:

  // float fee = 13;
  void clear_fee();
  float fee() const;
  void set_fee(float value);
  private:
  float _internal_fee() const;
  void _internal_set_fee(float value);
  public:

  // float reserve = 14;
  void clear_reserve();
  float reserve() const;
  void set_reserve(float value);
  private:
  float _internal_reserve() const;
  void _internal_set_reserve(float value);
  public:

  // float surplus = 15;
  void clear_surplus();
  float surplus() const;
  void set_surplus(float value);
  private:
  float _internal_surplus() const;
  void _internal_set_surplus(float value);
  public:

  // float float_surplus = 16;
  void clear_float_surplus();
  float float_surplus() const;
  void set_float_surplus(float value);
  private:
  float _internal_float_surplus() const;
  void _internal_set_float_surplus(float value);
  public:

  // float inte_integral = 17;
  void clear_inte_integral();
  float inte_integral() const;
  void set_inte_integral(float value);
  private:
  float _internal_inte_integral() const;
  void _internal_set_inte_integral(float value);
  public:

  // float puni_integral = 18;
  void clear_puni_integral();
  float puni_integral() const;
  void set_puni_integral(float value);
  private:
  float _internal_puni_integral() const;
  void _internal_set_puni_integral(float value);
  public:

  // float incr_inte = 19;
  void clear_incr_inte();
  float incr_inte() const;
  void set_incr_inte(float value);
  private:
  float _internal_incr_inte() const;
  void _internal_set_incr_inte(float value);
  public:

  // float arap = 20;
  void clear_arap();
  float arap() const;
  void set_arap(float value);
  private:
  float _internal_arap() const;
  void _internal_set_arap(float value);
  public:

  // uint32 risk_level = 21;
  void clear_risk_level();
  uint32_t risk_level() const;
  void set_risk_level(uint32_t value);
  private:
  uint32_t _internal_risk_level() const;
  void _internal_set_risk_level(uint32_t value);
  public:

  // float risk = 22;
  void clear_risk();
  float risk() const;
  void set_risk(float value);
  private:
  float _internal_risk() const;
  void _internal_set_risk(float value);
  public:

  // @@protoc_insertion_point(class_scope:ficc_message.ficc_fund)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_acct_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fund_acct_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_day_;
  ::message_head::head* head_;
  float last_bal_;
  float balance_;
  float avail_fund_;
  float get_fund_;
  float base_margin_;
  float income_expense_;
  float froze_fund_;
  float margin_;
  float fee_;
  float reserve_;
  float surplus_;
  float float_surplus_;
  float inte_integral_;
  float puni_integral_;
  float incr_inte_;
  float arap_;
  uint32_t risk_level_;
  float risk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ficc_2eproto;
};
// -------------------------------------------------------------------

class ficc_position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ficc_message.ficc_position) */ {
 public:
  inline ficc_position() : ficc_position(nullptr) {}
  ~ficc_position() override;
  explicit PROTOBUF_CONSTEXPR ficc_position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ficc_position(const ficc_position& from);
  ficc_position(ficc_position&& from) noexcept
    : ficc_position() {
    *this = ::std::move(from);
  }

  inline ficc_position& operator=(const ficc_position& from) {
    CopyFrom(from);
    return *this;
  }
  inline ficc_position& operator=(ficc_position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ficc_position& default_instance() {
    return *internal_default_instance();
  }
  static inline const ficc_position* internal_default_instance() {
    return reinterpret_cast<const ficc_position*>(
               &_ficc_position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ficc_position& a, ficc_position& b) {
    a.Swap(&b);
  }
  inline void Swap(ficc_position* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ficc_position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ficc_position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ficc_position>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ficc_position& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ficc_position& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ficc_position* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ficc_message.ficc_position";
  }
  protected:
  explicit ficc_position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradingDayFieldNumber = 2,
    kTradeAcctFieldNumber = 3,
    kSecuCodeFieldNumber = 4,
    kPosiDirectionFieldNumber = 5,
    kHedgeFlagFieldNumber = 6,
    kPosiDateTypeFieldNumber = 7,
    kFundAcctFieldNumber = 8,
    kExCodeFieldNumber = 9,
    kHeadFieldNumber = 1,
    kPosiProfitByDateFieldNumber = 10,
    kPosiProfitByTradeFieldNumber = 11,
    kCloseProfitByDateFieldNumber = 12,
    kCloseProfitByTradeFieldNumber = 13,
    kLastPositionFieldNumber = 14,
    kPosiVolFieldNumber = 15,
    kTodayPositionFieldNumber = 16,
    kFrozenPositionFieldNumber = 17,
    kOpenVolFieldNumber = 19,
    kFrozenAmountFieldNumber = 18,
    kOpenAmountFieldNumber = 21,
    kCloseVolFieldNumber = 20,
    kCloseAmountFieldNumber = 22,
    kPosiCostFieldNumber = 23,
    kOpenCostFieldNumber = 24,
    kPreMarginFieldNumber = 25,
    kUseMarginFieldNumber = 26,
    kFrozenMarginFieldNumber = 27,
    kFrozenCashFieldNumber = 28,
    kFrozenFeeFieldNumber = 29,
    kAdjustFieldNumber = 30,
    kTradeFeeFieldNumber = 31,
    kLongFrozenFieldNumber = 33,
    kPreSettlementPriceFieldNumber = 32,
    kLongFrozenAmountFieldNumber = 35,
    kShortFrozenFieldNumber = 34,
    kShortFrozenAmountFieldNumber = 36,
    kMarginRateByVolFieldNumber = 37,
    kMarginRateByMoneyFieldNumber = 38,
  };
  // string trading_day = 2;
  void clear_trading_day();
  const std::string& trading_day() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trading_day(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trading_day();
  PROTOBUF_NODISCARD std::string* release_trading_day();
  void set_allocated_trading_day(std::string* trading_day);
  private:
  const std::string& _internal_trading_day() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trading_day(const std::string& value);
  std::string* _internal_mutable_trading_day();
  public:

  // string trade_acct = 3;
  void clear_trade_acct();
  const std::string& trade_acct() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_acct(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_acct();
  PROTOBUF_NODISCARD std::string* release_trade_acct();
  void set_allocated_trade_acct(std::string* trade_acct);
  private:
  const std::string& _internal_trade_acct() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_acct(const std::string& value);
  std::string* _internal_mutable_trade_acct();
  public:

  // string secu_code = 4;
  void clear_secu_code();
  const std::string& secu_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secu_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secu_code();
  PROTOBUF_NODISCARD std::string* release_secu_code();
  void set_allocated_secu_code(std::string* secu_code);
  private:
  const std::string& _internal_secu_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secu_code(const std::string& value);
  std::string* _internal_mutable_secu_code();
  public:

  // string posi_direction = 5;
  void clear_posi_direction();
  const std::string& posi_direction() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_posi_direction(ArgT0&& arg0, ArgT... args);
  std::string* mutable_posi_direction();
  PROTOBUF_NODISCARD std::string* release_posi_direction();
  void set_allocated_posi_direction(std::string* posi_direction);
  private:
  const std::string& _internal_posi_direction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_posi_direction(const std::string& value);
  std::string* _internal_mutable_posi_direction();
  public:

  // string hedge_flag = 6;
  void clear_hedge_flag();
  const std::string& hedge_flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hedge_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hedge_flag();
  PROTOBUF_NODISCARD std::string* release_hedge_flag();
  void set_allocated_hedge_flag(std::string* hedge_flag);
  private:
  const std::string& _internal_hedge_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hedge_flag(const std::string& value);
  std::string* _internal_mutable_hedge_flag();
  public:

  // string posi_date_type = 7;
  void clear_posi_date_type();
  const std::string& posi_date_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_posi_date_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_posi_date_type();
  PROTOBUF_NODISCARD std::string* release_posi_date_type();
  void set_allocated_posi_date_type(std::string* posi_date_type);
  private:
  const std::string& _internal_posi_date_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_posi_date_type(const std::string& value);
  std::string* _internal_mutable_posi_date_type();
  public:

  // string fund_acct = 8;
  void clear_fund_acct();
  const std::string& fund_acct() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fund_acct(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fund_acct();
  PROTOBUF_NODISCARD std::string* release_fund_acct();
  void set_allocated_fund_acct(std::string* fund_acct);
  private:
  const std::string& _internal_fund_acct() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fund_acct(const std::string& value);
  std::string* _internal_mutable_fund_acct();
  public:

  // string ex_code = 9;
  void clear_ex_code();
  const std::string& ex_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ex_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ex_code();
  PROTOBUF_NODISCARD std::string* release_ex_code();
  void set_allocated_ex_code(std::string* ex_code);
  private:
  const std::string& _internal_ex_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ex_code(const std::string& value);
  std::string* _internal_mutable_ex_code();
  public:

  // .message_head.head head = 1;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  const ::message_head::head& head() const;
  PROTOBUF_NODISCARD ::message_head::head* release_head();
  ::message_head::head* mutable_head();
  void set_allocated_head(::message_head::head* head);
  private:
  const ::message_head::head& _internal_head() const;
  ::message_head::head* _internal_mutable_head();
  public:
  void unsafe_arena_set_allocated_head(
      ::message_head::head* head);
  ::message_head::head* unsafe_arena_release_head();

  // float posi_profit_by_date = 10;
  void clear_posi_profit_by_date();
  float posi_profit_by_date() const;
  void set_posi_profit_by_date(float value);
  private:
  float _internal_posi_profit_by_date() const;
  void _internal_set_posi_profit_by_date(float value);
  public:

  // float posi_profit_by_trade = 11;
  void clear_posi_profit_by_trade();
  float posi_profit_by_trade() const;
  void set_posi_profit_by_trade(float value);
  private:
  float _internal_posi_profit_by_trade() const;
  void _internal_set_posi_profit_by_trade(float value);
  public:

  // float close_profit_by_date = 12;
  void clear_close_profit_by_date();
  float close_profit_by_date() const;
  void set_close_profit_by_date(float value);
  private:
  float _internal_close_profit_by_date() const;
  void _internal_set_close_profit_by_date(float value);
  public:

  // float close_profit_by_trade = 13;
  void clear_close_profit_by_trade();
  float close_profit_by_trade() const;
  void set_close_profit_by_trade(float value);
  private:
  float _internal_close_profit_by_trade() const;
  void _internal_set_close_profit_by_trade(float value);
  public:

  // uint64 last_position = 14;
  void clear_last_position();
  uint64_t last_position() const;
  void set_last_position(uint64_t value);
  private:
  uint64_t _internal_last_position() const;
  void _internal_set_last_position(uint64_t value);
  public:

  // uint64 posi_vol = 15;
  void clear_posi_vol();
  uint64_t posi_vol() const;
  void set_posi_vol(uint64_t value);
  private:
  uint64_t _internal_posi_vol() const;
  void _internal_set_posi_vol(uint64_t value);
  public:

  // uint64 today_position = 16;
  void clear_today_position();
  uint64_t today_position() const;
  void set_today_position(uint64_t value);
  private:
  uint64_t _internal_today_position() const;
  void _internal_set_today_position(uint64_t value);
  public:

  // uint64 frozen_position = 17;
  void clear_frozen_position();
  uint64_t frozen_position() const;
  void set_frozen_position(uint64_t value);
  private:
  uint64_t _internal_frozen_position() const;
  void _internal_set_frozen_position(uint64_t value);
  public:

  // uint64 open_vol = 19;
  void clear_open_vol();
  uint64_t open_vol() const;
  void set_open_vol(uint64_t value);
  private:
  uint64_t _internal_open_vol() const;
  void _internal_set_open_vol(uint64_t value);
  public:

  // float frozen_amount = 18;
  void clear_frozen_amount();
  float frozen_amount() const;
  void set_frozen_amount(float value);
  private:
  float _internal_frozen_amount() const;
  void _internal_set_frozen_amount(float value);
  public:

  // float open_amount = 21;
  void clear_open_amount();
  float open_amount() const;
  void set_open_amount(float value);
  private:
  float _internal_open_amount() const;
  void _internal_set_open_amount(float value);
  public:

  // uint64 close_vol = 20;
  void clear_close_vol();
  uint64_t close_vol() const;
  void set_close_vol(uint64_t value);
  private:
  uint64_t _internal_close_vol() const;
  void _internal_set_close_vol(uint64_t value);
  public:

  // float close_amount = 22;
  void clear_close_amount();
  float close_amount() const;
  void set_close_amount(float value);
  private:
  float _internal_close_amount() const;
  void _internal_set_close_amount(float value);
  public:

  // float posi_cost = 23;
  void clear_posi_cost();
  float posi_cost() const;
  void set_posi_cost(float value);
  private:
  float _internal_posi_cost() const;
  void _internal_set_posi_cost(float value);
  public:

  // float open_cost = 24;
  void clear_open_cost();
  float open_cost() const;
  void set_open_cost(float value);
  private:
  float _internal_open_cost() const;
  void _internal_set_open_cost(float value);
  public:

  // float pre_margin = 25;
  void clear_pre_margin();
  float pre_margin() const;
  void set_pre_margin(float value);
  private:
  float _internal_pre_margin() const;
  void _internal_set_pre_margin(float value);
  public:

  // float use_margin = 26;
  void clear_use_margin();
  float use_margin() const;
  void set_use_margin(float value);
  private:
  float _internal_use_margin() const;
  void _internal_set_use_margin(float value);
  public:

  // float frozen_margin = 27;
  void clear_frozen_margin();
  float frozen_margin() const;
  void set_frozen_margin(float value);
  private:
  float _internal_frozen_margin() const;
  void _internal_set_frozen_margin(float value);
  public:

  // float frozen_cash = 28;
  void clear_frozen_cash();
  float frozen_cash() const;
  void set_frozen_cash(float value);
  private:
  float _internal_frozen_cash() const;
  void _internal_set_frozen_cash(float value);
  public:

  // float frozen_fee = 29;
  void clear_frozen_fee();
  float frozen_fee() const;
  void set_frozen_fee(float value);
  private:
  float _internal_frozen_fee() const;
  void _internal_set_frozen_fee(float value);
  public:

  // float adjust = 30;
  void clear_adjust();
  float adjust() const;
  void set_adjust(float value);
  private:
  float _internal_adjust() const;
  void _internal_set_adjust(float value);
  public:

  // float trade_fee = 31;
  void clear_trade_fee();
  float trade_fee() const;
  void set_trade_fee(float value);
  private:
  float _internal_trade_fee() const;
  void _internal_set_trade_fee(float value);
  public:

  // uint64 long_frozen = 33;
  void clear_long_frozen();
  uint64_t long_frozen() const;
  void set_long_frozen(uint64_t value);
  private:
  uint64_t _internal_long_frozen() const;
  void _internal_set_long_frozen(uint64_t value);
  public:

  // float pre_settlement_price = 32;
  void clear_pre_settlement_price();
  float pre_settlement_price() const;
  void set_pre_settlement_price(float value);
  private:
  float _internal_pre_settlement_price() const;
  void _internal_set_pre_settlement_price(float value);
  public:

  // float long_frozen_amount = 35;
  void clear_long_frozen_amount();
  float long_frozen_amount() const;
  void set_long_frozen_amount(float value);
  private:
  float _internal_long_frozen_amount() const;
  void _internal_set_long_frozen_amount(float value);
  public:

  // uint64 short_frozen = 34;
  void clear_short_frozen();
  uint64_t short_frozen() const;
  void set_short_frozen(uint64_t value);
  private:
  uint64_t _internal_short_frozen() const;
  void _internal_set_short_frozen(uint64_t value);
  public:

  // float short_frozen_amount = 36;
  void clear_short_frozen_amount();
  float short_frozen_amount() const;
  void set_short_frozen_amount(float value);
  private:
  float _internal_short_frozen_amount() const;
  void _internal_set_short_frozen_amount(float value);
  public:

  // float margin_rate_by_vol = 37;
  void clear_margin_rate_by_vol();
  float margin_rate_by_vol() const;
  void set_margin_rate_by_vol(float value);
  private:
  float _internal_margin_rate_by_vol() const;
  void _internal_set_margin_rate_by_vol(float value);
  public:

  // float margin_rate_by_money = 38;
  void clear_margin_rate_by_money();
  float margin_rate_by_money() const;
  void set_margin_rate_by_money(float value);
  private:
  float _internal_margin_rate_by_money() const;
  void _internal_set_margin_rate_by_money(float value);
  public:

  // @@protoc_insertion_point(class_scope:ficc_message.ficc_position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trading_day_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_acct_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secu_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr posi_direction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hedge_flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr posi_date_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fund_acct_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ex_code_;
  ::message_head::head* head_;
  float posi_profit_by_date_;
  float posi_profit_by_trade_;
  float close_profit_by_date_;
  float close_profit_by_trade_;
  uint64_t last_position_;
  uint64_t posi_vol_;
  uint64_t today_position_;
  uint64_t frozen_position_;
  uint64_t open_vol_;
  float frozen_amount_;
  float open_amount_;
  uint64_t close_vol_;
  float close_amount_;
  float posi_cost_;
  float open_cost_;
  float pre_margin_;
  float use_margin_;
  float frozen_margin_;
  float frozen_cash_;
  float frozen_fee_;
  float adjust_;
  float trade_fee_;
  uint64_t long_frozen_;
  float pre_settlement_price_;
  float long_frozen_amount_;
  uint64_t short_frozen_;
  float short_frozen_amount_;
  float margin_rate_by_vol_;
  float margin_rate_by_money_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ficc_2eproto;
};
// -------------------------------------------------------------------

class ficc_Exch_BilateralOrder_Req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ficc_message.ficc_Exch_BilateralOrder_Req) */ {
 public:
  inline ficc_Exch_BilateralOrder_Req() : ficc_Exch_BilateralOrder_Req(nullptr) {}
  ~ficc_Exch_BilateralOrder_Req() override;
  explicit PROTOBUF_CONSTEXPR ficc_Exch_BilateralOrder_Req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ficc_Exch_BilateralOrder_Req(const ficc_Exch_BilateralOrder_Req& from);
  ficc_Exch_BilateralOrder_Req(ficc_Exch_BilateralOrder_Req&& from) noexcept
    : ficc_Exch_BilateralOrder_Req() {
    *this = ::std::move(from);
  }

  inline ficc_Exch_BilateralOrder_Req& operator=(const ficc_Exch_BilateralOrder_Req& from) {
    CopyFrom(from);
    return *this;
  }
  inline ficc_Exch_BilateralOrder_Req& operator=(ficc_Exch_BilateralOrder_Req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ficc_Exch_BilateralOrder_Req& default_instance() {
    return *internal_default_instance();
  }
  static inline const ficc_Exch_BilateralOrder_Req* internal_default_instance() {
    return reinterpret_cast<const ficc_Exch_BilateralOrder_Req*>(
               &_ficc_Exch_BilateralOrder_Req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ficc_Exch_BilateralOrder_Req& a, ficc_Exch_BilateralOrder_Req& b) {
    a.Swap(&b);
  }
  inline void Swap(ficc_Exch_BilateralOrder_Req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ficc_Exch_BilateralOrder_Req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ficc_Exch_BilateralOrder_Req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ficc_Exch_BilateralOrder_Req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ficc_Exch_BilateralOrder_Req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ficc_Exch_BilateralOrder_Req& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ficc_Exch_BilateralOrder_Req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ficc_message.ficc_Exch_BilateralOrder_Req";
  }
  protected:
  explicit ficc_Exch_BilateralOrder_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradeAcctFieldNumber = 2,
    kFundAcctFieldNumber = 3,
    kCombinoFieldNumber = 4,
    kExCodeFieldNumber = 6,
    kCommodityTypeFieldNumber = 7,
    kSecuCodeFieldNumber = 8,
    kSecuNameFieldNumber = 9,
    kOrderPriceTypeFieldNumber = 10,
    kOffsetFlagFieldNumber = 11,
    kHedgeFlagFieldNumber = 12,
    kSeatOrderIdFieldNumber = 13,
    kTimeCondFieldNumber = 18,
    kTextFieldNumber = 20,
    kOrderSysIdFieldNumber = 21,
    kTradeDateFieldNumber = 22,
    kInsertTimeFieldNumber = 23,
    kValidUntilTimeFieldNumber = 36,
    kClientRefIdFieldNumber = 37,
    kOrderSourceFieldNumber = 40,
    kSecuTypeIdFieldNumber = 41,
    kMaturityFieldNumber = 42,
    kIssuerPartyIdFieldNumber = 43,
    kHeadFieldNumber = 1,
    kUserIdFieldNumber = 5,
    kBidPriceFieldNumber = 14,
    kBidVolFieldNumber = 15,
    kAskVolFieldNumber = 17,
    kStrategyCodeFieldNumber = 19,
    kAskPriceFieldNumber = 16,
    kBidYtmFieldNumber = 24,
    kBidLegsettlTypeFieldNumber = 26,
    kBidDeliveryTypeFieldNumber = 27,
    kBidStrikeYeildFieldNumber = 25,
    kAskYtmFieldNumber = 29,
    kBidClearingMethodFieldNumber = 28,
    kAskLegsettlTypeFieldNumber = 31,
    kAskDeliveryTypeFieldNumber = 32,
    kAskClearingMethodFieldNumber = 33,
    kQuoteTypeFieldNumber = 34,
    kMaxFloorFieldNumber = 35,
    kRoutingTypeFieldNumber = 38,
    kMarketIndicatorFieldNumber = 39,
    kAskStrikeYeildFieldNumber = 30,
  };
  // string trade_acct = 2;
  void clear_trade_acct();
  const std::string& trade_acct() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_acct(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_acct();
  PROTOBUF_NODISCARD std::string* release_trade_acct();
  void set_allocated_trade_acct(std::string* trade_acct);
  private:
  const std::string& _internal_trade_acct() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_acct(const std::string& value);
  std::string* _internal_mutable_trade_acct();
  public:

  // string fund_acct = 3;
  void clear_fund_acct();
  const std::string& fund_acct() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fund_acct(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fund_acct();
  PROTOBUF_NODISCARD std::string* release_fund_acct();
  void set_allocated_fund_acct(std::string* fund_acct);
  private:
  const std::string& _internal_fund_acct() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fund_acct(const std::string& value);
  std::string* _internal_mutable_fund_acct();
  public:

  // string combino = 4;
  void clear_combino();
  const std::string& combino() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_combino(ArgT0&& arg0, ArgT... args);
  std::string* mutable_combino();
  PROTOBUF_NODISCARD std::string* release_combino();
  void set_allocated_combino(std::string* combino);
  private:
  const std::string& _internal_combino() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_combino(const std::string& value);
  std::string* _internal_mutable_combino();
  public:

  // string ex_code = 6;
  void clear_ex_code();
  const std::string& ex_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ex_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ex_code();
  PROTOBUF_NODISCARD std::string* release_ex_code();
  void set_allocated_ex_code(std::string* ex_code);
  private:
  const std::string& _internal_ex_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ex_code(const std::string& value);
  std::string* _internal_mutable_ex_code();
  public:

  // string commodity_type = 7;
  void clear_commodity_type();
  const std::string& commodity_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_commodity_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_commodity_type();
  PROTOBUF_NODISCARD std::string* release_commodity_type();
  void set_allocated_commodity_type(std::string* commodity_type);
  private:
  const std::string& _internal_commodity_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_commodity_type(const std::string& value);
  std::string* _internal_mutable_commodity_type();
  public:

  // string secu_code = 8;
  void clear_secu_code();
  const std::string& secu_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secu_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secu_code();
  PROTOBUF_NODISCARD std::string* release_secu_code();
  void set_allocated_secu_code(std::string* secu_code);
  private:
  const std::string& _internal_secu_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secu_code(const std::string& value);
  std::string* _internal_mutable_secu_code();
  public:

  // string secu_name = 9;
  void clear_secu_name();
  const std::string& secu_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secu_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secu_name();
  PROTOBUF_NODISCARD std::string* release_secu_name();
  void set_allocated_secu_name(std::string* secu_name);
  private:
  const std::string& _internal_secu_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secu_name(const std::string& value);
  std::string* _internal_mutable_secu_name();
  public:

  // string order_price_type = 10;
  void clear_order_price_type();
  const std::string& order_price_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_price_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_price_type();
  PROTOBUF_NODISCARD std::string* release_order_price_type();
  void set_allocated_order_price_type(std::string* order_price_type);
  private:
  const std::string& _internal_order_price_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_price_type(const std::string& value);
  std::string* _internal_mutable_order_price_type();
  public:

  // string offset_flag = 11;
  void clear_offset_flag();
  const std::string& offset_flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_offset_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_offset_flag();
  PROTOBUF_NODISCARD std::string* release_offset_flag();
  void set_allocated_offset_flag(std::string* offset_flag);
  private:
  const std::string& _internal_offset_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_offset_flag(const std::string& value);
  std::string* _internal_mutable_offset_flag();
  public:

  // string hedge_flag = 12;
  void clear_hedge_flag();
  const std::string& hedge_flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hedge_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hedge_flag();
  PROTOBUF_NODISCARD std::string* release_hedge_flag();
  void set_allocated_hedge_flag(std::string* hedge_flag);
  private:
  const std::string& _internal_hedge_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hedge_flag(const std::string& value);
  std::string* _internal_mutable_hedge_flag();
  public:

  // string seat_order_id = 13;
  void clear_seat_order_id();
  const std::string& seat_order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_seat_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_seat_order_id();
  PROTOBUF_NODISCARD std::string* release_seat_order_id();
  void set_allocated_seat_order_id(std::string* seat_order_id);
  private:
  const std::string& _internal_seat_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_seat_order_id(const std::string& value);
  std::string* _internal_mutable_seat_order_id();
  public:

  // string time_cond = 18;
  void clear_time_cond();
  const std::string& time_cond() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_time_cond(ArgT0&& arg0, ArgT... args);
  std::string* mutable_time_cond();
  PROTOBUF_NODISCARD std::string* release_time_cond();
  void set_allocated_time_cond(std::string* time_cond);
  private:
  const std::string& _internal_time_cond() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time_cond(const std::string& value);
  std::string* _internal_mutable_time_cond();
  public:

  // string text = 20;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string order_sys_id = 21;
  void clear_order_sys_id();
  const std::string& order_sys_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_sys_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_sys_id();
  PROTOBUF_NODISCARD std::string* release_order_sys_id();
  void set_allocated_order_sys_id(std::string* order_sys_id);
  private:
  const std::string& _internal_order_sys_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_sys_id(const std::string& value);
  std::string* _internal_mutable_order_sys_id();
  public:

  // string trade_date = 22;
  void clear_trade_date();
  const std::string& trade_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_date();
  PROTOBUF_NODISCARD std::string* release_trade_date();
  void set_allocated_trade_date(std::string* trade_date);
  private:
  const std::string& _internal_trade_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_date(const std::string& value);
  std::string* _internal_mutable_trade_date();
  public:

  // string insert_time = 23;
  void clear_insert_time();
  const std::string& insert_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_insert_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_insert_time();
  PROTOBUF_NODISCARD std::string* release_insert_time();
  void set_allocated_insert_time(std::string* insert_time);
  private:
  const std::string& _internal_insert_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_insert_time(const std::string& value);
  std::string* _internal_mutable_insert_time();
  public:

  // string valid_until_time = 36;
  void clear_valid_until_time();
  const std::string& valid_until_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_valid_until_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_valid_until_time();
  PROTOBUF_NODISCARD std::string* release_valid_until_time();
  void set_allocated_valid_until_time(std::string* valid_until_time);
  private:
  const std::string& _internal_valid_until_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_valid_until_time(const std::string& value);
  std::string* _internal_mutable_valid_until_time();
  public:

  // string client_ref_id = 37;
  void clear_client_ref_id();
  const std::string& client_ref_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_ref_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_ref_id();
  PROTOBUF_NODISCARD std::string* release_client_ref_id();
  void set_allocated_client_ref_id(std::string* client_ref_id);
  private:
  const std::string& _internal_client_ref_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_ref_id(const std::string& value);
  std::string* _internal_mutable_client_ref_id();
  public:

  // string order_source = 40;
  void clear_order_source();
  const std::string& order_source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_source();
  PROTOBUF_NODISCARD std::string* release_order_source();
  void set_allocated_order_source(std::string* order_source);
  private:
  const std::string& _internal_order_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_source(const std::string& value);
  std::string* _internal_mutable_order_source();
  public:

  // string secu_type_id = 41;
  void clear_secu_type_id();
  const std::string& secu_type_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secu_type_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secu_type_id();
  PROTOBUF_NODISCARD std::string* release_secu_type_id();
  void set_allocated_secu_type_id(std::string* secu_type_id);
  private:
  const std::string& _internal_secu_type_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secu_type_id(const std::string& value);
  std::string* _internal_mutable_secu_type_id();
  public:

  // string maturity = 42;
  void clear_maturity();
  const std::string& maturity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_maturity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_maturity();
  PROTOBUF_NODISCARD std::string* release_maturity();
  void set_allocated_maturity(std::string* maturity);
  private:
  const std::string& _internal_maturity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_maturity(const std::string& value);
  std::string* _internal_mutable_maturity();
  public:

  // string issuer_party_id = 43;
  void clear_issuer_party_id();
  const std::string& issuer_party_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_issuer_party_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_issuer_party_id();
  PROTOBUF_NODISCARD std::string* release_issuer_party_id();
  void set_allocated_issuer_party_id(std::string* issuer_party_id);
  private:
  const std::string& _internal_issuer_party_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_issuer_party_id(const std::string& value);
  std::string* _internal_mutable_issuer_party_id();
  public:

  // .message_head.head head = 1;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  const ::message_head::head& head() const;
  PROTOBUF_NODISCARD ::message_head::head* release_head();
  ::message_head::head* mutable_head();
  void set_allocated_head(::message_head::head* head);
  private:
  const ::message_head::head& _internal_head() const;
  ::message_head::head* _internal_mutable_head();
  public:
  void unsafe_arena_set_allocated_head(
      ::message_head::head* head);
  ::message_head::head* unsafe_arena_release_head();

  // uint32 user_id = 5;
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // float bid_price = 14;
  void clear_bid_price();
  float bid_price() const;
  void set_bid_price(float value);
  private:
  float _internal_bid_price() const;
  void _internal_set_bid_price(float value);
  public:

  // uint64 bid_vol = 15;
  void clear_bid_vol();
  uint64_t bid_vol() const;
  void set_bid_vol(uint64_t value);
  private:
  uint64_t _internal_bid_vol() const;
  void _internal_set_bid_vol(uint64_t value);
  public:

  // uint64 ask_vol = 17;
  void clear_ask_vol();
  uint64_t ask_vol() const;
  void set_ask_vol(uint64_t value);
  private:
  uint64_t _internal_ask_vol() const;
  void _internal_set_ask_vol(uint64_t value);
  public:

  // uint64 strategy_code = 19;
  void clear_strategy_code();
  uint64_t strategy_code() const;
  void set_strategy_code(uint64_t value);
  private:
  uint64_t _internal_strategy_code() const;
  void _internal_set_strategy_code(uint64_t value);
  public:

  // float ask_price = 16;
  void clear_ask_price();
  float ask_price() const;
  void set_ask_price(float value);
  private:
  float _internal_ask_price() const;
  void _internal_set_ask_price(float value);
  public:

  // float bid_ytm = 24;
  void clear_bid_ytm();
  float bid_ytm() const;
  void set_bid_ytm(float value);
  private:
  float _internal_bid_ytm() const;
  void _internal_set_bid_ytm(float value);
  public:

  // uint64 bid_legsettl_type = 26;
  void clear_bid_legsettl_type();
  uint64_t bid_legsettl_type() const;
  void set_bid_legsettl_type(uint64_t value);
  private:
  uint64_t _internal_bid_legsettl_type() const;
  void _internal_set_bid_legsettl_type(uint64_t value);
  public:

  // uint64 bid_delivery_type = 27;
  void clear_bid_delivery_type();
  uint64_t bid_delivery_type() const;
  void set_bid_delivery_type(uint64_t value);
  private:
  uint64_t _internal_bid_delivery_type() const;
  void _internal_set_bid_delivery_type(uint64_t value);
  public:

  // float bid_strike_yeild = 25;
  void clear_bid_strike_yeild();
  float bid_strike_yeild() const;
  void set_bid_strike_yeild(float value);
  private:
  float _internal_bid_strike_yeild() const;
  void _internal_set_bid_strike_yeild(float value);
  public:

  // float ask_ytm = 29;
  void clear_ask_ytm();
  float ask_ytm() const;
  void set_ask_ytm(float value);
  private:
  float _internal_ask_ytm() const;
  void _internal_set_ask_ytm(float value);
  public:

  // uint64 bid_clearing_method = 28;
  void clear_bid_clearing_method();
  uint64_t bid_clearing_method() const;
  void set_bid_clearing_method(uint64_t value);
  private:
  uint64_t _internal_bid_clearing_method() const;
  void _internal_set_bid_clearing_method(uint64_t value);
  public:

  // uint64 ask_legsettl_type = 31;
  void clear_ask_legsettl_type();
  uint64_t ask_legsettl_type() const;
  void set_ask_legsettl_type(uint64_t value);
  private:
  uint64_t _internal_ask_legsettl_type() const;
  void _internal_set_ask_legsettl_type(uint64_t value);
  public:

  // uint64 ask_delivery_type = 32;
  void clear_ask_delivery_type();
  uint64_t ask_delivery_type() const;
  void set_ask_delivery_type(uint64_t value);
  private:
  uint64_t _internal_ask_delivery_type() const;
  void _internal_set_ask_delivery_type(uint64_t value);
  public:

  // uint64 ask_clearing_method = 33;
  void clear_ask_clearing_method();
  uint64_t ask_clearing_method() const;
  void set_ask_clearing_method(uint64_t value);
  private:
  uint64_t _internal_ask_clearing_method() const;
  void _internal_set_ask_clearing_method(uint64_t value);
  public:

  // uint64 quote_type = 34;
  void clear_quote_type();
  uint64_t quote_type() const;
  void set_quote_type(uint64_t value);
  private:
  uint64_t _internal_quote_type() const;
  void _internal_set_quote_type(uint64_t value);
  public:

  // uint64 max_floor = 35;
  void clear_max_floor();
  uint64_t max_floor() const;
  void set_max_floor(uint64_t value);
  private:
  uint64_t _internal_max_floor() const;
  void _internal_set_max_floor(uint64_t value);
  public:

  // uint64 routing_type = 38;
  void clear_routing_type();
  uint64_t routing_type() const;
  void set_routing_type(uint64_t value);
  private:
  uint64_t _internal_routing_type() const;
  void _internal_set_routing_type(uint64_t value);
  public:

  // uint64 market_indicator = 39;
  void clear_market_indicator();
  uint64_t market_indicator() const;
  void set_market_indicator(uint64_t value);
  private:
  uint64_t _internal_market_indicator() const;
  void _internal_set_market_indicator(uint64_t value);
  public:

  // float ask_strike_yeild = 30;
  void clear_ask_strike_yeild();
  float ask_strike_yeild() const;
  void set_ask_strike_yeild(float value);
  private:
  float _internal_ask_strike_yeild() const;
  void _internal_set_ask_strike_yeild(float value);
  public:

  // @@protoc_insertion_point(class_scope:ficc_message.ficc_Exch_BilateralOrder_Req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_acct_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fund_acct_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr combino_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ex_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commodity_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secu_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secu_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_price_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr offset_flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hedge_flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seat_order_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_cond_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_sys_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr insert_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr valid_until_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_ref_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secu_type_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maturity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr issuer_party_id_;
  ::message_head::head* head_;
  uint32_t user_id_;
  float bid_price_;
  uint64_t bid_vol_;
  uint64_t ask_vol_;
  uint64_t strategy_code_;
  float ask_price_;
  float bid_ytm_;
  uint64_t bid_legsettl_type_;
  uint64_t bid_delivery_type_;
  float bid_strike_yeild_;
  float ask_ytm_;
  uint64_t bid_clearing_method_;
  uint64_t ask_legsettl_type_;
  uint64_t ask_delivery_type_;
  uint64_t ask_clearing_method_;
  uint64_t quote_type_;
  uint64_t max_floor_;
  uint64_t routing_type_;
  uint64_t market_indicator_;
  float ask_strike_yeild_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ficc_2eproto;
};
// -------------------------------------------------------------------

class ficc_Exch_BilateralOrder_Rtn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ficc_message.ficc_Exch_BilateralOrder_Rtn) */ {
 public:
  inline ficc_Exch_BilateralOrder_Rtn() : ficc_Exch_BilateralOrder_Rtn(nullptr) {}
  ~ficc_Exch_BilateralOrder_Rtn() override;
  explicit PROTOBUF_CONSTEXPR ficc_Exch_BilateralOrder_Rtn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ficc_Exch_BilateralOrder_Rtn(const ficc_Exch_BilateralOrder_Rtn& from);
  ficc_Exch_BilateralOrder_Rtn(ficc_Exch_BilateralOrder_Rtn&& from) noexcept
    : ficc_Exch_BilateralOrder_Rtn() {
    *this = ::std::move(from);
  }

  inline ficc_Exch_BilateralOrder_Rtn& operator=(const ficc_Exch_BilateralOrder_Rtn& from) {
    CopyFrom(from);
    return *this;
  }
  inline ficc_Exch_BilateralOrder_Rtn& operator=(ficc_Exch_BilateralOrder_Rtn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ficc_Exch_BilateralOrder_Rtn& default_instance() {
    return *internal_default_instance();
  }
  static inline const ficc_Exch_BilateralOrder_Rtn* internal_default_instance() {
    return reinterpret_cast<const ficc_Exch_BilateralOrder_Rtn*>(
               &_ficc_Exch_BilateralOrder_Rtn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ficc_Exch_BilateralOrder_Rtn& a, ficc_Exch_BilateralOrder_Rtn& b) {
    a.Swap(&b);
  }
  inline void Swap(ficc_Exch_BilateralOrder_Rtn* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ficc_Exch_BilateralOrder_Rtn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ficc_Exch_BilateralOrder_Rtn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ficc_Exch_BilateralOrder_Rtn>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ficc_Exch_BilateralOrder_Rtn& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ficc_Exch_BilateralOrder_Rtn& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ficc_Exch_BilateralOrder_Rtn* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ficc_message.ficc_Exch_BilateralOrder_Rtn";
  }
  protected:
  explicit ficc_Exch_BilateralOrder_Rtn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderStatusFieldNumber = 2,
    kAcctionFlagFieldNumber = 3,
    kValidUntilTimeFieldNumber = 4,
    kSeatOrderIdFieldNumber = 5,
    kOrderSysIdFieldNumber = 6,
    kInsertDateFieldNumber = 7,
    kUpdateTimeFieldNumber = 8,
    kSecuCodeFieldNumber = 9,
    kFundAcctFieldNumber = 29,
    kTradeIdFieldNumber = 30,
    kHeadFieldNumber = 1,
    kMaxFloorFieldNumber = 10,
    kBidVolFieldNumber = 11,
    kBidVolTradedFieldNumber = 12,
    kBidVolTotalFieldNumber = 13,
    kAskVolFieldNumber = 14,
    kAskVolTradedFieldNumber = 15,
    kAskVolTotalFieldNumber = 16,
    kBidPriceFieldNumber = 17,
    kAskPriceFieldNumber = 18,
    kBidLegsettlTypeFieldNumber = 19,
    kBidDeliveryTypeFieldNumber = 20,
    kBidClearingMethodFieldNumber = 21,
    kBidYtmFieldNumber = 22,
    kBidStrikeYeildFieldNumber = 23,
    kAskLegsettlTypeFieldNumber = 24,
    kAskDeliveryTypeFieldNumber = 25,
    kAskClearingMethodFieldNumber = 26,
    kAskYtmFieldNumber = 27,
    kAskStrikeYeildFieldNumber = 28,
  };
  // string order_status = 2;
  void clear_order_status();
  const std::string& order_status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_status();
  PROTOBUF_NODISCARD std::string* release_order_status();
  void set_allocated_order_status(std::string* order_status);
  private:
  const std::string& _internal_order_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_status(const std::string& value);
  std::string* _internal_mutable_order_status();
  public:

  // string acction_flag = 3;
  void clear_acction_flag();
  const std::string& acction_flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_acction_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_acction_flag();
  PROTOBUF_NODISCARD std::string* release_acction_flag();
  void set_allocated_acction_flag(std::string* acction_flag);
  private:
  const std::string& _internal_acction_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_acction_flag(const std::string& value);
  std::string* _internal_mutable_acction_flag();
  public:

  // string valid_until_time = 4;
  void clear_valid_until_time();
  const std::string& valid_until_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_valid_until_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_valid_until_time();
  PROTOBUF_NODISCARD std::string* release_valid_until_time();
  void set_allocated_valid_until_time(std::string* valid_until_time);
  private:
  const std::string& _internal_valid_until_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_valid_until_time(const std::string& value);
  std::string* _internal_mutable_valid_until_time();
  public:

  // string seat_order_id = 5;
  void clear_seat_order_id();
  const std::string& seat_order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_seat_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_seat_order_id();
  PROTOBUF_NODISCARD std::string* release_seat_order_id();
  void set_allocated_seat_order_id(std::string* seat_order_id);
  private:
  const std::string& _internal_seat_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_seat_order_id(const std::string& value);
  std::string* _internal_mutable_seat_order_id();
  public:

  // string order_sys_id = 6;
  void clear_order_sys_id();
  const std::string& order_sys_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_sys_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_sys_id();
  PROTOBUF_NODISCARD std::string* release_order_sys_id();
  void set_allocated_order_sys_id(std::string* order_sys_id);
  private:
  const std::string& _internal_order_sys_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_sys_id(const std::string& value);
  std::string* _internal_mutable_order_sys_id();
  public:

  // string insert_date = 7;
  void clear_insert_date();
  const std::string& insert_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_insert_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_insert_date();
  PROTOBUF_NODISCARD std::string* release_insert_date();
  void set_allocated_insert_date(std::string* insert_date);
  private:
  const std::string& _internal_insert_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_insert_date(const std::string& value);
  std::string* _internal_mutable_insert_date();
  public:

  // string update_time = 8;
  void clear_update_time();
  const std::string& update_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_update_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_update_time();
  PROTOBUF_NODISCARD std::string* release_update_time();
  void set_allocated_update_time(std::string* update_time);
  private:
  const std::string& _internal_update_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_update_time(const std::string& value);
  std::string* _internal_mutable_update_time();
  public:

  // string secu_code = 9;
  void clear_secu_code();
  const std::string& secu_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secu_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secu_code();
  PROTOBUF_NODISCARD std::string* release_secu_code();
  void set_allocated_secu_code(std::string* secu_code);
  private:
  const std::string& _internal_secu_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secu_code(const std::string& value);
  std::string* _internal_mutable_secu_code();
  public:

  // string fund_acct = 29;
  void clear_fund_acct();
  const std::string& fund_acct() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fund_acct(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fund_acct();
  PROTOBUF_NODISCARD std::string* release_fund_acct();
  void set_allocated_fund_acct(std::string* fund_acct);
  private:
  const std::string& _internal_fund_acct() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fund_acct(const std::string& value);
  std::string* _internal_mutable_fund_acct();
  public:

  // string trade_id = 30;
  void clear_trade_id();
  const std::string& trade_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_id();
  PROTOBUF_NODISCARD std::string* release_trade_id();
  void set_allocated_trade_id(std::string* trade_id);
  private:
  const std::string& _internal_trade_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_id(const std::string& value);
  std::string* _internal_mutable_trade_id();
  public:

  // .message_head.head head = 1;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  const ::message_head::head& head() const;
  PROTOBUF_NODISCARD ::message_head::head* release_head();
  ::message_head::head* mutable_head();
  void set_allocated_head(::message_head::head* head);
  private:
  const ::message_head::head& _internal_head() const;
  ::message_head::head* _internal_mutable_head();
  public:
  void unsafe_arena_set_allocated_head(
      ::message_head::head* head);
  ::message_head::head* unsafe_arena_release_head();

  // uint64 max_floor = 10;
  void clear_max_floor();
  uint64_t max_floor() const;
  void set_max_floor(uint64_t value);
  private:
  uint64_t _internal_max_floor() const;
  void _internal_set_max_floor(uint64_t value);
  public:

  // uint64 bid_vol = 11;
  void clear_bid_vol();
  uint64_t bid_vol() const;
  void set_bid_vol(uint64_t value);
  private:
  uint64_t _internal_bid_vol() const;
  void _internal_set_bid_vol(uint64_t value);
  public:

  // uint64 bid_vol_traded = 12;
  void clear_bid_vol_traded();
  uint64_t bid_vol_traded() const;
  void set_bid_vol_traded(uint64_t value);
  private:
  uint64_t _internal_bid_vol_traded() const;
  void _internal_set_bid_vol_traded(uint64_t value);
  public:

  // uint64 bid_vol_total = 13;
  void clear_bid_vol_total();
  uint64_t bid_vol_total() const;
  void set_bid_vol_total(uint64_t value);
  private:
  uint64_t _internal_bid_vol_total() const;
  void _internal_set_bid_vol_total(uint64_t value);
  public:

  // uint64 ask_vol = 14;
  void clear_ask_vol();
  uint64_t ask_vol() const;
  void set_ask_vol(uint64_t value);
  private:
  uint64_t _internal_ask_vol() const;
  void _internal_set_ask_vol(uint64_t value);
  public:

  // uint64 ask_vol_traded = 15;
  void clear_ask_vol_traded();
  uint64_t ask_vol_traded() const;
  void set_ask_vol_traded(uint64_t value);
  private:
  uint64_t _internal_ask_vol_traded() const;
  void _internal_set_ask_vol_traded(uint64_t value);
  public:

  // uint64 ask_vol_total = 16;
  void clear_ask_vol_total();
  uint64_t ask_vol_total() const;
  void set_ask_vol_total(uint64_t value);
  private:
  uint64_t _internal_ask_vol_total() const;
  void _internal_set_ask_vol_total(uint64_t value);
  public:

  // float bid_price = 17;
  void clear_bid_price();
  float bid_price() const;
  void set_bid_price(float value);
  private:
  float _internal_bid_price() const;
  void _internal_set_bid_price(float value);
  public:

  // float ask_price = 18;
  void clear_ask_price();
  float ask_price() const;
  void set_ask_price(float value);
  private:
  float _internal_ask_price() const;
  void _internal_set_ask_price(float value);
  public:

  // uint64 bid_legsettl_type = 19;
  void clear_bid_legsettl_type();
  uint64_t bid_legsettl_type() const;
  void set_bid_legsettl_type(uint64_t value);
  private:
  uint64_t _internal_bid_legsettl_type() const;
  void _internal_set_bid_legsettl_type(uint64_t value);
  public:

  // uint64 bid_delivery_type = 20;
  void clear_bid_delivery_type();
  uint64_t bid_delivery_type() const;
  void set_bid_delivery_type(uint64_t value);
  private:
  uint64_t _internal_bid_delivery_type() const;
  void _internal_set_bid_delivery_type(uint64_t value);
  public:

  // uint64 bid_clearing_method = 21;
  void clear_bid_clearing_method();
  uint64_t bid_clearing_method() const;
  void set_bid_clearing_method(uint64_t value);
  private:
  uint64_t _internal_bid_clearing_method() const;
  void _internal_set_bid_clearing_method(uint64_t value);
  public:

  // float bid_ytm = 22;
  void clear_bid_ytm();
  float bid_ytm() const;
  void set_bid_ytm(float value);
  private:
  float _internal_bid_ytm() const;
  void _internal_set_bid_ytm(float value);
  public:

  // float bid_strike_yeild = 23;
  void clear_bid_strike_yeild();
  float bid_strike_yeild() const;
  void set_bid_strike_yeild(float value);
  private:
  float _internal_bid_strike_yeild() const;
  void _internal_set_bid_strike_yeild(float value);
  public:

  // uint64 ask_legsettl_type = 24;
  void clear_ask_legsettl_type();
  uint64_t ask_legsettl_type() const;
  void set_ask_legsettl_type(uint64_t value);
  private:
  uint64_t _internal_ask_legsettl_type() const;
  void _internal_set_ask_legsettl_type(uint64_t value);
  public:

  // uint64 ask_delivery_type = 25;
  void clear_ask_delivery_type();
  uint64_t ask_delivery_type() const;
  void set_ask_delivery_type(uint64_t value);
  private:
  uint64_t _internal_ask_delivery_type() const;
  void _internal_set_ask_delivery_type(uint64_t value);
  public:

  // uint64 ask_clearing_method = 26;
  void clear_ask_clearing_method();
  uint64_t ask_clearing_method() const;
  void set_ask_clearing_method(uint64_t value);
  private:
  uint64_t _internal_ask_clearing_method() const;
  void _internal_set_ask_clearing_method(uint64_t value);
  public:

  // float ask_ytm = 27;
  void clear_ask_ytm();
  float ask_ytm() const;
  void set_ask_ytm(float value);
  private:
  float _internal_ask_ytm() const;
  void _internal_set_ask_ytm(float value);
  public:

  // float ask_strike_yeild = 28;
  void clear_ask_strike_yeild();
  float ask_strike_yeild() const;
  void set_ask_strike_yeild(float value);
  private:
  float _internal_ask_strike_yeild() const;
  void _internal_set_ask_strike_yeild(float value);
  public:

  // @@protoc_insertion_point(class_scope:ficc_message.ficc_Exch_BilateralOrder_Rtn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr acction_flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr valid_until_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seat_order_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_sys_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr insert_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr update_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secu_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fund_acct_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_id_;
  ::message_head::head* head_;
  uint64_t max_floor_;
  uint64_t bid_vol_;
  uint64_t bid_vol_traded_;
  uint64_t bid_vol_total_;
  uint64_t ask_vol_;
  uint64_t ask_vol_traded_;
  uint64_t ask_vol_total_;
  float bid_price_;
  float ask_price_;
  uint64_t bid_legsettl_type_;
  uint64_t bid_delivery_type_;
  uint64_t bid_clearing_method_;
  float bid_ytm_;
  float bid_strike_yeild_;
  uint64_t ask_legsettl_type_;
  uint64_t ask_delivery_type_;
  uint64_t ask_clearing_method_;
  float ask_ytm_;
  float ask_strike_yeild_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ficc_2eproto;
};
// -------------------------------------------------------------------

class ficc_Exch_Match_Rtn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ficc_message.ficc_Exch_Match_Rtn) */ {
 public:
  inline ficc_Exch_Match_Rtn() : ficc_Exch_Match_Rtn(nullptr) {}
  ~ficc_Exch_Match_Rtn() override;
  explicit PROTOBUF_CONSTEXPR ficc_Exch_Match_Rtn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ficc_Exch_Match_Rtn(const ficc_Exch_Match_Rtn& from);
  ficc_Exch_Match_Rtn(ficc_Exch_Match_Rtn&& from) noexcept
    : ficc_Exch_Match_Rtn() {
    *this = ::std::move(from);
  }

  inline ficc_Exch_Match_Rtn& operator=(const ficc_Exch_Match_Rtn& from) {
    CopyFrom(from);
    return *this;
  }
  inline ficc_Exch_Match_Rtn& operator=(ficc_Exch_Match_Rtn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ficc_Exch_Match_Rtn& default_instance() {
    return *internal_default_instance();
  }
  static inline const ficc_Exch_Match_Rtn* internal_default_instance() {
    return reinterpret_cast<const ficc_Exch_Match_Rtn*>(
               &_ficc_Exch_Match_Rtn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ficc_Exch_Match_Rtn& a, ficc_Exch_Match_Rtn& b) {
    a.Swap(&b);
  }
  inline void Swap(ficc_Exch_Match_Rtn* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ficc_Exch_Match_Rtn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ficc_Exch_Match_Rtn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ficc_Exch_Match_Rtn>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ficc_Exch_Match_Rtn& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ficc_Exch_Match_Rtn& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ficc_Exch_Match_Rtn* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ficc_message.ficc_Exch_Match_Rtn";
  }
  protected:
  explicit ficc_Exch_Match_Rtn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradeIdFieldNumber = 2,
    kTradeDateFieldNumber = 3,
    kTradeTimeFieldNumber = 4,
    kOrderSysIdFieldNumber = 5,
    kSeatOrderIdFieldNumber = 6,
    kSecuCodeFieldNumber = 7,
    kCounterPartyIdFieldNumber = 11,
    kCounterPartyTraderFieldNumber = 12,
    kInvestorIdFieldNumber = 13,
    kFundAcctFieldNumber = 14,
    kHeadFieldNumber = 1,
    kTradePriceFieldNumber = 8,
    kAccruedInterestAmtFieldNumber = 9,
    kVolTradedFieldNumber = 10,
    kSettleTypeFieldNumber = 15,
  };
  // string trade_id = 2;
  void clear_trade_id();
  const std::string& trade_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_id();
  PROTOBUF_NODISCARD std::string* release_trade_id();
  void set_allocated_trade_id(std::string* trade_id);
  private:
  const std::string& _internal_trade_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_id(const std::string& value);
  std::string* _internal_mutable_trade_id();
  public:

  // string trade_date = 3;
  void clear_trade_date();
  const std::string& trade_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_date();
  PROTOBUF_NODISCARD std::string* release_trade_date();
  void set_allocated_trade_date(std::string* trade_date);
  private:
  const std::string& _internal_trade_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_date(const std::string& value);
  std::string* _internal_mutable_trade_date();
  public:

  // string trade_time = 4;
  void clear_trade_time();
  const std::string& trade_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_time();
  PROTOBUF_NODISCARD std::string* release_trade_time();
  void set_allocated_trade_time(std::string* trade_time);
  private:
  const std::string& _internal_trade_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_time(const std::string& value);
  std::string* _internal_mutable_trade_time();
  public:

  // string order_sys_id = 5;
  void clear_order_sys_id();
  const std::string& order_sys_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_sys_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_sys_id();
  PROTOBUF_NODISCARD std::string* release_order_sys_id();
  void set_allocated_order_sys_id(std::string* order_sys_id);
  private:
  const std::string& _internal_order_sys_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_sys_id(const std::string& value);
  std::string* _internal_mutable_order_sys_id();
  public:

  // string seat_order_id = 6;
  void clear_seat_order_id();
  const std::string& seat_order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_seat_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_seat_order_id();
  PROTOBUF_NODISCARD std::string* release_seat_order_id();
  void set_allocated_seat_order_id(std::string* seat_order_id);
  private:
  const std::string& _internal_seat_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_seat_order_id(const std::string& value);
  std::string* _internal_mutable_seat_order_id();
  public:

  // string secu_code = 7;
  void clear_secu_code();
  const std::string& secu_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secu_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secu_code();
  PROTOBUF_NODISCARD std::string* release_secu_code();
  void set_allocated_secu_code(std::string* secu_code);
  private:
  const std::string& _internal_secu_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secu_code(const std::string& value);
  std::string* _internal_mutable_secu_code();
  public:

  // string counter_party_id = 11;
  void clear_counter_party_id();
  const std::string& counter_party_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_counter_party_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_counter_party_id();
  PROTOBUF_NODISCARD std::string* release_counter_party_id();
  void set_allocated_counter_party_id(std::string* counter_party_id);
  private:
  const std::string& _internal_counter_party_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_counter_party_id(const std::string& value);
  std::string* _internal_mutable_counter_party_id();
  public:

  // string counter_party_trader = 12;
  void clear_counter_party_trader();
  const std::string& counter_party_trader() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_counter_party_trader(ArgT0&& arg0, ArgT... args);
  std::string* mutable_counter_party_trader();
  PROTOBUF_NODISCARD std::string* release_counter_party_trader();
  void set_allocated_counter_party_trader(std::string* counter_party_trader);
  private:
  const std::string& _internal_counter_party_trader() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_counter_party_trader(const std::string& value);
  std::string* _internal_mutable_counter_party_trader();
  public:

  // string investor_id = 13;
  void clear_investor_id();
  const std::string& investor_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_investor_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_investor_id();
  PROTOBUF_NODISCARD std::string* release_investor_id();
  void set_allocated_investor_id(std::string* investor_id);
  private:
  const std::string& _internal_investor_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_investor_id(const std::string& value);
  std::string* _internal_mutable_investor_id();
  public:

  // string fund_acct = 14;
  void clear_fund_acct();
  const std::string& fund_acct() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fund_acct(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fund_acct();
  PROTOBUF_NODISCARD std::string* release_fund_acct();
  void set_allocated_fund_acct(std::string* fund_acct);
  private:
  const std::string& _internal_fund_acct() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fund_acct(const std::string& value);
  std::string* _internal_mutable_fund_acct();
  public:

  // .message_head.head head = 1;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  const ::message_head::head& head() const;
  PROTOBUF_NODISCARD ::message_head::head* release_head();
  ::message_head::head* mutable_head();
  void set_allocated_head(::message_head::head* head);
  private:
  const ::message_head::head& _internal_head() const;
  ::message_head::head* _internal_mutable_head();
  public:
  void unsafe_arena_set_allocated_head(
      ::message_head::head* head);
  ::message_head::head* unsafe_arena_release_head();

  // float trade_price = 8;
  void clear_trade_price();
  float trade_price() const;
  void set_trade_price(float value);
  private:
  float _internal_trade_price() const;
  void _internal_set_trade_price(float value);
  public:

  // float accrued_interest_amt = 9;
  void clear_accrued_interest_amt();
  float accrued_interest_amt() const;
  void set_accrued_interest_amt(float value);
  private:
  float _internal_accrued_interest_amt() const;
  void _internal_set_accrued_interest_amt(float value);
  public:

  // uint64 vol_traded = 10;
  void clear_vol_traded();
  uint64_t vol_traded() const;
  void set_vol_traded(uint64_t value);
  private:
  uint64_t _internal_vol_traded() const;
  void _internal_set_vol_traded(uint64_t value);
  public:

  // uint64 settle_type = 15;
  void clear_settle_type();
  uint64_t settle_type() const;
  void set_settle_type(uint64_t value);
  private:
  uint64_t _internal_settle_type() const;
  void _internal_set_settle_type(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ficc_message.ficc_Exch_Match_Rtn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_sys_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seat_order_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secu_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr counter_party_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr counter_party_trader_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr investor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fund_acct_;
  ::message_head::head* head_;
  float trade_price_;
  float accrued_interest_amt_;
  uint64_t vol_traded_;
  uint64_t settle_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ficc_2eproto;
};
// -------------------------------------------------------------------

class ficc_Exch_Order_Action final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ficc_message.ficc_Exch_Order_Action) */ {
 public:
  inline ficc_Exch_Order_Action() : ficc_Exch_Order_Action(nullptr) {}
  ~ficc_Exch_Order_Action() override;
  explicit PROTOBUF_CONSTEXPR ficc_Exch_Order_Action(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ficc_Exch_Order_Action(const ficc_Exch_Order_Action& from);
  ficc_Exch_Order_Action(ficc_Exch_Order_Action&& from) noexcept
    : ficc_Exch_Order_Action() {
    *this = ::std::move(from);
  }

  inline ficc_Exch_Order_Action& operator=(const ficc_Exch_Order_Action& from) {
    CopyFrom(from);
    return *this;
  }
  inline ficc_Exch_Order_Action& operator=(ficc_Exch_Order_Action&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ficc_Exch_Order_Action& default_instance() {
    return *internal_default_instance();
  }
  static inline const ficc_Exch_Order_Action* internal_default_instance() {
    return reinterpret_cast<const ficc_Exch_Order_Action*>(
               &_ficc_Exch_Order_Action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ficc_Exch_Order_Action& a, ficc_Exch_Order_Action& b) {
    a.Swap(&b);
  }
  inline void Swap(ficc_Exch_Order_Action* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ficc_Exch_Order_Action* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ficc_Exch_Order_Action* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ficc_Exch_Order_Action>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ficc_Exch_Order_Action& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ficc_Exch_Order_Action& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ficc_Exch_Order_Action* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ficc_message.ficc_Exch_Order_Action";
  }
  protected:
  explicit ficc_Exch_Order_Action(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderInnerIdFieldNumber = 2,
    kInvestorIdFieldNumber = 3,
    kAcctionFlagFieldNumber = 5,
    kBrokerIdFieldNumber = 8,
    kExCodeFieldNumber = 9,
    kOrderSysIdFieldNumber = 10,
    kTradeAcctFieldNumber = 12,
    kSecuCodeFieldNumber = 13,
    kCommodityTypeFieldNumber = 14,
    kValidUntilTimeFieldNumber = 17,
    kInsertTimeFieldNumber = 18,
    kClientRefIdFieldNumber = 19,
    kDirectionFieldNumber = 21,
    kQuoteReqIdFieldNumber = 22,
    kAcctionStatusFieldNumber = 25,
    kStatusMsgFieldNumber = 26,
    kAcctionDateFieldNumber = 27,
    kAcctionTimeFieldNumber = 28,
    kTradeIdFieldNumber = 29,
    kHeadFieldNumber = 1,
    kUserIdFieldNumber = 4,
    kPriceFieldNumber = 6,
    kVolFieldNumber = 7,
    kStrategyCodeFieldNumber = 11,
    kMatchTypeFieldNumber = 15,
    kQuoteTypeFieldNumber = 16,
    kMarketIndicatorFieldNumber = 20,
    kYtmFieldNumber = 23,
    kStrikeYeildFieldNumber = 24,
  };
  // string order_inner_id = 2;
  void clear_order_inner_id();
  const std::string& order_inner_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_inner_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_inner_id();
  PROTOBUF_NODISCARD std::string* release_order_inner_id();
  void set_allocated_order_inner_id(std::string* order_inner_id);
  private:
  const std::string& _internal_order_inner_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_inner_id(const std::string& value);
  std::string* _internal_mutable_order_inner_id();
  public:

  // string investor_id = 3;
  void clear_investor_id();
  const std::string& investor_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_investor_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_investor_id();
  PROTOBUF_NODISCARD std::string* release_investor_id();
  void set_allocated_investor_id(std::string* investor_id);
  private:
  const std::string& _internal_investor_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_investor_id(const std::string& value);
  std::string* _internal_mutable_investor_id();
  public:

  // string acction_flag = 5;
  void clear_acction_flag();
  const std::string& acction_flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_acction_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_acction_flag();
  PROTOBUF_NODISCARD std::string* release_acction_flag();
  void set_allocated_acction_flag(std::string* acction_flag);
  private:
  const std::string& _internal_acction_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_acction_flag(const std::string& value);
  std::string* _internal_mutable_acction_flag();
  public:

  // string broker_id = 8;
  void clear_broker_id();
  const std::string& broker_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_broker_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_broker_id();
  PROTOBUF_NODISCARD std::string* release_broker_id();
  void set_allocated_broker_id(std::string* broker_id);
  private:
  const std::string& _internal_broker_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_broker_id(const std::string& value);
  std::string* _internal_mutable_broker_id();
  public:

  // string ex_code = 9;
  void clear_ex_code();
  const std::string& ex_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ex_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ex_code();
  PROTOBUF_NODISCARD std::string* release_ex_code();
  void set_allocated_ex_code(std::string* ex_code);
  private:
  const std::string& _internal_ex_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ex_code(const std::string& value);
  std::string* _internal_mutable_ex_code();
  public:

  // string order_sys_id = 10;
  void clear_order_sys_id();
  const std::string& order_sys_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_sys_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_sys_id();
  PROTOBUF_NODISCARD std::string* release_order_sys_id();
  void set_allocated_order_sys_id(std::string* order_sys_id);
  private:
  const std::string& _internal_order_sys_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_sys_id(const std::string& value);
  std::string* _internal_mutable_order_sys_id();
  public:

  // string trade_acct = 12;
  void clear_trade_acct();
  const std::string& trade_acct() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_acct(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_acct();
  PROTOBUF_NODISCARD std::string* release_trade_acct();
  void set_allocated_trade_acct(std::string* trade_acct);
  private:
  const std::string& _internal_trade_acct() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_acct(const std::string& value);
  std::string* _internal_mutable_trade_acct();
  public:

  // string secu_code = 13;
  void clear_secu_code();
  const std::string& secu_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secu_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secu_code();
  PROTOBUF_NODISCARD std::string* release_secu_code();
  void set_allocated_secu_code(std::string* secu_code);
  private:
  const std::string& _internal_secu_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secu_code(const std::string& value);
  std::string* _internal_mutable_secu_code();
  public:

  // string commodity_type = 14;
  void clear_commodity_type();
  const std::string& commodity_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_commodity_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_commodity_type();
  PROTOBUF_NODISCARD std::string* release_commodity_type();
  void set_allocated_commodity_type(std::string* commodity_type);
  private:
  const std::string& _internal_commodity_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_commodity_type(const std::string& value);
  std::string* _internal_mutable_commodity_type();
  public:

  // string valid_until_time = 17;
  void clear_valid_until_time();
  const std::string& valid_until_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_valid_until_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_valid_until_time();
  PROTOBUF_NODISCARD std::string* release_valid_until_time();
  void set_allocated_valid_until_time(std::string* valid_until_time);
  private:
  const std::string& _internal_valid_until_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_valid_until_time(const std::string& value);
  std::string* _internal_mutable_valid_until_time();
  public:

  // string insert_time = 18;
  void clear_insert_time();
  const std::string& insert_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_insert_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_insert_time();
  PROTOBUF_NODISCARD std::string* release_insert_time();
  void set_allocated_insert_time(std::string* insert_time);
  private:
  const std::string& _internal_insert_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_insert_time(const std::string& value);
  std::string* _internal_mutable_insert_time();
  public:

  // string client_ref_id = 19;
  void clear_client_ref_id();
  const std::string& client_ref_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_ref_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_ref_id();
  PROTOBUF_NODISCARD std::string* release_client_ref_id();
  void set_allocated_client_ref_id(std::string* client_ref_id);
  private:
  const std::string& _internal_client_ref_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_ref_id(const std::string& value);
  std::string* _internal_mutable_client_ref_id();
  public:

  // string direction = 21;
  void clear_direction();
  const std::string& direction() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_direction(ArgT0&& arg0, ArgT... args);
  std::string* mutable_direction();
  PROTOBUF_NODISCARD std::string* release_direction();
  void set_allocated_direction(std::string* direction);
  private:
  const std::string& _internal_direction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_direction(const std::string& value);
  std::string* _internal_mutable_direction();
  public:

  // string quote_req_id = 22;
  void clear_quote_req_id();
  const std::string& quote_req_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_quote_req_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_quote_req_id();
  PROTOBUF_NODISCARD std::string* release_quote_req_id();
  void set_allocated_quote_req_id(std::string* quote_req_id);
  private:
  const std::string& _internal_quote_req_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quote_req_id(const std::string& value);
  std::string* _internal_mutable_quote_req_id();
  public:

  // string acction_status = 25;
  void clear_acction_status();
  const std::string& acction_status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_acction_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_acction_status();
  PROTOBUF_NODISCARD std::string* release_acction_status();
  void set_allocated_acction_status(std::string* acction_status);
  private:
  const std::string& _internal_acction_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_acction_status(const std::string& value);
  std::string* _internal_mutable_acction_status();
  public:

  // string status_msg = 26;
  void clear_status_msg();
  const std::string& status_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status_msg();
  PROTOBUF_NODISCARD std::string* release_status_msg();
  void set_allocated_status_msg(std::string* status_msg);
  private:
  const std::string& _internal_status_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status_msg(const std::string& value);
  std::string* _internal_mutable_status_msg();
  public:

  // string acction_date = 27;
  void clear_acction_date();
  const std::string& acction_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_acction_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_acction_date();
  PROTOBUF_NODISCARD std::string* release_acction_date();
  void set_allocated_acction_date(std::string* acction_date);
  private:
  const std::string& _internal_acction_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_acction_date(const std::string& value);
  std::string* _internal_mutable_acction_date();
  public:

  // string acction_time = 28;
  void clear_acction_time();
  const std::string& acction_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_acction_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_acction_time();
  PROTOBUF_NODISCARD std::string* release_acction_time();
  void set_allocated_acction_time(std::string* acction_time);
  private:
  const std::string& _internal_acction_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_acction_time(const std::string& value);
  std::string* _internal_mutable_acction_time();
  public:

  // string trade_id = 29;
  void clear_trade_id();
  const std::string& trade_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_id();
  PROTOBUF_NODISCARD std::string* release_trade_id();
  void set_allocated_trade_id(std::string* trade_id);
  private:
  const std::string& _internal_trade_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_id(const std::string& value);
  std::string* _internal_mutable_trade_id();
  public:

  // .message_head.head head = 1;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  const ::message_head::head& head() const;
  PROTOBUF_NODISCARD ::message_head::head* release_head();
  ::message_head::head* mutable_head();
  void set_allocated_head(::message_head::head* head);
  private:
  const ::message_head::head& _internal_head() const;
  ::message_head::head* _internal_mutable_head();
  public:
  void unsafe_arena_set_allocated_head(
      ::message_head::head* head);
  ::message_head::head* unsafe_arena_release_head();

  // uint32 user_id = 4;
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // float price = 6;
  void clear_price();
  float price() const;
  void set_price(float value);
  private:
  float _internal_price() const;
  void _internal_set_price(float value);
  public:

  // uint64 vol = 7;
  void clear_vol();
  uint64_t vol() const;
  void set_vol(uint64_t value);
  private:
  uint64_t _internal_vol() const;
  void _internal_set_vol(uint64_t value);
  public:

  // uint64 strategy_code = 11;
  void clear_strategy_code();
  uint64_t strategy_code() const;
  void set_strategy_code(uint64_t value);
  private:
  uint64_t _internal_strategy_code() const;
  void _internal_set_strategy_code(uint64_t value);
  public:

  // uint64 match_type = 15;
  void clear_match_type();
  uint64_t match_type() const;
  void set_match_type(uint64_t value);
  private:
  uint64_t _internal_match_type() const;
  void _internal_set_match_type(uint64_t value);
  public:

  // uint64 quote_type = 16;
  void clear_quote_type();
  uint64_t quote_type() const;
  void set_quote_type(uint64_t value);
  private:
  uint64_t _internal_quote_type() const;
  void _internal_set_quote_type(uint64_t value);
  public:

  // uint64 market_indicator = 20;
  void clear_market_indicator();
  uint64_t market_indicator() const;
  void set_market_indicator(uint64_t value);
  private:
  uint64_t _internal_market_indicator() const;
  void _internal_set_market_indicator(uint64_t value);
  public:

  // float ytm = 23;
  void clear_ytm();
  float ytm() const;
  void set_ytm(float value);
  private:
  float _internal_ytm() const;
  void _internal_set_ytm(float value);
  public:

  // float strike_yeild = 24;
  void clear_strike_yeild();
  float strike_yeild() const;
  void set_strike_yeild(float value);
  private:
  float _internal_strike_yeild() const;
  void _internal_set_strike_yeild(float value);
  public:

  // @@protoc_insertion_point(class_scope:ficc_message.ficc_Exch_Order_Action)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_inner_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr investor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr acction_flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broker_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ex_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_sys_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_acct_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secu_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commodity_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr valid_until_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr insert_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_ref_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr direction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quote_req_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr acction_status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr acction_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr acction_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_id_;
  ::message_head::head* head_;
  uint32_t user_id_;
  float price_;
  uint64_t vol_;
  uint64_t strategy_code_;
  uint64_t match_type_;
  uint64_t quote_type_;
  uint64_t market_indicator_;
  float ytm_;
  float strike_yeild_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ficc_2eproto;
};
// -------------------------------------------------------------------

class ficc_Exch_Order_Req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ficc_message.ficc_Exch_Order_Req) */ {
 public:
  inline ficc_Exch_Order_Req() : ficc_Exch_Order_Req(nullptr) {}
  ~ficc_Exch_Order_Req() override;
  explicit PROTOBUF_CONSTEXPR ficc_Exch_Order_Req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ficc_Exch_Order_Req(const ficc_Exch_Order_Req& from);
  ficc_Exch_Order_Req(ficc_Exch_Order_Req&& from) noexcept
    : ficc_Exch_Order_Req() {
    *this = ::std::move(from);
  }

  inline ficc_Exch_Order_Req& operator=(const ficc_Exch_Order_Req& from) {
    CopyFrom(from);
    return *this;
  }
  inline ficc_Exch_Order_Req& operator=(ficc_Exch_Order_Req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ficc_Exch_Order_Req& default_instance() {
    return *internal_default_instance();
  }
  static inline const ficc_Exch_Order_Req* internal_default_instance() {
    return reinterpret_cast<const ficc_Exch_Order_Req*>(
               &_ficc_Exch_Order_Req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ficc_Exch_Order_Req& a, ficc_Exch_Order_Req& b) {
    a.Swap(&b);
  }
  inline void Swap(ficc_Exch_Order_Req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ficc_Exch_Order_Req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ficc_Exch_Order_Req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ficc_Exch_Order_Req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ficc_Exch_Order_Req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ficc_Exch_Order_Req& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ficc_Exch_Order_Req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ficc_message.ficc_Exch_Order_Req";
  }
  protected:
  explicit ficc_Exch_Order_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradeAcctFieldNumber = 2,
    kFundAcctFieldNumber = 3,
    kCombinoFieldNumber = 4,
    kTradingDayFieldNumber = 5,
    kExCodeFieldNumber = 6,
    kSecuCodeFieldNumber = 7,
    kSecuNameFieldNumber = 8,
    kOrderPriceTypeFieldNumber = 9,
    kDirectionFieldNumber = 10,
    kOffsetFlagFieldNumber = 11,
    kHedgeFlagFieldNumber = 12,
    kTimeCondFieldNumber = 15,
    kSeatOrderIdFieldNumber = 18,
    kPurchaseWayFieldNumber = 19,
    kTextFieldNumber = 20,
    kQuoteIdFieldNumber = 30,
    kValidUntilTimeFieldNumber = 31,
    kMdentryTimeFieldNumber = 32,
    kClientRefIdFieldNumber = 33,
    kOrderInnerIdFieldNumber = 38,
    kOrderSysIdFieldNumber = 39,
    kInsertTimeFieldNumber = 40,
    kOrderSourceFieldNumber = 41,
    kReserver1FieldNumber = 42,
    kReserver2FieldNumber = 43,
    kReserver3FieldNumber = 44,
    kReserver4FieldNumber = 45,
    kMaturityFieldNumber = 46,
    kHeadFieldNumber = 1,
    kVolFieldNumber = 14,
    kPriceFieldNumber = 13,
    kUserIdFieldNumber = 17,
    kStrategyCodeFieldNumber = 16,
    kYtmFieldNumber = 21,
    kStrikeYeildFieldNumber = 22,
    kQuoteTypeFieldNumber = 23,
    kMaxFloorFieldNumber = 24,
    kMinTickSizeFieldNumber = 25,
    kSettleTypeFieldNumber = 26,
    kMatchTypeFieldNumber = 27,
    kDeliveryTypeFieldNumber = 28,
    kClearingMethodFieldNumber = 29,
    kRoutingTypeFieldNumber = 34,
    kMarketIndicatorFieldNumber = 35,
    kRealtimeUndertakeFlagFieldNumber = 36,
    kSubjectPartyTypeFieldNumber = 37,
  };
  // string trade_acct = 2;
  void clear_trade_acct();
  const std::string& trade_acct() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_acct(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_acct();
  PROTOBUF_NODISCARD std::string* release_trade_acct();
  void set_allocated_trade_acct(std::string* trade_acct);
  private:
  const std::string& _internal_trade_acct() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_acct(const std::string& value);
  std::string* _internal_mutable_trade_acct();
  public:

  // string fund_acct = 3;
  void clear_fund_acct();
  const std::string& fund_acct() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fund_acct(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fund_acct();
  PROTOBUF_NODISCARD std::string* release_fund_acct();
  void set_allocated_fund_acct(std::string* fund_acct);
  private:
  const std::string& _internal_fund_acct() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fund_acct(const std::string& value);
  std::string* _internal_mutable_fund_acct();
  public:

  // string combino = 4;
  void clear_combino();
  const std::string& combino() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_combino(ArgT0&& arg0, ArgT... args);
  std::string* mutable_combino();
  PROTOBUF_NODISCARD std::string* release_combino();
  void set_allocated_combino(std::string* combino);
  private:
  const std::string& _internal_combino() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_combino(const std::string& value);
  std::string* _internal_mutable_combino();
  public:

  // string trading_day = 5;
  void clear_trading_day();
  const std::string& trading_day() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trading_day(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trading_day();
  PROTOBUF_NODISCARD std::string* release_trading_day();
  void set_allocated_trading_day(std::string* trading_day);
  private:
  const std::string& _internal_trading_day() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trading_day(const std::string& value);
  std::string* _internal_mutable_trading_day();
  public:

  // string ex_code = 6;
  void clear_ex_code();
  const std::string& ex_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ex_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ex_code();
  PROTOBUF_NODISCARD std::string* release_ex_code();
  void set_allocated_ex_code(std::string* ex_code);
  private:
  const std::string& _internal_ex_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ex_code(const std::string& value);
  std::string* _internal_mutable_ex_code();
  public:

  // string secu_code = 7;
  void clear_secu_code();
  const std::string& secu_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secu_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secu_code();
  PROTOBUF_NODISCARD std::string* release_secu_code();
  void set_allocated_secu_code(std::string* secu_code);
  private:
  const std::string& _internal_secu_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secu_code(const std::string& value);
  std::string* _internal_mutable_secu_code();
  public:

  // string secu_name = 8;
  void clear_secu_name();
  const std::string& secu_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secu_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secu_name();
  PROTOBUF_NODISCARD std::string* release_secu_name();
  void set_allocated_secu_name(std::string* secu_name);
  private:
  const std::string& _internal_secu_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secu_name(const std::string& value);
  std::string* _internal_mutable_secu_name();
  public:

  // string order_price_type = 9;
  void clear_order_price_type();
  const std::string& order_price_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_price_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_price_type();
  PROTOBUF_NODISCARD std::string* release_order_price_type();
  void set_allocated_order_price_type(std::string* order_price_type);
  private:
  const std::string& _internal_order_price_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_price_type(const std::string& value);
  std::string* _internal_mutable_order_price_type();
  public:

  // string direction = 10;
  void clear_direction();
  const std::string& direction() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_direction(ArgT0&& arg0, ArgT... args);
  std::string* mutable_direction();
  PROTOBUF_NODISCARD std::string* release_direction();
  void set_allocated_direction(std::string* direction);
  private:
  const std::string& _internal_direction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_direction(const std::string& value);
  std::string* _internal_mutable_direction();
  public:

  // string offset_flag = 11;
  void clear_offset_flag();
  const std::string& offset_flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_offset_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_offset_flag();
  PROTOBUF_NODISCARD std::string* release_offset_flag();
  void set_allocated_offset_flag(std::string* offset_flag);
  private:
  const std::string& _internal_offset_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_offset_flag(const std::string& value);
  std::string* _internal_mutable_offset_flag();
  public:

  // string hedge_flag = 12;
  void clear_hedge_flag();
  const std::string& hedge_flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hedge_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hedge_flag();
  PROTOBUF_NODISCARD std::string* release_hedge_flag();
  void set_allocated_hedge_flag(std::string* hedge_flag);
  private:
  const std::string& _internal_hedge_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hedge_flag(const std::string& value);
  std::string* _internal_mutable_hedge_flag();
  public:

  // string time_cond = 15;
  void clear_time_cond();
  const std::string& time_cond() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_time_cond(ArgT0&& arg0, ArgT... args);
  std::string* mutable_time_cond();
  PROTOBUF_NODISCARD std::string* release_time_cond();
  void set_allocated_time_cond(std::string* time_cond);
  private:
  const std::string& _internal_time_cond() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time_cond(const std::string& value);
  std::string* _internal_mutable_time_cond();
  public:

  // string seat_order_id = 18;
  void clear_seat_order_id();
  const std::string& seat_order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_seat_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_seat_order_id();
  PROTOBUF_NODISCARD std::string* release_seat_order_id();
  void set_allocated_seat_order_id(std::string* seat_order_id);
  private:
  const std::string& _internal_seat_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_seat_order_id(const std::string& value);
  std::string* _internal_mutable_seat_order_id();
  public:

  // string purchase_way = 19;
  void clear_purchase_way();
  const std::string& purchase_way() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_purchase_way(ArgT0&& arg0, ArgT... args);
  std::string* mutable_purchase_way();
  PROTOBUF_NODISCARD std::string* release_purchase_way();
  void set_allocated_purchase_way(std::string* purchase_way);
  private:
  const std::string& _internal_purchase_way() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_purchase_way(const std::string& value);
  std::string* _internal_mutable_purchase_way();
  public:

  // string text = 20;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string quote_id = 30;
  void clear_quote_id();
  const std::string& quote_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_quote_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_quote_id();
  PROTOBUF_NODISCARD std::string* release_quote_id();
  void set_allocated_quote_id(std::string* quote_id);
  private:
  const std::string& _internal_quote_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quote_id(const std::string& value);
  std::string* _internal_mutable_quote_id();
  public:

  // string valid_until_time = 31;
  void clear_valid_until_time();
  const std::string& valid_until_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_valid_until_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_valid_until_time();
  PROTOBUF_NODISCARD std::string* release_valid_until_time();
  void set_allocated_valid_until_time(std::string* valid_until_time);
  private:
  const std::string& _internal_valid_until_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_valid_until_time(const std::string& value);
  std::string* _internal_mutable_valid_until_time();
  public:

  // string mdentry_time = 32;
  void clear_mdentry_time();
  const std::string& mdentry_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mdentry_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mdentry_time();
  PROTOBUF_NODISCARD std::string* release_mdentry_time();
  void set_allocated_mdentry_time(std::string* mdentry_time);
  private:
  const std::string& _internal_mdentry_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mdentry_time(const std::string& value);
  std::string* _internal_mutable_mdentry_time();
  public:

  // string client_ref_id = 33;
  void clear_client_ref_id();
  const std::string& client_ref_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_ref_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_ref_id();
  PROTOBUF_NODISCARD std::string* release_client_ref_id();
  void set_allocated_client_ref_id(std::string* client_ref_id);
  private:
  const std::string& _internal_client_ref_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_ref_id(const std::string& value);
  std::string* _internal_mutable_client_ref_id();
  public:

  // string order_inner_id = 38;
  void clear_order_inner_id();
  const std::string& order_inner_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_inner_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_inner_id();
  PROTOBUF_NODISCARD std::string* release_order_inner_id();
  void set_allocated_order_inner_id(std::string* order_inner_id);
  private:
  const std::string& _internal_order_inner_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_inner_id(const std::string& value);
  std::string* _internal_mutable_order_inner_id();
  public:

  // string order_sys_id = 39;
  void clear_order_sys_id();
  const std::string& order_sys_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_sys_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_sys_id();
  PROTOBUF_NODISCARD std::string* release_order_sys_id();
  void set_allocated_order_sys_id(std::string* order_sys_id);
  private:
  const std::string& _internal_order_sys_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_sys_id(const std::string& value);
  std::string* _internal_mutable_order_sys_id();
  public:

  // string insert_time = 40;
  void clear_insert_time();
  const std::string& insert_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_insert_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_insert_time();
  PROTOBUF_NODISCARD std::string* release_insert_time();
  void set_allocated_insert_time(std::string* insert_time);
  private:
  const std::string& _internal_insert_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_insert_time(const std::string& value);
  std::string* _internal_mutable_insert_time();
  public:

  // string order_source = 41;
  void clear_order_source();
  const std::string& order_source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_source();
  PROTOBUF_NODISCARD std::string* release_order_source();
  void set_allocated_order_source(std::string* order_source);
  private:
  const std::string& _internal_order_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_source(const std::string& value);
  std::string* _internal_mutable_order_source();
  public:

  // string reserver1 = 42;
  void clear_reserver1();
  const std::string& reserver1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserver1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserver1();
  PROTOBUF_NODISCARD std::string* release_reserver1();
  void set_allocated_reserver1(std::string* reserver1);
  private:
  const std::string& _internal_reserver1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserver1(const std::string& value);
  std::string* _internal_mutable_reserver1();
  public:

  // string reserver2 = 43;
  void clear_reserver2();
  const std::string& reserver2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserver2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserver2();
  PROTOBUF_NODISCARD std::string* release_reserver2();
  void set_allocated_reserver2(std::string* reserver2);
  private:
  const std::string& _internal_reserver2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserver2(const std::string& value);
  std::string* _internal_mutable_reserver2();
  public:

  // string reserver3 = 44;
  void clear_reserver3();
  const std::string& reserver3() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserver3(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserver3();
  PROTOBUF_NODISCARD std::string* release_reserver3();
  void set_allocated_reserver3(std::string* reserver3);
  private:
  const std::string& _internal_reserver3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserver3(const std::string& value);
  std::string* _internal_mutable_reserver3();
  public:

  // string reserver4 = 45;
  void clear_reserver4();
  const std::string& reserver4() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserver4(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserver4();
  PROTOBUF_NODISCARD std::string* release_reserver4();
  void set_allocated_reserver4(std::string* reserver4);
  private:
  const std::string& _internal_reserver4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserver4(const std::string& value);
  std::string* _internal_mutable_reserver4();
  public:

  // string maturity = 46;
  void clear_maturity();
  const std::string& maturity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_maturity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_maturity();
  PROTOBUF_NODISCARD std::string* release_maturity();
  void set_allocated_maturity(std::string* maturity);
  private:
  const std::string& _internal_maturity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_maturity(const std::string& value);
  std::string* _internal_mutable_maturity();
  public:

  // .message_head.head head = 1;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  const ::message_head::head& head() const;
  PROTOBUF_NODISCARD ::message_head::head* release_head();
  ::message_head::head* mutable_head();
  void set_allocated_head(::message_head::head* head);
  private:
  const ::message_head::head& _internal_head() const;
  ::message_head::head* _internal_mutable_head();
  public:
  void unsafe_arena_set_allocated_head(
      ::message_head::head* head);
  ::message_head::head* unsafe_arena_release_head();

  // uint64 vol = 14;
  void clear_vol();
  uint64_t vol() const;
  void set_vol(uint64_t value);
  private:
  uint64_t _internal_vol() const;
  void _internal_set_vol(uint64_t value);
  public:

  // float price = 13;
  void clear_price();
  float price() const;
  void set_price(float value);
  private:
  float _internal_price() const;
  void _internal_set_price(float value);
  public:

  // uint32 user_id = 17;
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // uint64 strategy_code = 16;
  void clear_strategy_code();
  uint64_t strategy_code() const;
  void set_strategy_code(uint64_t value);
  private:
  uint64_t _internal_strategy_code() const;
  void _internal_set_strategy_code(uint64_t value);
  public:

  // float ytm = 21;
  void clear_ytm();
  float ytm() const;
  void set_ytm(float value);
  private:
  float _internal_ytm() const;
  void _internal_set_ytm(float value);
  public:

  // float strike_yeild = 22;
  void clear_strike_yeild();
  float strike_yeild() const;
  void set_strike_yeild(float value);
  private:
  float _internal_strike_yeild() const;
  void _internal_set_strike_yeild(float value);
  public:

  // uint64 quote_type = 23;
  void clear_quote_type();
  uint64_t quote_type() const;
  void set_quote_type(uint64_t value);
  private:
  uint64_t _internal_quote_type() const;
  void _internal_set_quote_type(uint64_t value);
  public:

  // uint64 max_floor = 24;
  void clear_max_floor();
  uint64_t max_floor() const;
  void set_max_floor(uint64_t value);
  private:
  uint64_t _internal_max_floor() const;
  void _internal_set_max_floor(uint64_t value);
  public:

  // uint64 min_tick_size = 25;
  void clear_min_tick_size();
  uint64_t min_tick_size() const;
  void set_min_tick_size(uint64_t value);
  private:
  uint64_t _internal_min_tick_size() const;
  void _internal_set_min_tick_size(uint64_t value);
  public:

  // uint64 settle_type = 26;
  void clear_settle_type();
  uint64_t settle_type() const;
  void set_settle_type(uint64_t value);
  private:
  uint64_t _internal_settle_type() const;
  void _internal_set_settle_type(uint64_t value);
  public:

  // uint64 match_type = 27;
  void clear_match_type();
  uint64_t match_type() const;
  void set_match_type(uint64_t value);
  private:
  uint64_t _internal_match_type() const;
  void _internal_set_match_type(uint64_t value);
  public:

  // uint64 delivery_type = 28;
  void clear_delivery_type();
  uint64_t delivery_type() const;
  void set_delivery_type(uint64_t value);
  private:
  uint64_t _internal_delivery_type() const;
  void _internal_set_delivery_type(uint64_t value);
  public:

  // uint64 clearing_method = 29;
  void clear_clearing_method();
  uint64_t clearing_method() const;
  void set_clearing_method(uint64_t value);
  private:
  uint64_t _internal_clearing_method() const;
  void _internal_set_clearing_method(uint64_t value);
  public:

  // uint64 routing_type = 34;
  void clear_routing_type();
  uint64_t routing_type() const;
  void set_routing_type(uint64_t value);
  private:
  uint64_t _internal_routing_type() const;
  void _internal_set_routing_type(uint64_t value);
  public:

  // uint64 market_indicator = 35;
  void clear_market_indicator();
  uint64_t market_indicator() const;
  void set_market_indicator(uint64_t value);
  private:
  uint64_t _internal_market_indicator() const;
  void _internal_set_market_indicator(uint64_t value);
  public:

  // uint64 realtime_undertake_flag = 36;
  void clear_realtime_undertake_flag();
  uint64_t realtime_undertake_flag() const;
  void set_realtime_undertake_flag(uint64_t value);
  private:
  uint64_t _internal_realtime_undertake_flag() const;
  void _internal_set_realtime_undertake_flag(uint64_t value);
  public:

  // uint64 subject_party_type = 37;
  void clear_subject_party_type();
  uint64_t subject_party_type() const;
  void set_subject_party_type(uint64_t value);
  private:
  uint64_t _internal_subject_party_type() const;
  void _internal_set_subject_party_type(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ficc_message.ficc_Exch_Order_Req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_acct_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fund_acct_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr combino_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trading_day_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ex_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secu_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secu_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_price_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr direction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr offset_flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hedge_flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_cond_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seat_order_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr purchase_way_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quote_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr valid_until_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mdentry_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_ref_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_inner_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_sys_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr insert_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserver1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserver2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserver3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserver4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maturity_;
  ::message_head::head* head_;
  uint64_t vol_;
  float price_;
  uint32_t user_id_;
  uint64_t strategy_code_;
  float ytm_;
  float strike_yeild_;
  uint64_t quote_type_;
  uint64_t max_floor_;
  uint64_t min_tick_size_;
  uint64_t settle_type_;
  uint64_t match_type_;
  uint64_t delivery_type_;
  uint64_t clearing_method_;
  uint64_t routing_type_;
  uint64_t market_indicator_;
  uint64_t realtime_undertake_flag_;
  uint64_t subject_party_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ficc_2eproto;
};
// -------------------------------------------------------------------

class ficc_Exch_Order_Rtn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ficc_message.ficc_Exch_Order_Rtn) */ {
 public:
  inline ficc_Exch_Order_Rtn() : ficc_Exch_Order_Rtn(nullptr) {}
  ~ficc_Exch_Order_Rtn() override;
  explicit PROTOBUF_CONSTEXPR ficc_Exch_Order_Rtn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ficc_Exch_Order_Rtn(const ficc_Exch_Order_Rtn& from);
  ficc_Exch_Order_Rtn(ficc_Exch_Order_Rtn&& from) noexcept
    : ficc_Exch_Order_Rtn() {
    *this = ::std::move(from);
  }

  inline ficc_Exch_Order_Rtn& operator=(const ficc_Exch_Order_Rtn& from) {
    CopyFrom(from);
    return *this;
  }
  inline ficc_Exch_Order_Rtn& operator=(ficc_Exch_Order_Rtn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ficc_Exch_Order_Rtn& default_instance() {
    return *internal_default_instance();
  }
  static inline const ficc_Exch_Order_Rtn* internal_default_instance() {
    return reinterpret_cast<const ficc_Exch_Order_Rtn*>(
               &_ficc_Exch_Order_Rtn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ficc_Exch_Order_Rtn& a, ficc_Exch_Order_Rtn& b) {
    a.Swap(&b);
  }
  inline void Swap(ficc_Exch_Order_Rtn* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ficc_Exch_Order_Rtn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ficc_Exch_Order_Rtn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ficc_Exch_Order_Rtn>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ficc_Exch_Order_Rtn& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ficc_Exch_Order_Rtn& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ficc_Exch_Order_Rtn* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ficc_message.ficc_Exch_Order_Rtn";
  }
  protected:
  explicit ficc_Exch_Order_Rtn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderStatusFieldNumber = 2,
    kSeatOrderIdFieldNumber = 3,
    kOrderSysIdFieldNumber = 4,
    kInsertDateFieldNumber = 5,
    kUpdateTimeFieldNumber = 6,
    kSecuCodeFieldNumber = 7,
    kFundAcctFieldNumber = 18,
    kTradeIdFieldNumber = 19,
    kHeadFieldNumber = 1,
    kMaxFloorFieldNumber = 8,
    kVolFieldNumber = 9,
    kVolTradedFieldNumber = 10,
    kVolTotalFieldNumber = 11,
    kLegsettlTypeFieldNumber = 13,
    kDeliveryTypeFieldNumber = 14,
    kPriceFieldNumber = 12,
    kYtmFieldNumber = 16,
    kClearingMethodFieldNumber = 15,
    kStrikeYeildFieldNumber = 17,
  };
  // string order_status = 2;
  void clear_order_status();
  const std::string& order_status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_status();
  PROTOBUF_NODISCARD std::string* release_order_status();
  void set_allocated_order_status(std::string* order_status);
  private:
  const std::string& _internal_order_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_status(const std::string& value);
  std::string* _internal_mutable_order_status();
  public:

  // string seat_order_id = 3;
  void clear_seat_order_id();
  const std::string& seat_order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_seat_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_seat_order_id();
  PROTOBUF_NODISCARD std::string* release_seat_order_id();
  void set_allocated_seat_order_id(std::string* seat_order_id);
  private:
  const std::string& _internal_seat_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_seat_order_id(const std::string& value);
  std::string* _internal_mutable_seat_order_id();
  public:

  // string order_sys_id = 4;
  void clear_order_sys_id();
  const std::string& order_sys_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_sys_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_sys_id();
  PROTOBUF_NODISCARD std::string* release_order_sys_id();
  void set_allocated_order_sys_id(std::string* order_sys_id);
  private:
  const std::string& _internal_order_sys_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_sys_id(const std::string& value);
  std::string* _internal_mutable_order_sys_id();
  public:

  // string insert_date = 5;
  void clear_insert_date();
  const std::string& insert_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_insert_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_insert_date();
  PROTOBUF_NODISCARD std::string* release_insert_date();
  void set_allocated_insert_date(std::string* insert_date);
  private:
  const std::string& _internal_insert_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_insert_date(const std::string& value);
  std::string* _internal_mutable_insert_date();
  public:

  // string update_time = 6;
  void clear_update_time();
  const std::string& update_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_update_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_update_time();
  PROTOBUF_NODISCARD std::string* release_update_time();
  void set_allocated_update_time(std::string* update_time);
  private:
  const std::string& _internal_update_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_update_time(const std::string& value);
  std::string* _internal_mutable_update_time();
  public:

  // string secu_code = 7;
  void clear_secu_code();
  const std::string& secu_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secu_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secu_code();
  PROTOBUF_NODISCARD std::string* release_secu_code();
  void set_allocated_secu_code(std::string* secu_code);
  private:
  const std::string& _internal_secu_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secu_code(const std::string& value);
  std::string* _internal_mutable_secu_code();
  public:

  // string fund_acct = 18;
  void clear_fund_acct();
  const std::string& fund_acct() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fund_acct(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fund_acct();
  PROTOBUF_NODISCARD std::string* release_fund_acct();
  void set_allocated_fund_acct(std::string* fund_acct);
  private:
  const std::string& _internal_fund_acct() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fund_acct(const std::string& value);
  std::string* _internal_mutable_fund_acct();
  public:

  // string trade_id = 19;
  void clear_trade_id();
  const std::string& trade_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_id();
  PROTOBUF_NODISCARD std::string* release_trade_id();
  void set_allocated_trade_id(std::string* trade_id);
  private:
  const std::string& _internal_trade_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_id(const std::string& value);
  std::string* _internal_mutable_trade_id();
  public:

  // .message_head.head head = 1;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  const ::message_head::head& head() const;
  PROTOBUF_NODISCARD ::message_head::head* release_head();
  ::message_head::head* mutable_head();
  void set_allocated_head(::message_head::head* head);
  private:
  const ::message_head::head& _internal_head() const;
  ::message_head::head* _internal_mutable_head();
  public:
  void unsafe_arena_set_allocated_head(
      ::message_head::head* head);
  ::message_head::head* unsafe_arena_release_head();

  // uint64 max_floor = 8;
  void clear_max_floor();
  uint64_t max_floor() const;
  void set_max_floor(uint64_t value);
  private:
  uint64_t _internal_max_floor() const;
  void _internal_set_max_floor(uint64_t value);
  public:

  // uint64 vol = 9;
  void clear_vol();
  uint64_t vol() const;
  void set_vol(uint64_t value);
  private:
  uint64_t _internal_vol() const;
  void _internal_set_vol(uint64_t value);
  public:

  // uint64 vol_traded = 10;
  void clear_vol_traded();
  uint64_t vol_traded() const;
  void set_vol_traded(uint64_t value);
  private:
  uint64_t _internal_vol_traded() const;
  void _internal_set_vol_traded(uint64_t value);
  public:

  // uint64 vol_total = 11;
  void clear_vol_total();
  uint64_t vol_total() const;
  void set_vol_total(uint64_t value);
  private:
  uint64_t _internal_vol_total() const;
  void _internal_set_vol_total(uint64_t value);
  public:

  // uint64 legsettl_type = 13;
  void clear_legsettl_type();
  uint64_t legsettl_type() const;
  void set_legsettl_type(uint64_t value);
  private:
  uint64_t _internal_legsettl_type() const;
  void _internal_set_legsettl_type(uint64_t value);
  public:

  // uint64 delivery_type = 14;
  void clear_delivery_type();
  uint64_t delivery_type() const;
  void set_delivery_type(uint64_t value);
  private:
  uint64_t _internal_delivery_type() const;
  void _internal_set_delivery_type(uint64_t value);
  public:

  // float price = 12;
  void clear_price();
  float price() const;
  void set_price(float value);
  private:
  float _internal_price() const;
  void _internal_set_price(float value);
  public:

  // float ytm = 16;
  void clear_ytm();
  float ytm() const;
  void set_ytm(float value);
  private:
  float _internal_ytm() const;
  void _internal_set_ytm(float value);
  public:

  // uint64 clearing_method = 15;
  void clear_clearing_method();
  uint64_t clearing_method() const;
  void set_clearing_method(uint64_t value);
  private:
  uint64_t _internal_clearing_method() const;
  void _internal_set_clearing_method(uint64_t value);
  public:

  // float strike_yeild = 17;
  void clear_strike_yeild();
  float strike_yeild() const;
  void set_strike_yeild(float value);
  private:
  float _internal_strike_yeild() const;
  void _internal_set_strike_yeild(float value);
  public:

  // @@protoc_insertion_point(class_scope:ficc_message.ficc_Exch_Order_Rtn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seat_order_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_sys_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr insert_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr update_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secu_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fund_acct_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_id_;
  ::message_head::head* head_;
  uint64_t max_floor_;
  uint64_t vol_;
  uint64_t vol_traded_;
  uint64_t vol_total_;
  uint64_t legsettl_type_;
  uint64_t delivery_type_;
  float price_;
  float ytm_;
  uint64_t clearing_method_;
  float strike_yeild_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ficc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ficc_Order_Req

// .message_head.head head = 1;
inline bool ficc_Order_Req::_internal_has_head() const {
  return this != internal_default_instance() && head_ != nullptr;
}
inline bool ficc_Order_Req::has_head() const {
  return _internal_has_head();
}
inline const ::message_head::head& ficc_Order_Req::_internal_head() const {
  const ::message_head::head* p = head_;
  return p != nullptr ? *p : reinterpret_cast<const ::message_head::head&>(
      ::message_head::_head_default_instance_);
}
inline const ::message_head::head& ficc_Order_Req::head() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Req.head)
  return _internal_head();
}
inline void ficc_Order_Req::unsafe_arena_set_allocated_head(
    ::message_head::head* head) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ficc_message.ficc_Order_Req.head)
}
inline ::message_head::head* ficc_Order_Req::release_head() {
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message_head::head* ficc_Order_Req::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Req.head)
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
  return temp;
}
inline ::message_head::head* ficc_Order_Req::_internal_mutable_head() {
  
  if (head_ == nullptr) {
    auto* p = CreateMaybeMessage<::message_head::head>(GetArenaForAllocation());
    head_ = p;
  }
  return head_;
}
inline ::message_head::head* ficc_Order_Req::mutable_head() {
  ::message_head::head* _msg = _internal_mutable_head();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Req.head)
  return _msg;
}
inline void ficc_Order_Req::set_allocated_head(::message_head::head* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head));
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Req.head)
}

// string trade_acct = 2;
inline void ficc_Order_Req::clear_trade_acct() {
  trade_acct_.ClearToEmpty();
}
inline const std::string& ficc_Order_Req::trade_acct() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Req.trade_acct)
  return _internal_trade_acct();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Req::set_trade_acct(ArgT0&& arg0, ArgT... args) {
 
 trade_acct_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Req.trade_acct)
}
inline std::string* ficc_Order_Req::mutable_trade_acct() {
  std::string* _s = _internal_mutable_trade_acct();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Req.trade_acct)
  return _s;
}
inline const std::string& ficc_Order_Req::_internal_trade_acct() const {
  return trade_acct_.Get();
}
inline void ficc_Order_Req::_internal_set_trade_acct(const std::string& value) {
  
  trade_acct_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Req::_internal_mutable_trade_acct() {
  
  return trade_acct_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Req::release_trade_acct() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Req.trade_acct)
  return trade_acct_.Release();
}
inline void ficc_Order_Req::set_allocated_trade_acct(std::string* trade_acct) {
  if (trade_acct != nullptr) {
    
  } else {
    
  }
  trade_acct_.SetAllocated(trade_acct, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trade_acct_.IsDefault()) {
    trade_acct_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Req.trade_acct)
}

// string secu_code = 3;
inline void ficc_Order_Req::clear_secu_code() {
  secu_code_.ClearToEmpty();
}
inline const std::string& ficc_Order_Req::secu_code() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Req.secu_code)
  return _internal_secu_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Req::set_secu_code(ArgT0&& arg0, ArgT... args) {
 
 secu_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Req.secu_code)
}
inline std::string* ficc_Order_Req::mutable_secu_code() {
  std::string* _s = _internal_mutable_secu_code();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Req.secu_code)
  return _s;
}
inline const std::string& ficc_Order_Req::_internal_secu_code() const {
  return secu_code_.Get();
}
inline void ficc_Order_Req::_internal_set_secu_code(const std::string& value) {
  
  secu_code_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Req::_internal_mutable_secu_code() {
  
  return secu_code_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Req::release_secu_code() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Req.secu_code)
  return secu_code_.Release();
}
inline void ficc_Order_Req::set_allocated_secu_code(std::string* secu_code) {
  if (secu_code != nullptr) {
    
  } else {
    
  }
  secu_code_.SetAllocated(secu_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secu_code_.IsDefault()) {
    secu_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Req.secu_code)
}

// string order_price_type = 4;
inline void ficc_Order_Req::clear_order_price_type() {
  order_price_type_.ClearToEmpty();
}
inline const std::string& ficc_Order_Req::order_price_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Req.order_price_type)
  return _internal_order_price_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Req::set_order_price_type(ArgT0&& arg0, ArgT... args) {
 
 order_price_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Req.order_price_type)
}
inline std::string* ficc_Order_Req::mutable_order_price_type() {
  std::string* _s = _internal_mutable_order_price_type();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Req.order_price_type)
  return _s;
}
inline const std::string& ficc_Order_Req::_internal_order_price_type() const {
  return order_price_type_.Get();
}
inline void ficc_Order_Req::_internal_set_order_price_type(const std::string& value) {
  
  order_price_type_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Req::_internal_mutable_order_price_type() {
  
  return order_price_type_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Req::release_order_price_type() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Req.order_price_type)
  return order_price_type_.Release();
}
inline void ficc_Order_Req::set_allocated_order_price_type(std::string* order_price_type) {
  if (order_price_type != nullptr) {
    
  } else {
    
  }
  order_price_type_.SetAllocated(order_price_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_price_type_.IsDefault()) {
    order_price_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Req.order_price_type)
}

// string direction = 5;
inline void ficc_Order_Req::clear_direction() {
  direction_.ClearToEmpty();
}
inline const std::string& ficc_Order_Req::direction() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Req.direction)
  return _internal_direction();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Req::set_direction(ArgT0&& arg0, ArgT... args) {
 
 direction_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Req.direction)
}
inline std::string* ficc_Order_Req::mutable_direction() {
  std::string* _s = _internal_mutable_direction();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Req.direction)
  return _s;
}
inline const std::string& ficc_Order_Req::_internal_direction() const {
  return direction_.Get();
}
inline void ficc_Order_Req::_internal_set_direction(const std::string& value) {
  
  direction_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Req::_internal_mutable_direction() {
  
  return direction_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Req::release_direction() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Req.direction)
  return direction_.Release();
}
inline void ficc_Order_Req::set_allocated_direction(std::string* direction) {
  if (direction != nullptr) {
    
  } else {
    
  }
  direction_.SetAllocated(direction, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (direction_.IsDefault()) {
    direction_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Req.direction)
}

// string offset_flag = 6;
inline void ficc_Order_Req::clear_offset_flag() {
  offset_flag_.ClearToEmpty();
}
inline const std::string& ficc_Order_Req::offset_flag() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Req.offset_flag)
  return _internal_offset_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Req::set_offset_flag(ArgT0&& arg0, ArgT... args) {
 
 offset_flag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Req.offset_flag)
}
inline std::string* ficc_Order_Req::mutable_offset_flag() {
  std::string* _s = _internal_mutable_offset_flag();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Req.offset_flag)
  return _s;
}
inline const std::string& ficc_Order_Req::_internal_offset_flag() const {
  return offset_flag_.Get();
}
inline void ficc_Order_Req::_internal_set_offset_flag(const std::string& value) {
  
  offset_flag_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Req::_internal_mutable_offset_flag() {
  
  return offset_flag_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Req::release_offset_flag() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Req.offset_flag)
  return offset_flag_.Release();
}
inline void ficc_Order_Req::set_allocated_offset_flag(std::string* offset_flag) {
  if (offset_flag != nullptr) {
    
  } else {
    
  }
  offset_flag_.SetAllocated(offset_flag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (offset_flag_.IsDefault()) {
    offset_flag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Req.offset_flag)
}

// string hedge_flag = 7;
inline void ficc_Order_Req::clear_hedge_flag() {
  hedge_flag_.ClearToEmpty();
}
inline const std::string& ficc_Order_Req::hedge_flag() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Req.hedge_flag)
  return _internal_hedge_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Req::set_hedge_flag(ArgT0&& arg0, ArgT... args) {
 
 hedge_flag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Req.hedge_flag)
}
inline std::string* ficc_Order_Req::mutable_hedge_flag() {
  std::string* _s = _internal_mutable_hedge_flag();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Req.hedge_flag)
  return _s;
}
inline const std::string& ficc_Order_Req::_internal_hedge_flag() const {
  return hedge_flag_.Get();
}
inline void ficc_Order_Req::_internal_set_hedge_flag(const std::string& value) {
  
  hedge_flag_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Req::_internal_mutable_hedge_flag() {
  
  return hedge_flag_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Req::release_hedge_flag() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Req.hedge_flag)
  return hedge_flag_.Release();
}
inline void ficc_Order_Req::set_allocated_hedge_flag(std::string* hedge_flag) {
  if (hedge_flag != nullptr) {
    
  } else {
    
  }
  hedge_flag_.SetAllocated(hedge_flag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hedge_flag_.IsDefault()) {
    hedge_flag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Req.hedge_flag)
}

// float price = 8;
inline void ficc_Order_Req::clear_price() {
  price_ = 0;
}
inline float ficc_Order_Req::_internal_price() const {
  return price_;
}
inline float ficc_Order_Req::price() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Req.price)
  return _internal_price();
}
inline void ficc_Order_Req::_internal_set_price(float value) {
  
  price_ = value;
}
inline void ficc_Order_Req::set_price(float value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Req.price)
}

// uint64 vol = 9;
inline void ficc_Order_Req::clear_vol() {
  vol_ = uint64_t{0u};
}
inline uint64_t ficc_Order_Req::_internal_vol() const {
  return vol_;
}
inline uint64_t ficc_Order_Req::vol() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Req.vol)
  return _internal_vol();
}
inline void ficc_Order_Req::_internal_set_vol(uint64_t value) {
  
  vol_ = value;
}
inline void ficc_Order_Req::set_vol(uint64_t value) {
  _internal_set_vol(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Req.vol)
}

// string time_cond = 10;
inline void ficc_Order_Req::clear_time_cond() {
  time_cond_.ClearToEmpty();
}
inline const std::string& ficc_Order_Req::time_cond() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Req.time_cond)
  return _internal_time_cond();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Req::set_time_cond(ArgT0&& arg0, ArgT... args) {
 
 time_cond_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Req.time_cond)
}
inline std::string* ficc_Order_Req::mutable_time_cond() {
  std::string* _s = _internal_mutable_time_cond();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Req.time_cond)
  return _s;
}
inline const std::string& ficc_Order_Req::_internal_time_cond() const {
  return time_cond_.Get();
}
inline void ficc_Order_Req::_internal_set_time_cond(const std::string& value) {
  
  time_cond_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Req::_internal_mutable_time_cond() {
  
  return time_cond_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Req::release_time_cond() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Req.time_cond)
  return time_cond_.Release();
}
inline void ficc_Order_Req::set_allocated_time_cond(std::string* time_cond) {
  if (time_cond != nullptr) {
    
  } else {
    
  }
  time_cond_.SetAllocated(time_cond, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (time_cond_.IsDefault()) {
    time_cond_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Req.time_cond)
}

// uint64 strategy_code = 11;
inline void ficc_Order_Req::clear_strategy_code() {
  strategy_code_ = uint64_t{0u};
}
inline uint64_t ficc_Order_Req::_internal_strategy_code() const {
  return strategy_code_;
}
inline uint64_t ficc_Order_Req::strategy_code() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Req.strategy_code)
  return _internal_strategy_code();
}
inline void ficc_Order_Req::_internal_set_strategy_code(uint64_t value) {
  
  strategy_code_ = value;
}
inline void ficc_Order_Req::set_strategy_code(uint64_t value) {
  _internal_set_strategy_code(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Req.strategy_code)
}

// uint32 user_id = 12;
inline void ficc_Order_Req::clear_user_id() {
  user_id_ = 0u;
}
inline uint32_t ficc_Order_Req::_internal_user_id() const {
  return user_id_;
}
inline uint32_t ficc_Order_Req::user_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Req.user_id)
  return _internal_user_id();
}
inline void ficc_Order_Req::_internal_set_user_id(uint32_t value) {
  
  user_id_ = value;
}
inline void ficc_Order_Req::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Req.user_id)
}

// string purchase_way = 13;
inline void ficc_Order_Req::clear_purchase_way() {
  purchase_way_.ClearToEmpty();
}
inline const std::string& ficc_Order_Req::purchase_way() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Req.purchase_way)
  return _internal_purchase_way();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Req::set_purchase_way(ArgT0&& arg0, ArgT... args) {
 
 purchase_way_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Req.purchase_way)
}
inline std::string* ficc_Order_Req::mutable_purchase_way() {
  std::string* _s = _internal_mutable_purchase_way();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Req.purchase_way)
  return _s;
}
inline const std::string& ficc_Order_Req::_internal_purchase_way() const {
  return purchase_way_.Get();
}
inline void ficc_Order_Req::_internal_set_purchase_way(const std::string& value) {
  
  purchase_way_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Req::_internal_mutable_purchase_way() {
  
  return purchase_way_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Req::release_purchase_way() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Req.purchase_way)
  return purchase_way_.Release();
}
inline void ficc_Order_Req::set_allocated_purchase_way(std::string* purchase_way) {
  if (purchase_way != nullptr) {
    
  } else {
    
  }
  purchase_way_.SetAllocated(purchase_way, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (purchase_way_.IsDefault()) {
    purchase_way_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Req.purchase_way)
}

// string text = 14;
inline void ficc_Order_Req::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& ficc_Order_Req::text() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Req.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Req::set_text(ArgT0&& arg0, ArgT... args) {
 
 text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Req.text)
}
inline std::string* ficc_Order_Req::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Req.text)
  return _s;
}
inline const std::string& ficc_Order_Req::_internal_text() const {
  return text_.Get();
}
inline void ficc_Order_Req::_internal_set_text(const std::string& value) {
  
  text_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Req::_internal_mutable_text() {
  
  return text_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Req::release_text() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Req.text)
  return text_.Release();
}
inline void ficc_Order_Req::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault()) {
    text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Req.text)
}

// float ytm = 15;
inline void ficc_Order_Req::clear_ytm() {
  ytm_ = 0;
}
inline float ficc_Order_Req::_internal_ytm() const {
  return ytm_;
}
inline float ficc_Order_Req::ytm() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Req.ytm)
  return _internal_ytm();
}
inline void ficc_Order_Req::_internal_set_ytm(float value) {
  
  ytm_ = value;
}
inline void ficc_Order_Req::set_ytm(float value) {
  _internal_set_ytm(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Req.ytm)
}

// float strike_yeild = 16;
inline void ficc_Order_Req::clear_strike_yeild() {
  strike_yeild_ = 0;
}
inline float ficc_Order_Req::_internal_strike_yeild() const {
  return strike_yeild_;
}
inline float ficc_Order_Req::strike_yeild() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Req.strike_yeild)
  return _internal_strike_yeild();
}
inline void ficc_Order_Req::_internal_set_strike_yeild(float value) {
  
  strike_yeild_ = value;
}
inline void ficc_Order_Req::set_strike_yeild(float value) {
  _internal_set_strike_yeild(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Req.strike_yeild)
}

// uint64 quote_type = 17;
inline void ficc_Order_Req::clear_quote_type() {
  quote_type_ = uint64_t{0u};
}
inline uint64_t ficc_Order_Req::_internal_quote_type() const {
  return quote_type_;
}
inline uint64_t ficc_Order_Req::quote_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Req.quote_type)
  return _internal_quote_type();
}
inline void ficc_Order_Req::_internal_set_quote_type(uint64_t value) {
  
  quote_type_ = value;
}
inline void ficc_Order_Req::set_quote_type(uint64_t value) {
  _internal_set_quote_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Req.quote_type)
}

// uint64 max_floor = 18;
inline void ficc_Order_Req::clear_max_floor() {
  max_floor_ = uint64_t{0u};
}
inline uint64_t ficc_Order_Req::_internal_max_floor() const {
  return max_floor_;
}
inline uint64_t ficc_Order_Req::max_floor() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Req.max_floor)
  return _internal_max_floor();
}
inline void ficc_Order_Req::_internal_set_max_floor(uint64_t value) {
  
  max_floor_ = value;
}
inline void ficc_Order_Req::set_max_floor(uint64_t value) {
  _internal_set_max_floor(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Req.max_floor)
}

// uint64 min_tick_size = 19;
inline void ficc_Order_Req::clear_min_tick_size() {
  min_tick_size_ = uint64_t{0u};
}
inline uint64_t ficc_Order_Req::_internal_min_tick_size() const {
  return min_tick_size_;
}
inline uint64_t ficc_Order_Req::min_tick_size() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Req.min_tick_size)
  return _internal_min_tick_size();
}
inline void ficc_Order_Req::_internal_set_min_tick_size(uint64_t value) {
  
  min_tick_size_ = value;
}
inline void ficc_Order_Req::set_min_tick_size(uint64_t value) {
  _internal_set_min_tick_size(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Req.min_tick_size)
}

// uint64 settle_type = 20;
inline void ficc_Order_Req::clear_settle_type() {
  settle_type_ = uint64_t{0u};
}
inline uint64_t ficc_Order_Req::_internal_settle_type() const {
  return settle_type_;
}
inline uint64_t ficc_Order_Req::settle_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Req.settle_type)
  return _internal_settle_type();
}
inline void ficc_Order_Req::_internal_set_settle_type(uint64_t value) {
  
  settle_type_ = value;
}
inline void ficc_Order_Req::set_settle_type(uint64_t value) {
  _internal_set_settle_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Req.settle_type)
}

// uint64 match_type = 21;
inline void ficc_Order_Req::clear_match_type() {
  match_type_ = uint64_t{0u};
}
inline uint64_t ficc_Order_Req::_internal_match_type() const {
  return match_type_;
}
inline uint64_t ficc_Order_Req::match_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Req.match_type)
  return _internal_match_type();
}
inline void ficc_Order_Req::_internal_set_match_type(uint64_t value) {
  
  match_type_ = value;
}
inline void ficc_Order_Req::set_match_type(uint64_t value) {
  _internal_set_match_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Req.match_type)
}

// uint64 delivery_type = 22;
inline void ficc_Order_Req::clear_delivery_type() {
  delivery_type_ = uint64_t{0u};
}
inline uint64_t ficc_Order_Req::_internal_delivery_type() const {
  return delivery_type_;
}
inline uint64_t ficc_Order_Req::delivery_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Req.delivery_type)
  return _internal_delivery_type();
}
inline void ficc_Order_Req::_internal_set_delivery_type(uint64_t value) {
  
  delivery_type_ = value;
}
inline void ficc_Order_Req::set_delivery_type(uint64_t value) {
  _internal_set_delivery_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Req.delivery_type)
}

// uint64 clearing_method = 23;
inline void ficc_Order_Req::clear_clearing_method() {
  clearing_method_ = uint64_t{0u};
}
inline uint64_t ficc_Order_Req::_internal_clearing_method() const {
  return clearing_method_;
}
inline uint64_t ficc_Order_Req::clearing_method() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Req.clearing_method)
  return _internal_clearing_method();
}
inline void ficc_Order_Req::_internal_set_clearing_method(uint64_t value) {
  
  clearing_method_ = value;
}
inline void ficc_Order_Req::set_clearing_method(uint64_t value) {
  _internal_set_clearing_method(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Req.clearing_method)
}

// string valid_until_time = 24;
inline void ficc_Order_Req::clear_valid_until_time() {
  valid_until_time_.ClearToEmpty();
}
inline const std::string& ficc_Order_Req::valid_until_time() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Req.valid_until_time)
  return _internal_valid_until_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Req::set_valid_until_time(ArgT0&& arg0, ArgT... args) {
 
 valid_until_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Req.valid_until_time)
}
inline std::string* ficc_Order_Req::mutable_valid_until_time() {
  std::string* _s = _internal_mutable_valid_until_time();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Req.valid_until_time)
  return _s;
}
inline const std::string& ficc_Order_Req::_internal_valid_until_time() const {
  return valid_until_time_.Get();
}
inline void ficc_Order_Req::_internal_set_valid_until_time(const std::string& value) {
  
  valid_until_time_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Req::_internal_mutable_valid_until_time() {
  
  return valid_until_time_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Req::release_valid_until_time() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Req.valid_until_time)
  return valid_until_time_.Release();
}
inline void ficc_Order_Req::set_allocated_valid_until_time(std::string* valid_until_time) {
  if (valid_until_time != nullptr) {
    
  } else {
    
  }
  valid_until_time_.SetAllocated(valid_until_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (valid_until_time_.IsDefault()) {
    valid_until_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Req.valid_until_time)
}

// string mdentry_time = 25;
inline void ficc_Order_Req::clear_mdentry_time() {
  mdentry_time_.ClearToEmpty();
}
inline const std::string& ficc_Order_Req::mdentry_time() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Req.mdentry_time)
  return _internal_mdentry_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Req::set_mdentry_time(ArgT0&& arg0, ArgT... args) {
 
 mdentry_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Req.mdentry_time)
}
inline std::string* ficc_Order_Req::mutable_mdentry_time() {
  std::string* _s = _internal_mutable_mdentry_time();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Req.mdentry_time)
  return _s;
}
inline const std::string& ficc_Order_Req::_internal_mdentry_time() const {
  return mdentry_time_.Get();
}
inline void ficc_Order_Req::_internal_set_mdentry_time(const std::string& value) {
  
  mdentry_time_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Req::_internal_mutable_mdentry_time() {
  
  return mdentry_time_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Req::release_mdentry_time() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Req.mdentry_time)
  return mdentry_time_.Release();
}
inline void ficc_Order_Req::set_allocated_mdentry_time(std::string* mdentry_time) {
  if (mdentry_time != nullptr) {
    
  } else {
    
  }
  mdentry_time_.SetAllocated(mdentry_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mdentry_time_.IsDefault()) {
    mdentry_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Req.mdentry_time)
}

// string client_ref_id = 26;
inline void ficc_Order_Req::clear_client_ref_id() {
  client_ref_id_.ClearToEmpty();
}
inline const std::string& ficc_Order_Req::client_ref_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Req.client_ref_id)
  return _internal_client_ref_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Req::set_client_ref_id(ArgT0&& arg0, ArgT... args) {
 
 client_ref_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Req.client_ref_id)
}
inline std::string* ficc_Order_Req::mutable_client_ref_id() {
  std::string* _s = _internal_mutable_client_ref_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Req.client_ref_id)
  return _s;
}
inline const std::string& ficc_Order_Req::_internal_client_ref_id() const {
  return client_ref_id_.Get();
}
inline void ficc_Order_Req::_internal_set_client_ref_id(const std::string& value) {
  
  client_ref_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Req::_internal_mutable_client_ref_id() {
  
  return client_ref_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Req::release_client_ref_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Req.client_ref_id)
  return client_ref_id_.Release();
}
inline void ficc_Order_Req::set_allocated_client_ref_id(std::string* client_ref_id) {
  if (client_ref_id != nullptr) {
    
  } else {
    
  }
  client_ref_id_.SetAllocated(client_ref_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_ref_id_.IsDefault()) {
    client_ref_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Req.client_ref_id)
}

// uint64 routing_type = 27;
inline void ficc_Order_Req::clear_routing_type() {
  routing_type_ = uint64_t{0u};
}
inline uint64_t ficc_Order_Req::_internal_routing_type() const {
  return routing_type_;
}
inline uint64_t ficc_Order_Req::routing_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Req.routing_type)
  return _internal_routing_type();
}
inline void ficc_Order_Req::_internal_set_routing_type(uint64_t value) {
  
  routing_type_ = value;
}
inline void ficc_Order_Req::set_routing_type(uint64_t value) {
  _internal_set_routing_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Req.routing_type)
}

// uint64 market_indicator = 28;
inline void ficc_Order_Req::clear_market_indicator() {
  market_indicator_ = uint64_t{0u};
}
inline uint64_t ficc_Order_Req::_internal_market_indicator() const {
  return market_indicator_;
}
inline uint64_t ficc_Order_Req::market_indicator() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Req.market_indicator)
  return _internal_market_indicator();
}
inline void ficc_Order_Req::_internal_set_market_indicator(uint64_t value) {
  
  market_indicator_ = value;
}
inline void ficc_Order_Req::set_market_indicator(uint64_t value) {
  _internal_set_market_indicator(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Req.market_indicator)
}

// uint64 realtime_undertake_flag = 29;
inline void ficc_Order_Req::clear_realtime_undertake_flag() {
  realtime_undertake_flag_ = uint64_t{0u};
}
inline uint64_t ficc_Order_Req::_internal_realtime_undertake_flag() const {
  return realtime_undertake_flag_;
}
inline uint64_t ficc_Order_Req::realtime_undertake_flag() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Req.realtime_undertake_flag)
  return _internal_realtime_undertake_flag();
}
inline void ficc_Order_Req::_internal_set_realtime_undertake_flag(uint64_t value) {
  
  realtime_undertake_flag_ = value;
}
inline void ficc_Order_Req::set_realtime_undertake_flag(uint64_t value) {
  _internal_set_realtime_undertake_flag(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Req.realtime_undertake_flag)
}

// uint64 subject_party_type = 30;
inline void ficc_Order_Req::clear_subject_party_type() {
  subject_party_type_ = uint64_t{0u};
}
inline uint64_t ficc_Order_Req::_internal_subject_party_type() const {
  return subject_party_type_;
}
inline uint64_t ficc_Order_Req::subject_party_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Req.subject_party_type)
  return _internal_subject_party_type();
}
inline void ficc_Order_Req::_internal_set_subject_party_type(uint64_t value) {
  
  subject_party_type_ = value;
}
inline void ficc_Order_Req::set_subject_party_type(uint64_t value) {
  _internal_set_subject_party_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Req.subject_party_type)
}

// string reserver1 = 31;
inline void ficc_Order_Req::clear_reserver1() {
  reserver1_.ClearToEmpty();
}
inline const std::string& ficc_Order_Req::reserver1() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Req.reserver1)
  return _internal_reserver1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Req::set_reserver1(ArgT0&& arg0, ArgT... args) {
 
 reserver1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Req.reserver1)
}
inline std::string* ficc_Order_Req::mutable_reserver1() {
  std::string* _s = _internal_mutable_reserver1();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Req.reserver1)
  return _s;
}
inline const std::string& ficc_Order_Req::_internal_reserver1() const {
  return reserver1_.Get();
}
inline void ficc_Order_Req::_internal_set_reserver1(const std::string& value) {
  
  reserver1_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Req::_internal_mutable_reserver1() {
  
  return reserver1_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Req::release_reserver1() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Req.reserver1)
  return reserver1_.Release();
}
inline void ficc_Order_Req::set_allocated_reserver1(std::string* reserver1) {
  if (reserver1 != nullptr) {
    
  } else {
    
  }
  reserver1_.SetAllocated(reserver1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reserver1_.IsDefault()) {
    reserver1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Req.reserver1)
}

// string quote_id = 32;
inline void ficc_Order_Req::clear_quote_id() {
  quote_id_.ClearToEmpty();
}
inline const std::string& ficc_Order_Req::quote_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Req.quote_id)
  return _internal_quote_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Req::set_quote_id(ArgT0&& arg0, ArgT... args) {
 
 quote_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Req.quote_id)
}
inline std::string* ficc_Order_Req::mutable_quote_id() {
  std::string* _s = _internal_mutable_quote_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Req.quote_id)
  return _s;
}
inline const std::string& ficc_Order_Req::_internal_quote_id() const {
  return quote_id_.Get();
}
inline void ficc_Order_Req::_internal_set_quote_id(const std::string& value) {
  
  quote_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Req::_internal_mutable_quote_id() {
  
  return quote_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Req::release_quote_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Req.quote_id)
  return quote_id_.Release();
}
inline void ficc_Order_Req::set_allocated_quote_id(std::string* quote_id) {
  if (quote_id != nullptr) {
    
  } else {
    
  }
  quote_id_.SetAllocated(quote_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (quote_id_.IsDefault()) {
    quote_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Req.quote_id)
}

// -------------------------------------------------------------------

// ficc_Order_Rsp

// .message_head.head head = 1;
inline bool ficc_Order_Rsp::_internal_has_head() const {
  return this != internal_default_instance() && head_ != nullptr;
}
inline bool ficc_Order_Rsp::has_head() const {
  return _internal_has_head();
}
inline const ::message_head::head& ficc_Order_Rsp::_internal_head() const {
  const ::message_head::head* p = head_;
  return p != nullptr ? *p : reinterpret_cast<const ::message_head::head&>(
      ::message_head::_head_default_instance_);
}
inline const ::message_head::head& ficc_Order_Rsp::head() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rsp.head)
  return _internal_head();
}
inline void ficc_Order_Rsp::unsafe_arena_set_allocated_head(
    ::message_head::head* head) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ficc_message.ficc_Order_Rsp.head)
}
inline ::message_head::head* ficc_Order_Rsp::release_head() {
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message_head::head* ficc_Order_Rsp::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rsp.head)
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
  return temp;
}
inline ::message_head::head* ficc_Order_Rsp::_internal_mutable_head() {
  
  if (head_ == nullptr) {
    auto* p = CreateMaybeMessage<::message_head::head>(GetArenaForAllocation());
    head_ = p;
  }
  return head_;
}
inline ::message_head::head* ficc_Order_Rsp::mutable_head() {
  ::message_head::head* _msg = _internal_mutable_head();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rsp.head)
  return _msg;
}
inline void ficc_Order_Rsp::set_allocated_head(::message_head::head* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head));
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rsp.head)
}

// string trade_acct = 2;
inline void ficc_Order_Rsp::clear_trade_acct() {
  trade_acct_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rsp::trade_acct() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rsp.trade_acct)
  return _internal_trade_acct();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rsp::set_trade_acct(ArgT0&& arg0, ArgT... args) {
 
 trade_acct_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rsp.trade_acct)
}
inline std::string* ficc_Order_Rsp::mutable_trade_acct() {
  std::string* _s = _internal_mutable_trade_acct();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rsp.trade_acct)
  return _s;
}
inline const std::string& ficc_Order_Rsp::_internal_trade_acct() const {
  return trade_acct_.Get();
}
inline void ficc_Order_Rsp::_internal_set_trade_acct(const std::string& value) {
  
  trade_acct_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rsp::_internal_mutable_trade_acct() {
  
  return trade_acct_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rsp::release_trade_acct() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rsp.trade_acct)
  return trade_acct_.Release();
}
inline void ficc_Order_Rsp::set_allocated_trade_acct(std::string* trade_acct) {
  if (trade_acct != nullptr) {
    
  } else {
    
  }
  trade_acct_.SetAllocated(trade_acct, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trade_acct_.IsDefault()) {
    trade_acct_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rsp.trade_acct)
}

// string fund_acct = 3;
inline void ficc_Order_Rsp::clear_fund_acct() {
  fund_acct_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rsp::fund_acct() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rsp.fund_acct)
  return _internal_fund_acct();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rsp::set_fund_acct(ArgT0&& arg0, ArgT... args) {
 
 fund_acct_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rsp.fund_acct)
}
inline std::string* ficc_Order_Rsp::mutable_fund_acct() {
  std::string* _s = _internal_mutable_fund_acct();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rsp.fund_acct)
  return _s;
}
inline const std::string& ficc_Order_Rsp::_internal_fund_acct() const {
  return fund_acct_.Get();
}
inline void ficc_Order_Rsp::_internal_set_fund_acct(const std::string& value) {
  
  fund_acct_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rsp::_internal_mutable_fund_acct() {
  
  return fund_acct_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rsp::release_fund_acct() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rsp.fund_acct)
  return fund_acct_.Release();
}
inline void ficc_Order_Rsp::set_allocated_fund_acct(std::string* fund_acct) {
  if (fund_acct != nullptr) {
    
  } else {
    
  }
  fund_acct_.SetAllocated(fund_acct, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fund_acct_.IsDefault()) {
    fund_acct_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rsp.fund_acct)
}

// string combino = 4;
inline void ficc_Order_Rsp::clear_combino() {
  combino_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rsp::combino() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rsp.combino)
  return _internal_combino();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rsp::set_combino(ArgT0&& arg0, ArgT... args) {
 
 combino_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rsp.combino)
}
inline std::string* ficc_Order_Rsp::mutable_combino() {
  std::string* _s = _internal_mutable_combino();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rsp.combino)
  return _s;
}
inline const std::string& ficc_Order_Rsp::_internal_combino() const {
  return combino_.Get();
}
inline void ficc_Order_Rsp::_internal_set_combino(const std::string& value) {
  
  combino_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rsp::_internal_mutable_combino() {
  
  return combino_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rsp::release_combino() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rsp.combino)
  return combino_.Release();
}
inline void ficc_Order_Rsp::set_allocated_combino(std::string* combino) {
  if (combino != nullptr) {
    
  } else {
    
  }
  combino_.SetAllocated(combino, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (combino_.IsDefault()) {
    combino_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rsp.combino)
}

// string secu_code = 5;
inline void ficc_Order_Rsp::clear_secu_code() {
  secu_code_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rsp::secu_code() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rsp.secu_code)
  return _internal_secu_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rsp::set_secu_code(ArgT0&& arg0, ArgT... args) {
 
 secu_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rsp.secu_code)
}
inline std::string* ficc_Order_Rsp::mutable_secu_code() {
  std::string* _s = _internal_mutable_secu_code();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rsp.secu_code)
  return _s;
}
inline const std::string& ficc_Order_Rsp::_internal_secu_code() const {
  return secu_code_.Get();
}
inline void ficc_Order_Rsp::_internal_set_secu_code(const std::string& value) {
  
  secu_code_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rsp::_internal_mutable_secu_code() {
  
  return secu_code_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rsp::release_secu_code() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rsp.secu_code)
  return secu_code_.Release();
}
inline void ficc_Order_Rsp::set_allocated_secu_code(std::string* secu_code) {
  if (secu_code != nullptr) {
    
  } else {
    
  }
  secu_code_.SetAllocated(secu_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secu_code_.IsDefault()) {
    secu_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rsp.secu_code)
}

// string order_inner_id = 6;
inline void ficc_Order_Rsp::clear_order_inner_id() {
  order_inner_id_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rsp::order_inner_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rsp.order_inner_id)
  return _internal_order_inner_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rsp::set_order_inner_id(ArgT0&& arg0, ArgT... args) {
 
 order_inner_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rsp.order_inner_id)
}
inline std::string* ficc_Order_Rsp::mutable_order_inner_id() {
  std::string* _s = _internal_mutable_order_inner_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rsp.order_inner_id)
  return _s;
}
inline const std::string& ficc_Order_Rsp::_internal_order_inner_id() const {
  return order_inner_id_.Get();
}
inline void ficc_Order_Rsp::_internal_set_order_inner_id(const std::string& value) {
  
  order_inner_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rsp::_internal_mutable_order_inner_id() {
  
  return order_inner_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rsp::release_order_inner_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rsp.order_inner_id)
  return order_inner_id_.Release();
}
inline void ficc_Order_Rsp::set_allocated_order_inner_id(std::string* order_inner_id) {
  if (order_inner_id != nullptr) {
    
  } else {
    
  }
  order_inner_id_.SetAllocated(order_inner_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_inner_id_.IsDefault()) {
    order_inner_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rsp.order_inner_id)
}

// string send_time = 7;
inline void ficc_Order_Rsp::clear_send_time() {
  send_time_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rsp::send_time() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rsp.send_time)
  return _internal_send_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rsp::set_send_time(ArgT0&& arg0, ArgT... args) {
 
 send_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rsp.send_time)
}
inline std::string* ficc_Order_Rsp::mutable_send_time() {
  std::string* _s = _internal_mutable_send_time();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rsp.send_time)
  return _s;
}
inline const std::string& ficc_Order_Rsp::_internal_send_time() const {
  return send_time_.Get();
}
inline void ficc_Order_Rsp::_internal_set_send_time(const std::string& value) {
  
  send_time_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rsp::_internal_mutable_send_time() {
  
  return send_time_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rsp::release_send_time() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rsp.send_time)
  return send_time_.Release();
}
inline void ficc_Order_Rsp::set_allocated_send_time(std::string* send_time) {
  if (send_time != nullptr) {
    
  } else {
    
  }
  send_time_.SetAllocated(send_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (send_time_.IsDefault()) {
    send_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rsp.send_time)
}

// string order_status = 8;
inline void ficc_Order_Rsp::clear_order_status() {
  order_status_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rsp::order_status() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rsp.order_status)
  return _internal_order_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rsp::set_order_status(ArgT0&& arg0, ArgT... args) {
 
 order_status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rsp.order_status)
}
inline std::string* ficc_Order_Rsp::mutable_order_status() {
  std::string* _s = _internal_mutable_order_status();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rsp.order_status)
  return _s;
}
inline const std::string& ficc_Order_Rsp::_internal_order_status() const {
  return order_status_.Get();
}
inline void ficc_Order_Rsp::_internal_set_order_status(const std::string& value) {
  
  order_status_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rsp::_internal_mutable_order_status() {
  
  return order_status_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rsp::release_order_status() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rsp.order_status)
  return order_status_.Release();
}
inline void ficc_Order_Rsp::set_allocated_order_status(std::string* order_status) {
  if (order_status != nullptr) {
    
  } else {
    
  }
  order_status_.SetAllocated(order_status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_status_.IsDefault()) {
    order_status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rsp.order_status)
}

// uint32 err_id = 9;
inline void ficc_Order_Rsp::clear_err_id() {
  err_id_ = 0u;
}
inline uint32_t ficc_Order_Rsp::_internal_err_id() const {
  return err_id_;
}
inline uint32_t ficc_Order_Rsp::err_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rsp.err_id)
  return _internal_err_id();
}
inline void ficc_Order_Rsp::_internal_set_err_id(uint32_t value) {
  
  err_id_ = value;
}
inline void ficc_Order_Rsp::set_err_id(uint32_t value) {
  _internal_set_err_id(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rsp.err_id)
}

// string err_msg = 10;
inline void ficc_Order_Rsp::clear_err_msg() {
  err_msg_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rsp::err_msg() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rsp.err_msg)
  return _internal_err_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rsp::set_err_msg(ArgT0&& arg0, ArgT... args) {
 
 err_msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rsp.err_msg)
}
inline std::string* ficc_Order_Rsp::mutable_err_msg() {
  std::string* _s = _internal_mutable_err_msg();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rsp.err_msg)
  return _s;
}
inline const std::string& ficc_Order_Rsp::_internal_err_msg() const {
  return err_msg_.Get();
}
inline void ficc_Order_Rsp::_internal_set_err_msg(const std::string& value) {
  
  err_msg_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rsp::_internal_mutable_err_msg() {
  
  return err_msg_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rsp::release_err_msg() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rsp.err_msg)
  return err_msg_.Release();
}
inline void ficc_Order_Rsp::set_allocated_err_msg(std::string* err_msg) {
  if (err_msg != nullptr) {
    
  } else {
    
  }
  err_msg_.SetAllocated(err_msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_msg_.IsDefault()) {
    err_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rsp.err_msg)
}

// -------------------------------------------------------------------

// ficc_Order_Rtn

// .message_head.head head = 1;
inline bool ficc_Order_Rtn::_internal_has_head() const {
  return this != internal_default_instance() && head_ != nullptr;
}
inline bool ficc_Order_Rtn::has_head() const {
  return _internal_has_head();
}
inline const ::message_head::head& ficc_Order_Rtn::_internal_head() const {
  const ::message_head::head* p = head_;
  return p != nullptr ? *p : reinterpret_cast<const ::message_head::head&>(
      ::message_head::_head_default_instance_);
}
inline const ::message_head::head& ficc_Order_Rtn::head() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.head)
  return _internal_head();
}
inline void ficc_Order_Rtn::unsafe_arena_set_allocated_head(
    ::message_head::head* head) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ficc_message.ficc_Order_Rtn.head)
}
inline ::message_head::head* ficc_Order_Rtn::release_head() {
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message_head::head* ficc_Order_Rtn::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.head)
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
  return temp;
}
inline ::message_head::head* ficc_Order_Rtn::_internal_mutable_head() {
  
  if (head_ == nullptr) {
    auto* p = CreateMaybeMessage<::message_head::head>(GetArenaForAllocation());
    head_ = p;
  }
  return head_;
}
inline ::message_head::head* ficc_Order_Rtn::mutable_head() {
  ::message_head::head* _msg = _internal_mutable_head();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.head)
  return _msg;
}
inline void ficc_Order_Rtn::set_allocated_head(::message_head::head* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head));
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.head)
}

// string trade_acct = 2;
inline void ficc_Order_Rtn::clear_trade_acct() {
  trade_acct_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::trade_acct() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.trade_acct)
  return _internal_trade_acct();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_trade_acct(ArgT0&& arg0, ArgT... args) {
 
 trade_acct_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.trade_acct)
}
inline std::string* ficc_Order_Rtn::mutable_trade_acct() {
  std::string* _s = _internal_mutable_trade_acct();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.trade_acct)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_trade_acct() const {
  return trade_acct_.Get();
}
inline void ficc_Order_Rtn::_internal_set_trade_acct(const std::string& value) {
  
  trade_acct_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_trade_acct() {
  
  return trade_acct_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_trade_acct() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.trade_acct)
  return trade_acct_.Release();
}
inline void ficc_Order_Rtn::set_allocated_trade_acct(std::string* trade_acct) {
  if (trade_acct != nullptr) {
    
  } else {
    
  }
  trade_acct_.SetAllocated(trade_acct, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trade_acct_.IsDefault()) {
    trade_acct_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.trade_acct)
}

// string fund_acct = 3;
inline void ficc_Order_Rtn::clear_fund_acct() {
  fund_acct_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::fund_acct() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.fund_acct)
  return _internal_fund_acct();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_fund_acct(ArgT0&& arg0, ArgT... args) {
 
 fund_acct_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.fund_acct)
}
inline std::string* ficc_Order_Rtn::mutable_fund_acct() {
  std::string* _s = _internal_mutable_fund_acct();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.fund_acct)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_fund_acct() const {
  return fund_acct_.Get();
}
inline void ficc_Order_Rtn::_internal_set_fund_acct(const std::string& value) {
  
  fund_acct_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_fund_acct() {
  
  return fund_acct_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_fund_acct() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.fund_acct)
  return fund_acct_.Release();
}
inline void ficc_Order_Rtn::set_allocated_fund_acct(std::string* fund_acct) {
  if (fund_acct != nullptr) {
    
  } else {
    
  }
  fund_acct_.SetAllocated(fund_acct, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fund_acct_.IsDefault()) {
    fund_acct_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.fund_acct)
}

// string combino = 4;
inline void ficc_Order_Rtn::clear_combino() {
  combino_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::combino() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.combino)
  return _internal_combino();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_combino(ArgT0&& arg0, ArgT... args) {
 
 combino_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.combino)
}
inline std::string* ficc_Order_Rtn::mutable_combino() {
  std::string* _s = _internal_mutable_combino();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.combino)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_combino() const {
  return combino_.Get();
}
inline void ficc_Order_Rtn::_internal_set_combino(const std::string& value) {
  
  combino_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_combino() {
  
  return combino_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_combino() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.combino)
  return combino_.Release();
}
inline void ficc_Order_Rtn::set_allocated_combino(std::string* combino) {
  if (combino != nullptr) {
    
  } else {
    
  }
  combino_.SetAllocated(combino, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (combino_.IsDefault()) {
    combino_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.combino)
}

// string trading_day = 5;
inline void ficc_Order_Rtn::clear_trading_day() {
  trading_day_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::trading_day() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.trading_day)
  return _internal_trading_day();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_trading_day(ArgT0&& arg0, ArgT... args) {
 
 trading_day_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.trading_day)
}
inline std::string* ficc_Order_Rtn::mutable_trading_day() {
  std::string* _s = _internal_mutable_trading_day();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.trading_day)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_trading_day() const {
  return trading_day_.Get();
}
inline void ficc_Order_Rtn::_internal_set_trading_day(const std::string& value) {
  
  trading_day_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_trading_day() {
  
  return trading_day_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_trading_day() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.trading_day)
  return trading_day_.Release();
}
inline void ficc_Order_Rtn::set_allocated_trading_day(std::string* trading_day) {
  if (trading_day != nullptr) {
    
  } else {
    
  }
  trading_day_.SetAllocated(trading_day, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trading_day_.IsDefault()) {
    trading_day_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.trading_day)
}

// string ex_code = 6;
inline void ficc_Order_Rtn::clear_ex_code() {
  ex_code_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::ex_code() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.ex_code)
  return _internal_ex_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_ex_code(ArgT0&& arg0, ArgT... args) {
 
 ex_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.ex_code)
}
inline std::string* ficc_Order_Rtn::mutable_ex_code() {
  std::string* _s = _internal_mutable_ex_code();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.ex_code)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_ex_code() const {
  return ex_code_.Get();
}
inline void ficc_Order_Rtn::_internal_set_ex_code(const std::string& value) {
  
  ex_code_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_ex_code() {
  
  return ex_code_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_ex_code() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.ex_code)
  return ex_code_.Release();
}
inline void ficc_Order_Rtn::set_allocated_ex_code(std::string* ex_code) {
  if (ex_code != nullptr) {
    
  } else {
    
  }
  ex_code_.SetAllocated(ex_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ex_code_.IsDefault()) {
    ex_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.ex_code)
}

// string secu_code = 7;
inline void ficc_Order_Rtn::clear_secu_code() {
  secu_code_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::secu_code() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.secu_code)
  return _internal_secu_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_secu_code(ArgT0&& arg0, ArgT... args) {
 
 secu_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.secu_code)
}
inline std::string* ficc_Order_Rtn::mutable_secu_code() {
  std::string* _s = _internal_mutable_secu_code();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.secu_code)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_secu_code() const {
  return secu_code_.Get();
}
inline void ficc_Order_Rtn::_internal_set_secu_code(const std::string& value) {
  
  secu_code_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_secu_code() {
  
  return secu_code_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_secu_code() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.secu_code)
  return secu_code_.Release();
}
inline void ficc_Order_Rtn::set_allocated_secu_code(std::string* secu_code) {
  if (secu_code != nullptr) {
    
  } else {
    
  }
  secu_code_.SetAllocated(secu_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secu_code_.IsDefault()) {
    secu_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.secu_code)
}

// string secu_name = 8;
inline void ficc_Order_Rtn::clear_secu_name() {
  secu_name_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::secu_name() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.secu_name)
  return _internal_secu_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_secu_name(ArgT0&& arg0, ArgT... args) {
 
 secu_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.secu_name)
}
inline std::string* ficc_Order_Rtn::mutable_secu_name() {
  std::string* _s = _internal_mutable_secu_name();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.secu_name)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_secu_name() const {
  return secu_name_.Get();
}
inline void ficc_Order_Rtn::_internal_set_secu_name(const std::string& value) {
  
  secu_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_secu_name() {
  
  return secu_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_secu_name() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.secu_name)
  return secu_name_.Release();
}
inline void ficc_Order_Rtn::set_allocated_secu_name(std::string* secu_name) {
  if (secu_name != nullptr) {
    
  } else {
    
  }
  secu_name_.SetAllocated(secu_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secu_name_.IsDefault()) {
    secu_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.secu_name)
}

// string order_price_type = 9;
inline void ficc_Order_Rtn::clear_order_price_type() {
  order_price_type_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::order_price_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.order_price_type)
  return _internal_order_price_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_order_price_type(ArgT0&& arg0, ArgT... args) {
 
 order_price_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.order_price_type)
}
inline std::string* ficc_Order_Rtn::mutable_order_price_type() {
  std::string* _s = _internal_mutable_order_price_type();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.order_price_type)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_order_price_type() const {
  return order_price_type_.Get();
}
inline void ficc_Order_Rtn::_internal_set_order_price_type(const std::string& value) {
  
  order_price_type_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_order_price_type() {
  
  return order_price_type_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_order_price_type() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.order_price_type)
  return order_price_type_.Release();
}
inline void ficc_Order_Rtn::set_allocated_order_price_type(std::string* order_price_type) {
  if (order_price_type != nullptr) {
    
  } else {
    
  }
  order_price_type_.SetAllocated(order_price_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_price_type_.IsDefault()) {
    order_price_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.order_price_type)
}

// string direction = 10;
inline void ficc_Order_Rtn::clear_direction() {
  direction_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::direction() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.direction)
  return _internal_direction();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_direction(ArgT0&& arg0, ArgT... args) {
 
 direction_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.direction)
}
inline std::string* ficc_Order_Rtn::mutable_direction() {
  std::string* _s = _internal_mutable_direction();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.direction)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_direction() const {
  return direction_.Get();
}
inline void ficc_Order_Rtn::_internal_set_direction(const std::string& value) {
  
  direction_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_direction() {
  
  return direction_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_direction() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.direction)
  return direction_.Release();
}
inline void ficc_Order_Rtn::set_allocated_direction(std::string* direction) {
  if (direction != nullptr) {
    
  } else {
    
  }
  direction_.SetAllocated(direction, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (direction_.IsDefault()) {
    direction_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.direction)
}

// string offset_flag = 11;
inline void ficc_Order_Rtn::clear_offset_flag() {
  offset_flag_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::offset_flag() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.offset_flag)
  return _internal_offset_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_offset_flag(ArgT0&& arg0, ArgT... args) {
 
 offset_flag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.offset_flag)
}
inline std::string* ficc_Order_Rtn::mutable_offset_flag() {
  std::string* _s = _internal_mutable_offset_flag();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.offset_flag)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_offset_flag() const {
  return offset_flag_.Get();
}
inline void ficc_Order_Rtn::_internal_set_offset_flag(const std::string& value) {
  
  offset_flag_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_offset_flag() {
  
  return offset_flag_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_offset_flag() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.offset_flag)
  return offset_flag_.Release();
}
inline void ficc_Order_Rtn::set_allocated_offset_flag(std::string* offset_flag) {
  if (offset_flag != nullptr) {
    
  } else {
    
  }
  offset_flag_.SetAllocated(offset_flag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (offset_flag_.IsDefault()) {
    offset_flag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.offset_flag)
}

// string hedge_flag = 12;
inline void ficc_Order_Rtn::clear_hedge_flag() {
  hedge_flag_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::hedge_flag() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.hedge_flag)
  return _internal_hedge_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_hedge_flag(ArgT0&& arg0, ArgT... args) {
 
 hedge_flag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.hedge_flag)
}
inline std::string* ficc_Order_Rtn::mutable_hedge_flag() {
  std::string* _s = _internal_mutable_hedge_flag();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.hedge_flag)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_hedge_flag() const {
  return hedge_flag_.Get();
}
inline void ficc_Order_Rtn::_internal_set_hedge_flag(const std::string& value) {
  
  hedge_flag_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_hedge_flag() {
  
  return hedge_flag_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_hedge_flag() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.hedge_flag)
  return hedge_flag_.Release();
}
inline void ficc_Order_Rtn::set_allocated_hedge_flag(std::string* hedge_flag) {
  if (hedge_flag != nullptr) {
    
  } else {
    
  }
  hedge_flag_.SetAllocated(hedge_flag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hedge_flag_.IsDefault()) {
    hedge_flag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.hedge_flag)
}

// float price = 13;
inline void ficc_Order_Rtn::clear_price() {
  price_ = 0;
}
inline float ficc_Order_Rtn::_internal_price() const {
  return price_;
}
inline float ficc_Order_Rtn::price() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.price)
  return _internal_price();
}
inline void ficc_Order_Rtn::_internal_set_price(float value) {
  
  price_ = value;
}
inline void ficc_Order_Rtn::set_price(float value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.price)
}

// uint64 vol = 14;
inline void ficc_Order_Rtn::clear_vol() {
  vol_ = uint64_t{0u};
}
inline uint64_t ficc_Order_Rtn::_internal_vol() const {
  return vol_;
}
inline uint64_t ficc_Order_Rtn::vol() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.vol)
  return _internal_vol();
}
inline void ficc_Order_Rtn::_internal_set_vol(uint64_t value) {
  
  vol_ = value;
}
inline void ficc_Order_Rtn::set_vol(uint64_t value) {
  _internal_set_vol(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.vol)
}

// string time_cond = 15;
inline void ficc_Order_Rtn::clear_time_cond() {
  time_cond_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::time_cond() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.time_cond)
  return _internal_time_cond();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_time_cond(ArgT0&& arg0, ArgT... args) {
 
 time_cond_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.time_cond)
}
inline std::string* ficc_Order_Rtn::mutable_time_cond() {
  std::string* _s = _internal_mutable_time_cond();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.time_cond)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_time_cond() const {
  return time_cond_.Get();
}
inline void ficc_Order_Rtn::_internal_set_time_cond(const std::string& value) {
  
  time_cond_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_time_cond() {
  
  return time_cond_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_time_cond() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.time_cond)
  return time_cond_.Release();
}
inline void ficc_Order_Rtn::set_allocated_time_cond(std::string* time_cond) {
  if (time_cond != nullptr) {
    
  } else {
    
  }
  time_cond_.SetAllocated(time_cond, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (time_cond_.IsDefault()) {
    time_cond_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.time_cond)
}

// uint64 strategy_code = 16;
inline void ficc_Order_Rtn::clear_strategy_code() {
  strategy_code_ = uint64_t{0u};
}
inline uint64_t ficc_Order_Rtn::_internal_strategy_code() const {
  return strategy_code_;
}
inline uint64_t ficc_Order_Rtn::strategy_code() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.strategy_code)
  return _internal_strategy_code();
}
inline void ficc_Order_Rtn::_internal_set_strategy_code(uint64_t value) {
  
  strategy_code_ = value;
}
inline void ficc_Order_Rtn::set_strategy_code(uint64_t value) {
  _internal_set_strategy_code(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.strategy_code)
}

// uint32 user_id = 17;
inline void ficc_Order_Rtn::clear_user_id() {
  user_id_ = 0u;
}
inline uint32_t ficc_Order_Rtn::_internal_user_id() const {
  return user_id_;
}
inline uint32_t ficc_Order_Rtn::user_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.user_id)
  return _internal_user_id();
}
inline void ficc_Order_Rtn::_internal_set_user_id(uint32_t value) {
  
  user_id_ = value;
}
inline void ficc_Order_Rtn::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.user_id)
}

// string bilateral_id = 18;
inline void ficc_Order_Rtn::clear_bilateral_id() {
  bilateral_id_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::bilateral_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.bilateral_id)
  return _internal_bilateral_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_bilateral_id(ArgT0&& arg0, ArgT... args) {
 
 bilateral_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.bilateral_id)
}
inline std::string* ficc_Order_Rtn::mutable_bilateral_id() {
  std::string* _s = _internal_mutable_bilateral_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.bilateral_id)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_bilateral_id() const {
  return bilateral_id_.Get();
}
inline void ficc_Order_Rtn::_internal_set_bilateral_id(const std::string& value) {
  
  bilateral_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_bilateral_id() {
  
  return bilateral_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_bilateral_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.bilateral_id)
  return bilateral_id_.Release();
}
inline void ficc_Order_Rtn::set_allocated_bilateral_id(std::string* bilateral_id) {
  if (bilateral_id != nullptr) {
    
  } else {
    
  }
  bilateral_id_.SetAllocated(bilateral_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bilateral_id_.IsDefault()) {
    bilateral_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.bilateral_id)
}

// string purchase_way = 19;
inline void ficc_Order_Rtn::clear_purchase_way() {
  purchase_way_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::purchase_way() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.purchase_way)
  return _internal_purchase_way();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_purchase_way(ArgT0&& arg0, ArgT... args) {
 
 purchase_way_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.purchase_way)
}
inline std::string* ficc_Order_Rtn::mutable_purchase_way() {
  std::string* _s = _internal_mutable_purchase_way();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.purchase_way)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_purchase_way() const {
  return purchase_way_.Get();
}
inline void ficc_Order_Rtn::_internal_set_purchase_way(const std::string& value) {
  
  purchase_way_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_purchase_way() {
  
  return purchase_way_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_purchase_way() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.purchase_way)
  return purchase_way_.Release();
}
inline void ficc_Order_Rtn::set_allocated_purchase_way(std::string* purchase_way) {
  if (purchase_way != nullptr) {
    
  } else {
    
  }
  purchase_way_.SetAllocated(purchase_way, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (purchase_way_.IsDefault()) {
    purchase_way_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.purchase_way)
}

// string text = 20;
inline void ficc_Order_Rtn::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::text() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_text(ArgT0&& arg0, ArgT... args) {
 
 text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.text)
}
inline std::string* ficc_Order_Rtn::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.text)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_text() const {
  return text_.Get();
}
inline void ficc_Order_Rtn::_internal_set_text(const std::string& value) {
  
  text_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_text() {
  
  return text_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_text() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.text)
  return text_.Release();
}
inline void ficc_Order_Rtn::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault()) {
    text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.text)
}

// float ytm = 21;
inline void ficc_Order_Rtn::clear_ytm() {
  ytm_ = 0;
}
inline float ficc_Order_Rtn::_internal_ytm() const {
  return ytm_;
}
inline float ficc_Order_Rtn::ytm() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.ytm)
  return _internal_ytm();
}
inline void ficc_Order_Rtn::_internal_set_ytm(float value) {
  
  ytm_ = value;
}
inline void ficc_Order_Rtn::set_ytm(float value) {
  _internal_set_ytm(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.ytm)
}

// float strike_yeild = 22;
inline void ficc_Order_Rtn::clear_strike_yeild() {
  strike_yeild_ = 0;
}
inline float ficc_Order_Rtn::_internal_strike_yeild() const {
  return strike_yeild_;
}
inline float ficc_Order_Rtn::strike_yeild() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.strike_yeild)
  return _internal_strike_yeild();
}
inline void ficc_Order_Rtn::_internal_set_strike_yeild(float value) {
  
  strike_yeild_ = value;
}
inline void ficc_Order_Rtn::set_strike_yeild(float value) {
  _internal_set_strike_yeild(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.strike_yeild)
}

// uint64 quote_type = 23;
inline void ficc_Order_Rtn::clear_quote_type() {
  quote_type_ = uint64_t{0u};
}
inline uint64_t ficc_Order_Rtn::_internal_quote_type() const {
  return quote_type_;
}
inline uint64_t ficc_Order_Rtn::quote_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.quote_type)
  return _internal_quote_type();
}
inline void ficc_Order_Rtn::_internal_set_quote_type(uint64_t value) {
  
  quote_type_ = value;
}
inline void ficc_Order_Rtn::set_quote_type(uint64_t value) {
  _internal_set_quote_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.quote_type)
}

// uint64 max_floor = 24;
inline void ficc_Order_Rtn::clear_max_floor() {
  max_floor_ = uint64_t{0u};
}
inline uint64_t ficc_Order_Rtn::_internal_max_floor() const {
  return max_floor_;
}
inline uint64_t ficc_Order_Rtn::max_floor() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.max_floor)
  return _internal_max_floor();
}
inline void ficc_Order_Rtn::_internal_set_max_floor(uint64_t value) {
  
  max_floor_ = value;
}
inline void ficc_Order_Rtn::set_max_floor(uint64_t value) {
  _internal_set_max_floor(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.max_floor)
}

// uint64 min_tick_size = 25;
inline void ficc_Order_Rtn::clear_min_tick_size() {
  min_tick_size_ = uint64_t{0u};
}
inline uint64_t ficc_Order_Rtn::_internal_min_tick_size() const {
  return min_tick_size_;
}
inline uint64_t ficc_Order_Rtn::min_tick_size() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.min_tick_size)
  return _internal_min_tick_size();
}
inline void ficc_Order_Rtn::_internal_set_min_tick_size(uint64_t value) {
  
  min_tick_size_ = value;
}
inline void ficc_Order_Rtn::set_min_tick_size(uint64_t value) {
  _internal_set_min_tick_size(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.min_tick_size)
}

// uint64 settle_type = 26;
inline void ficc_Order_Rtn::clear_settle_type() {
  settle_type_ = uint64_t{0u};
}
inline uint64_t ficc_Order_Rtn::_internal_settle_type() const {
  return settle_type_;
}
inline uint64_t ficc_Order_Rtn::settle_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.settle_type)
  return _internal_settle_type();
}
inline void ficc_Order_Rtn::_internal_set_settle_type(uint64_t value) {
  
  settle_type_ = value;
}
inline void ficc_Order_Rtn::set_settle_type(uint64_t value) {
  _internal_set_settle_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.settle_type)
}

// uint64 match_type = 27;
inline void ficc_Order_Rtn::clear_match_type() {
  match_type_ = uint64_t{0u};
}
inline uint64_t ficc_Order_Rtn::_internal_match_type() const {
  return match_type_;
}
inline uint64_t ficc_Order_Rtn::match_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.match_type)
  return _internal_match_type();
}
inline void ficc_Order_Rtn::_internal_set_match_type(uint64_t value) {
  
  match_type_ = value;
}
inline void ficc_Order_Rtn::set_match_type(uint64_t value) {
  _internal_set_match_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.match_type)
}

// uint64 delivery_type = 28;
inline void ficc_Order_Rtn::clear_delivery_type() {
  delivery_type_ = uint64_t{0u};
}
inline uint64_t ficc_Order_Rtn::_internal_delivery_type() const {
  return delivery_type_;
}
inline uint64_t ficc_Order_Rtn::delivery_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.delivery_type)
  return _internal_delivery_type();
}
inline void ficc_Order_Rtn::_internal_set_delivery_type(uint64_t value) {
  
  delivery_type_ = value;
}
inline void ficc_Order_Rtn::set_delivery_type(uint64_t value) {
  _internal_set_delivery_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.delivery_type)
}

// uint64 clearing_method = 29;
inline void ficc_Order_Rtn::clear_clearing_method() {
  clearing_method_ = uint64_t{0u};
}
inline uint64_t ficc_Order_Rtn::_internal_clearing_method() const {
  return clearing_method_;
}
inline uint64_t ficc_Order_Rtn::clearing_method() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.clearing_method)
  return _internal_clearing_method();
}
inline void ficc_Order_Rtn::_internal_set_clearing_method(uint64_t value) {
  
  clearing_method_ = value;
}
inline void ficc_Order_Rtn::set_clearing_method(uint64_t value) {
  _internal_set_clearing_method(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.clearing_method)
}

// string quote_id = 30;
inline void ficc_Order_Rtn::clear_quote_id() {
  quote_id_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::quote_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.quote_id)
  return _internal_quote_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_quote_id(ArgT0&& arg0, ArgT... args) {
 
 quote_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.quote_id)
}
inline std::string* ficc_Order_Rtn::mutable_quote_id() {
  std::string* _s = _internal_mutable_quote_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.quote_id)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_quote_id() const {
  return quote_id_.Get();
}
inline void ficc_Order_Rtn::_internal_set_quote_id(const std::string& value) {
  
  quote_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_quote_id() {
  
  return quote_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_quote_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.quote_id)
  return quote_id_.Release();
}
inline void ficc_Order_Rtn::set_allocated_quote_id(std::string* quote_id) {
  if (quote_id != nullptr) {
    
  } else {
    
  }
  quote_id_.SetAllocated(quote_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (quote_id_.IsDefault()) {
    quote_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.quote_id)
}

// string valid_until_time = 31;
inline void ficc_Order_Rtn::clear_valid_until_time() {
  valid_until_time_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::valid_until_time() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.valid_until_time)
  return _internal_valid_until_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_valid_until_time(ArgT0&& arg0, ArgT... args) {
 
 valid_until_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.valid_until_time)
}
inline std::string* ficc_Order_Rtn::mutable_valid_until_time() {
  std::string* _s = _internal_mutable_valid_until_time();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.valid_until_time)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_valid_until_time() const {
  return valid_until_time_.Get();
}
inline void ficc_Order_Rtn::_internal_set_valid_until_time(const std::string& value) {
  
  valid_until_time_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_valid_until_time() {
  
  return valid_until_time_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_valid_until_time() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.valid_until_time)
  return valid_until_time_.Release();
}
inline void ficc_Order_Rtn::set_allocated_valid_until_time(std::string* valid_until_time) {
  if (valid_until_time != nullptr) {
    
  } else {
    
  }
  valid_until_time_.SetAllocated(valid_until_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (valid_until_time_.IsDefault()) {
    valid_until_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.valid_until_time)
}

// string mdentry_time = 32;
inline void ficc_Order_Rtn::clear_mdentry_time() {
  mdentry_time_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::mdentry_time() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.mdentry_time)
  return _internal_mdentry_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_mdentry_time(ArgT0&& arg0, ArgT... args) {
 
 mdentry_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.mdentry_time)
}
inline std::string* ficc_Order_Rtn::mutable_mdentry_time() {
  std::string* _s = _internal_mutable_mdentry_time();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.mdentry_time)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_mdentry_time() const {
  return mdentry_time_.Get();
}
inline void ficc_Order_Rtn::_internal_set_mdentry_time(const std::string& value) {
  
  mdentry_time_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_mdentry_time() {
  
  return mdentry_time_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_mdentry_time() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.mdentry_time)
  return mdentry_time_.Release();
}
inline void ficc_Order_Rtn::set_allocated_mdentry_time(std::string* mdentry_time) {
  if (mdentry_time != nullptr) {
    
  } else {
    
  }
  mdentry_time_.SetAllocated(mdentry_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mdentry_time_.IsDefault()) {
    mdentry_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.mdentry_time)
}

// string client_ref_id = 33;
inline void ficc_Order_Rtn::clear_client_ref_id() {
  client_ref_id_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::client_ref_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.client_ref_id)
  return _internal_client_ref_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_client_ref_id(ArgT0&& arg0, ArgT... args) {
 
 client_ref_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.client_ref_id)
}
inline std::string* ficc_Order_Rtn::mutable_client_ref_id() {
  std::string* _s = _internal_mutable_client_ref_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.client_ref_id)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_client_ref_id() const {
  return client_ref_id_.Get();
}
inline void ficc_Order_Rtn::_internal_set_client_ref_id(const std::string& value) {
  
  client_ref_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_client_ref_id() {
  
  return client_ref_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_client_ref_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.client_ref_id)
  return client_ref_id_.Release();
}
inline void ficc_Order_Rtn::set_allocated_client_ref_id(std::string* client_ref_id) {
  if (client_ref_id != nullptr) {
    
  } else {
    
  }
  client_ref_id_.SetAllocated(client_ref_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_ref_id_.IsDefault()) {
    client_ref_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.client_ref_id)
}

// uint64 routing_type = 34;
inline void ficc_Order_Rtn::clear_routing_type() {
  routing_type_ = uint64_t{0u};
}
inline uint64_t ficc_Order_Rtn::_internal_routing_type() const {
  return routing_type_;
}
inline uint64_t ficc_Order_Rtn::routing_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.routing_type)
  return _internal_routing_type();
}
inline void ficc_Order_Rtn::_internal_set_routing_type(uint64_t value) {
  
  routing_type_ = value;
}
inline void ficc_Order_Rtn::set_routing_type(uint64_t value) {
  _internal_set_routing_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.routing_type)
}

// uint64 market_indicator = 35;
inline void ficc_Order_Rtn::clear_market_indicator() {
  market_indicator_ = uint64_t{0u};
}
inline uint64_t ficc_Order_Rtn::_internal_market_indicator() const {
  return market_indicator_;
}
inline uint64_t ficc_Order_Rtn::market_indicator() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.market_indicator)
  return _internal_market_indicator();
}
inline void ficc_Order_Rtn::_internal_set_market_indicator(uint64_t value) {
  
  market_indicator_ = value;
}
inline void ficc_Order_Rtn::set_market_indicator(uint64_t value) {
  _internal_set_market_indicator(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.market_indicator)
}

// uint64 realtime_undertake_flag = 36;
inline void ficc_Order_Rtn::clear_realtime_undertake_flag() {
  realtime_undertake_flag_ = uint64_t{0u};
}
inline uint64_t ficc_Order_Rtn::_internal_realtime_undertake_flag() const {
  return realtime_undertake_flag_;
}
inline uint64_t ficc_Order_Rtn::realtime_undertake_flag() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.realtime_undertake_flag)
  return _internal_realtime_undertake_flag();
}
inline void ficc_Order_Rtn::_internal_set_realtime_undertake_flag(uint64_t value) {
  
  realtime_undertake_flag_ = value;
}
inline void ficc_Order_Rtn::set_realtime_undertake_flag(uint64_t value) {
  _internal_set_realtime_undertake_flag(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.realtime_undertake_flag)
}

// uint64 subject_party_type = 37;
inline void ficc_Order_Rtn::clear_subject_party_type() {
  subject_party_type_ = uint64_t{0u};
}
inline uint64_t ficc_Order_Rtn::_internal_subject_party_type() const {
  return subject_party_type_;
}
inline uint64_t ficc_Order_Rtn::subject_party_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.subject_party_type)
  return _internal_subject_party_type();
}
inline void ficc_Order_Rtn::_internal_set_subject_party_type(uint64_t value) {
  
  subject_party_type_ = value;
}
inline void ficc_Order_Rtn::set_subject_party_type(uint64_t value) {
  _internal_set_subject_party_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.subject_party_type)
}

// string order_inner_id = 38;
inline void ficc_Order_Rtn::clear_order_inner_id() {
  order_inner_id_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::order_inner_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.order_inner_id)
  return _internal_order_inner_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_order_inner_id(ArgT0&& arg0, ArgT... args) {
 
 order_inner_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.order_inner_id)
}
inline std::string* ficc_Order_Rtn::mutable_order_inner_id() {
  std::string* _s = _internal_mutable_order_inner_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.order_inner_id)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_order_inner_id() const {
  return order_inner_id_.Get();
}
inline void ficc_Order_Rtn::_internal_set_order_inner_id(const std::string& value) {
  
  order_inner_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_order_inner_id() {
  
  return order_inner_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_order_inner_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.order_inner_id)
  return order_inner_id_.Release();
}
inline void ficc_Order_Rtn::set_allocated_order_inner_id(std::string* order_inner_id) {
  if (order_inner_id != nullptr) {
    
  } else {
    
  }
  order_inner_id_.SetAllocated(order_inner_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_inner_id_.IsDefault()) {
    order_inner_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.order_inner_id)
}

// string order_sys_id = 39;
inline void ficc_Order_Rtn::clear_order_sys_id() {
  order_sys_id_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::order_sys_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.order_sys_id)
  return _internal_order_sys_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_order_sys_id(ArgT0&& arg0, ArgT... args) {
 
 order_sys_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.order_sys_id)
}
inline std::string* ficc_Order_Rtn::mutable_order_sys_id() {
  std::string* _s = _internal_mutable_order_sys_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.order_sys_id)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_order_sys_id() const {
  return order_sys_id_.Get();
}
inline void ficc_Order_Rtn::_internal_set_order_sys_id(const std::string& value) {
  
  order_sys_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_order_sys_id() {
  
  return order_sys_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_order_sys_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.order_sys_id)
  return order_sys_id_.Release();
}
inline void ficc_Order_Rtn::set_allocated_order_sys_id(std::string* order_sys_id) {
  if (order_sys_id != nullptr) {
    
  } else {
    
  }
  order_sys_id_.SetAllocated(order_sys_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_sys_id_.IsDefault()) {
    order_sys_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.order_sys_id)
}

// string insert_time = 40;
inline void ficc_Order_Rtn::clear_insert_time() {
  insert_time_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::insert_time() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.insert_time)
  return _internal_insert_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_insert_time(ArgT0&& arg0, ArgT... args) {
 
 insert_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.insert_time)
}
inline std::string* ficc_Order_Rtn::mutable_insert_time() {
  std::string* _s = _internal_mutable_insert_time();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.insert_time)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_insert_time() const {
  return insert_time_.Get();
}
inline void ficc_Order_Rtn::_internal_set_insert_time(const std::string& value) {
  
  insert_time_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_insert_time() {
  
  return insert_time_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_insert_time() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.insert_time)
  return insert_time_.Release();
}
inline void ficc_Order_Rtn::set_allocated_insert_time(std::string* insert_time) {
  if (insert_time != nullptr) {
    
  } else {
    
  }
  insert_time_.SetAllocated(insert_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (insert_time_.IsDefault()) {
    insert_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.insert_time)
}

// float trade_price = 41;
inline void ficc_Order_Rtn::clear_trade_price() {
  trade_price_ = 0;
}
inline float ficc_Order_Rtn::_internal_trade_price() const {
  return trade_price_;
}
inline float ficc_Order_Rtn::trade_price() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.trade_price)
  return _internal_trade_price();
}
inline void ficc_Order_Rtn::_internal_set_trade_price(float value) {
  
  trade_price_ = value;
}
inline void ficc_Order_Rtn::set_trade_price(float value) {
  _internal_set_trade_price(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.trade_price)
}

// float avg_trade_price = 42;
inline void ficc_Order_Rtn::clear_avg_trade_price() {
  avg_trade_price_ = 0;
}
inline float ficc_Order_Rtn::_internal_avg_trade_price() const {
  return avg_trade_price_;
}
inline float ficc_Order_Rtn::avg_trade_price() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.avg_trade_price)
  return _internal_avg_trade_price();
}
inline void ficc_Order_Rtn::_internal_set_avg_trade_price(float value) {
  
  avg_trade_price_ = value;
}
inline void ficc_Order_Rtn::set_avg_trade_price(float value) {
  _internal_set_avg_trade_price(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.avg_trade_price)
}

// uint64 vol_traded = 43;
inline void ficc_Order_Rtn::clear_vol_traded() {
  vol_traded_ = uint64_t{0u};
}
inline uint64_t ficc_Order_Rtn::_internal_vol_traded() const {
  return vol_traded_;
}
inline uint64_t ficc_Order_Rtn::vol_traded() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.vol_traded)
  return _internal_vol_traded();
}
inline void ficc_Order_Rtn::_internal_set_vol_traded(uint64_t value) {
  
  vol_traded_ = value;
}
inline void ficc_Order_Rtn::set_vol_traded(uint64_t value) {
  _internal_set_vol_traded(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.vol_traded)
}

// uint64 vol_total = 44;
inline void ficc_Order_Rtn::clear_vol_total() {
  vol_total_ = uint64_t{0u};
}
inline uint64_t ficc_Order_Rtn::_internal_vol_total() const {
  return vol_total_;
}
inline uint64_t ficc_Order_Rtn::vol_total() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.vol_total)
  return _internal_vol_total();
}
inline void ficc_Order_Rtn::_internal_set_vol_total(uint64_t value) {
  
  vol_total_ = value;
}
inline void ficc_Order_Rtn::set_vol_total(uint64_t value) {
  _internal_set_vol_total(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.vol_total)
}

// string order_submit_status = 45;
inline void ficc_Order_Rtn::clear_order_submit_status() {
  order_submit_status_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::order_submit_status() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.order_submit_status)
  return _internal_order_submit_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_order_submit_status(ArgT0&& arg0, ArgT... args) {
 
 order_submit_status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.order_submit_status)
}
inline std::string* ficc_Order_Rtn::mutable_order_submit_status() {
  std::string* _s = _internal_mutable_order_submit_status();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.order_submit_status)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_order_submit_status() const {
  return order_submit_status_.Get();
}
inline void ficc_Order_Rtn::_internal_set_order_submit_status(const std::string& value) {
  
  order_submit_status_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_order_submit_status() {
  
  return order_submit_status_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_order_submit_status() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.order_submit_status)
  return order_submit_status_.Release();
}
inline void ficc_Order_Rtn::set_allocated_order_submit_status(std::string* order_submit_status) {
  if (order_submit_status != nullptr) {
    
  } else {
    
  }
  order_submit_status_.SetAllocated(order_submit_status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_submit_status_.IsDefault()) {
    order_submit_status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.order_submit_status)
}

// string order_status = 46;
inline void ficc_Order_Rtn::clear_order_status() {
  order_status_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::order_status() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.order_status)
  return _internal_order_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_order_status(ArgT0&& arg0, ArgT... args) {
 
 order_status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.order_status)
}
inline std::string* ficc_Order_Rtn::mutable_order_status() {
  std::string* _s = _internal_mutable_order_status();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.order_status)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_order_status() const {
  return order_status_.Get();
}
inline void ficc_Order_Rtn::_internal_set_order_status(const std::string& value) {
  
  order_status_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_order_status() {
  
  return order_status_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_order_status() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.order_status)
  return order_status_.Release();
}
inline void ficc_Order_Rtn::set_allocated_order_status(std::string* order_status) {
  if (order_status != nullptr) {
    
  } else {
    
  }
  order_status_.SetAllocated(order_status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_status_.IsDefault()) {
    order_status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.order_status)
}

// string trade_date = 47;
inline void ficc_Order_Rtn::clear_trade_date() {
  trade_date_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::trade_date() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.trade_date)
  return _internal_trade_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_trade_date(ArgT0&& arg0, ArgT... args) {
 
 trade_date_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.trade_date)
}
inline std::string* ficc_Order_Rtn::mutable_trade_date() {
  std::string* _s = _internal_mutable_trade_date();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.trade_date)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_trade_date() const {
  return trade_date_.Get();
}
inline void ficc_Order_Rtn::_internal_set_trade_date(const std::string& value) {
  
  trade_date_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_trade_date() {
  
  return trade_date_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_trade_date() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.trade_date)
  return trade_date_.Release();
}
inline void ficc_Order_Rtn::set_allocated_trade_date(std::string* trade_date) {
  if (trade_date != nullptr) {
    
  } else {
    
  }
  trade_date_.SetAllocated(trade_date, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trade_date_.IsDefault()) {
    trade_date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.trade_date)
}

// string update_date = 48;
inline void ficc_Order_Rtn::clear_update_date() {
  update_date_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::update_date() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.update_date)
  return _internal_update_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_update_date(ArgT0&& arg0, ArgT... args) {
 
 update_date_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.update_date)
}
inline std::string* ficc_Order_Rtn::mutable_update_date() {
  std::string* _s = _internal_mutable_update_date();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.update_date)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_update_date() const {
  return update_date_.Get();
}
inline void ficc_Order_Rtn::_internal_set_update_date(const std::string& value) {
  
  update_date_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_update_date() {
  
  return update_date_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_update_date() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.update_date)
  return update_date_.Release();
}
inline void ficc_Order_Rtn::set_allocated_update_date(std::string* update_date) {
  if (update_date != nullptr) {
    
  } else {
    
  }
  update_date_.SetAllocated(update_date, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (update_date_.IsDefault()) {
    update_date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.update_date)
}

// string update_time = 49;
inline void ficc_Order_Rtn::clear_update_time() {
  update_time_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::update_time() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.update_time)
  return _internal_update_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_update_time(ArgT0&& arg0, ArgT... args) {
 
 update_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.update_time)
}
inline std::string* ficc_Order_Rtn::mutable_update_time() {
  std::string* _s = _internal_mutable_update_time();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.update_time)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_update_time() const {
  return update_time_.Get();
}
inline void ficc_Order_Rtn::_internal_set_update_time(const std::string& value) {
  
  update_time_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_update_time() {
  
  return update_time_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_update_time() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.update_time)
  return update_time_.Release();
}
inline void ficc_Order_Rtn::set_allocated_update_time(std::string* update_time) {
  if (update_time != nullptr) {
    
  } else {
    
  }
  update_time_.SetAllocated(update_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (update_time_.IsDefault()) {
    update_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.update_time)
}

// string cancel_time = 50;
inline void ficc_Order_Rtn::clear_cancel_time() {
  cancel_time_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::cancel_time() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.cancel_time)
  return _internal_cancel_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_cancel_time(ArgT0&& arg0, ArgT... args) {
 
 cancel_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.cancel_time)
}
inline std::string* ficc_Order_Rtn::mutable_cancel_time() {
  std::string* _s = _internal_mutable_cancel_time();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.cancel_time)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_cancel_time() const {
  return cancel_time_.Get();
}
inline void ficc_Order_Rtn::_internal_set_cancel_time(const std::string& value) {
  
  cancel_time_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_cancel_time() {
  
  return cancel_time_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_cancel_time() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.cancel_time)
  return cancel_time_.Release();
}
inline void ficc_Order_Rtn::set_allocated_cancel_time(std::string* cancel_time) {
  if (cancel_time != nullptr) {
    
  } else {
    
  }
  cancel_time_.SetAllocated(cancel_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cancel_time_.IsDefault()) {
    cancel_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.cancel_time)
}

// uint64 ret_code = 51;
inline void ficc_Order_Rtn::clear_ret_code() {
  ret_code_ = uint64_t{0u};
}
inline uint64_t ficc_Order_Rtn::_internal_ret_code() const {
  return ret_code_;
}
inline uint64_t ficc_Order_Rtn::ret_code() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.ret_code)
  return _internal_ret_code();
}
inline void ficc_Order_Rtn::_internal_set_ret_code(uint64_t value) {
  
  ret_code_ = value;
}
inline void ficc_Order_Rtn::set_ret_code(uint64_t value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.ret_code)
}

// string ret_msg = 52;
inline void ficc_Order_Rtn::clear_ret_msg() {
  ret_msg_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::ret_msg() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.ret_msg)
  return _internal_ret_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_ret_msg(ArgT0&& arg0, ArgT... args) {
 
 ret_msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.ret_msg)
}
inline std::string* ficc_Order_Rtn::mutable_ret_msg() {
  std::string* _s = _internal_mutable_ret_msg();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.ret_msg)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_ret_msg() const {
  return ret_msg_.Get();
}
inline void ficc_Order_Rtn::_internal_set_ret_msg(const std::string& value) {
  
  ret_msg_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_ret_msg() {
  
  return ret_msg_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_ret_msg() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.ret_msg)
  return ret_msg_.Release();
}
inline void ficc_Order_Rtn::set_allocated_ret_msg(std::string* ret_msg) {
  if (ret_msg != nullptr) {
    
  } else {
    
  }
  ret_msg_.SetAllocated(ret_msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ret_msg_.IsDefault()) {
    ret_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.ret_msg)
}

// uint64 settlement_id = 53;
inline void ficc_Order_Rtn::clear_settlement_id() {
  settlement_id_ = uint64_t{0u};
}
inline uint64_t ficc_Order_Rtn::_internal_settlement_id() const {
  return settlement_id_;
}
inline uint64_t ficc_Order_Rtn::settlement_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.settlement_id)
  return _internal_settlement_id();
}
inline void ficc_Order_Rtn::_internal_set_settlement_id(uint64_t value) {
  
  settlement_id_ = value;
}
inline void ficc_Order_Rtn::set_settlement_id(uint64_t value) {
  _internal_set_settlement_id(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.settlement_id)
}

// string order_source = 54;
inline void ficc_Order_Rtn::clear_order_source() {
  order_source_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::order_source() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.order_source)
  return _internal_order_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_order_source(ArgT0&& arg0, ArgT... args) {
 
 order_source_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.order_source)
}
inline std::string* ficc_Order_Rtn::mutable_order_source() {
  std::string* _s = _internal_mutable_order_source();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.order_source)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_order_source() const {
  return order_source_.Get();
}
inline void ficc_Order_Rtn::_internal_set_order_source(const std::string& value) {
  
  order_source_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_order_source() {
  
  return order_source_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_order_source() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.order_source)
  return order_source_.Release();
}
inline void ficc_Order_Rtn::set_allocated_order_source(std::string* order_source) {
  if (order_source != nullptr) {
    
  } else {
    
  }
  order_source_.SetAllocated(order_source, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_source_.IsDefault()) {
    order_source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.order_source)
}

// string client_id = 55;
inline void ficc_Order_Rtn::clear_client_id() {
  client_id_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::client_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.client_id)
  return _internal_client_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_client_id(ArgT0&& arg0, ArgT... args) {
 
 client_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.client_id)
}
inline std::string* ficc_Order_Rtn::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.client_id)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_client_id() const {
  return client_id_.Get();
}
inline void ficc_Order_Rtn::_internal_set_client_id(const std::string& value) {
  
  client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_client_id() {
  
  return client_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_client_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.client_id)
  return client_id_.Release();
}
inline void ficc_Order_Rtn::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocated(client_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_id_.IsDefault()) {
    client_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.client_id)
}

// string reserver1 = 56;
inline void ficc_Order_Rtn::clear_reserver1() {
  reserver1_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::reserver1() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.reserver1)
  return _internal_reserver1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_reserver1(ArgT0&& arg0, ArgT... args) {
 
 reserver1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.reserver1)
}
inline std::string* ficc_Order_Rtn::mutable_reserver1() {
  std::string* _s = _internal_mutable_reserver1();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.reserver1)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_reserver1() const {
  return reserver1_.Get();
}
inline void ficc_Order_Rtn::_internal_set_reserver1(const std::string& value) {
  
  reserver1_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_reserver1() {
  
  return reserver1_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_reserver1() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.reserver1)
  return reserver1_.Release();
}
inline void ficc_Order_Rtn::set_allocated_reserver1(std::string* reserver1) {
  if (reserver1 != nullptr) {
    
  } else {
    
  }
  reserver1_.SetAllocated(reserver1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reserver1_.IsDefault()) {
    reserver1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.reserver1)
}

// string reserver2 = 57;
inline void ficc_Order_Rtn::clear_reserver2() {
  reserver2_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::reserver2() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.reserver2)
  return _internal_reserver2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_reserver2(ArgT0&& arg0, ArgT... args) {
 
 reserver2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.reserver2)
}
inline std::string* ficc_Order_Rtn::mutable_reserver2() {
  std::string* _s = _internal_mutable_reserver2();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.reserver2)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_reserver2() const {
  return reserver2_.Get();
}
inline void ficc_Order_Rtn::_internal_set_reserver2(const std::string& value) {
  
  reserver2_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_reserver2() {
  
  return reserver2_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_reserver2() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.reserver2)
  return reserver2_.Release();
}
inline void ficc_Order_Rtn::set_allocated_reserver2(std::string* reserver2) {
  if (reserver2 != nullptr) {
    
  } else {
    
  }
  reserver2_.SetAllocated(reserver2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reserver2_.IsDefault()) {
    reserver2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.reserver2)
}

// string reserver3 = 58;
inline void ficc_Order_Rtn::clear_reserver3() {
  reserver3_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::reserver3() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.reserver3)
  return _internal_reserver3();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_reserver3(ArgT0&& arg0, ArgT... args) {
 
 reserver3_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.reserver3)
}
inline std::string* ficc_Order_Rtn::mutable_reserver3() {
  std::string* _s = _internal_mutable_reserver3();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.reserver3)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_reserver3() const {
  return reserver3_.Get();
}
inline void ficc_Order_Rtn::_internal_set_reserver3(const std::string& value) {
  
  reserver3_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_reserver3() {
  
  return reserver3_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_reserver3() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.reserver3)
  return reserver3_.Release();
}
inline void ficc_Order_Rtn::set_allocated_reserver3(std::string* reserver3) {
  if (reserver3 != nullptr) {
    
  } else {
    
  }
  reserver3_.SetAllocated(reserver3, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reserver3_.IsDefault()) {
    reserver3_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.reserver3)
}

// string reserver4 = 59;
inline void ficc_Order_Rtn::clear_reserver4() {
  reserver4_.ClearToEmpty();
}
inline const std::string& ficc_Order_Rtn::reserver4() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.reserver4)
  return _internal_reserver4();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Order_Rtn::set_reserver4(ArgT0&& arg0, ArgT... args) {
 
 reserver4_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.reserver4)
}
inline std::string* ficc_Order_Rtn::mutable_reserver4() {
  std::string* _s = _internal_mutable_reserver4();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Order_Rtn.reserver4)
  return _s;
}
inline const std::string& ficc_Order_Rtn::_internal_reserver4() const {
  return reserver4_.Get();
}
inline void ficc_Order_Rtn::_internal_set_reserver4(const std::string& value) {
  
  reserver4_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::_internal_mutable_reserver4() {
  
  return reserver4_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Order_Rtn::release_reserver4() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Order_Rtn.reserver4)
  return reserver4_.Release();
}
inline void ficc_Order_Rtn::set_allocated_reserver4(std::string* reserver4) {
  if (reserver4 != nullptr) {
    
  } else {
    
  }
  reserver4_.SetAllocated(reserver4, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reserver4_.IsDefault()) {
    reserver4_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Order_Rtn.reserver4)
}

// uint32 sequence_no = 60;
inline void ficc_Order_Rtn::clear_sequence_no() {
  sequence_no_ = 0u;
}
inline uint32_t ficc_Order_Rtn::_internal_sequence_no() const {
  return sequence_no_;
}
inline uint32_t ficc_Order_Rtn::sequence_no() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Order_Rtn.sequence_no)
  return _internal_sequence_no();
}
inline void ficc_Order_Rtn::_internal_set_sequence_no(uint32_t value) {
  
  sequence_no_ = value;
}
inline void ficc_Order_Rtn::set_sequence_no(uint32_t value) {
  _internal_set_sequence_no(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Order_Rtn.sequence_no)
}

// -------------------------------------------------------------------

// ficc_BilateralOrder_Req

// .message_head.head head = 1;
inline bool ficc_BilateralOrder_Req::_internal_has_head() const {
  return this != internal_default_instance() && head_ != nullptr;
}
inline bool ficc_BilateralOrder_Req::has_head() const {
  return _internal_has_head();
}
inline const ::message_head::head& ficc_BilateralOrder_Req::_internal_head() const {
  const ::message_head::head* p = head_;
  return p != nullptr ? *p : reinterpret_cast<const ::message_head::head&>(
      ::message_head::_head_default_instance_);
}
inline const ::message_head::head& ficc_BilateralOrder_Req::head() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Req.head)
  return _internal_head();
}
inline void ficc_BilateralOrder_Req::unsafe_arena_set_allocated_head(
    ::message_head::head* head) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ficc_message.ficc_BilateralOrder_Req.head)
}
inline ::message_head::head* ficc_BilateralOrder_Req::release_head() {
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message_head::head* ficc_BilateralOrder_Req::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Req.head)
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
  return temp;
}
inline ::message_head::head* ficc_BilateralOrder_Req::_internal_mutable_head() {
  
  if (head_ == nullptr) {
    auto* p = CreateMaybeMessage<::message_head::head>(GetArenaForAllocation());
    head_ = p;
  }
  return head_;
}
inline ::message_head::head* ficc_BilateralOrder_Req::mutable_head() {
  ::message_head::head* _msg = _internal_mutable_head();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Req.head)
  return _msg;
}
inline void ficc_BilateralOrder_Req::set_allocated_head(::message_head::head* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head));
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Req.head)
}

// string trade_acct = 2;
inline void ficc_BilateralOrder_Req::clear_trade_acct() {
  trade_acct_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Req::trade_acct() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Req.trade_acct)
  return _internal_trade_acct();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Req::set_trade_acct(ArgT0&& arg0, ArgT... args) {
 
 trade_acct_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Req.trade_acct)
}
inline std::string* ficc_BilateralOrder_Req::mutable_trade_acct() {
  std::string* _s = _internal_mutable_trade_acct();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Req.trade_acct)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Req::_internal_trade_acct() const {
  return trade_acct_.Get();
}
inline void ficc_BilateralOrder_Req::_internal_set_trade_acct(const std::string& value) {
  
  trade_acct_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Req::_internal_mutable_trade_acct() {
  
  return trade_acct_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Req::release_trade_acct() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Req.trade_acct)
  return trade_acct_.Release();
}
inline void ficc_BilateralOrder_Req::set_allocated_trade_acct(std::string* trade_acct) {
  if (trade_acct != nullptr) {
    
  } else {
    
  }
  trade_acct_.SetAllocated(trade_acct, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trade_acct_.IsDefault()) {
    trade_acct_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Req.trade_acct)
}

// string secu_code = 3;
inline void ficc_BilateralOrder_Req::clear_secu_code() {
  secu_code_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Req::secu_code() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Req.secu_code)
  return _internal_secu_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Req::set_secu_code(ArgT0&& arg0, ArgT... args) {
 
 secu_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Req.secu_code)
}
inline std::string* ficc_BilateralOrder_Req::mutable_secu_code() {
  std::string* _s = _internal_mutable_secu_code();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Req.secu_code)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Req::_internal_secu_code() const {
  return secu_code_.Get();
}
inline void ficc_BilateralOrder_Req::_internal_set_secu_code(const std::string& value) {
  
  secu_code_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Req::_internal_mutable_secu_code() {
  
  return secu_code_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Req::release_secu_code() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Req.secu_code)
  return secu_code_.Release();
}
inline void ficc_BilateralOrder_Req::set_allocated_secu_code(std::string* secu_code) {
  if (secu_code != nullptr) {
    
  } else {
    
  }
  secu_code_.SetAllocated(secu_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secu_code_.IsDefault()) {
    secu_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Req.secu_code)
}

// string order_price_type = 4;
inline void ficc_BilateralOrder_Req::clear_order_price_type() {
  order_price_type_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Req::order_price_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Req.order_price_type)
  return _internal_order_price_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Req::set_order_price_type(ArgT0&& arg0, ArgT... args) {
 
 order_price_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Req.order_price_type)
}
inline std::string* ficc_BilateralOrder_Req::mutable_order_price_type() {
  std::string* _s = _internal_mutable_order_price_type();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Req.order_price_type)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Req::_internal_order_price_type() const {
  return order_price_type_.Get();
}
inline void ficc_BilateralOrder_Req::_internal_set_order_price_type(const std::string& value) {
  
  order_price_type_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Req::_internal_mutable_order_price_type() {
  
  return order_price_type_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Req::release_order_price_type() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Req.order_price_type)
  return order_price_type_.Release();
}
inline void ficc_BilateralOrder_Req::set_allocated_order_price_type(std::string* order_price_type) {
  if (order_price_type != nullptr) {
    
  } else {
    
  }
  order_price_type_.SetAllocated(order_price_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_price_type_.IsDefault()) {
    order_price_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Req.order_price_type)
}

// float bid_price = 5;
inline void ficc_BilateralOrder_Req::clear_bid_price() {
  bid_price_ = 0;
}
inline float ficc_BilateralOrder_Req::_internal_bid_price() const {
  return bid_price_;
}
inline float ficc_BilateralOrder_Req::bid_price() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Req.bid_price)
  return _internal_bid_price();
}
inline void ficc_BilateralOrder_Req::_internal_set_bid_price(float value) {
  
  bid_price_ = value;
}
inline void ficc_BilateralOrder_Req::set_bid_price(float value) {
  _internal_set_bid_price(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Req.bid_price)
}

// uint64 bid_vol = 6;
inline void ficc_BilateralOrder_Req::clear_bid_vol() {
  bid_vol_ = uint64_t{0u};
}
inline uint64_t ficc_BilateralOrder_Req::_internal_bid_vol() const {
  return bid_vol_;
}
inline uint64_t ficc_BilateralOrder_Req::bid_vol() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Req.bid_vol)
  return _internal_bid_vol();
}
inline void ficc_BilateralOrder_Req::_internal_set_bid_vol(uint64_t value) {
  
  bid_vol_ = value;
}
inline void ficc_BilateralOrder_Req::set_bid_vol(uint64_t value) {
  _internal_set_bid_vol(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Req.bid_vol)
}

// float ask_price = 7;
inline void ficc_BilateralOrder_Req::clear_ask_price() {
  ask_price_ = 0;
}
inline float ficc_BilateralOrder_Req::_internal_ask_price() const {
  return ask_price_;
}
inline float ficc_BilateralOrder_Req::ask_price() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Req.ask_price)
  return _internal_ask_price();
}
inline void ficc_BilateralOrder_Req::_internal_set_ask_price(float value) {
  
  ask_price_ = value;
}
inline void ficc_BilateralOrder_Req::set_ask_price(float value) {
  _internal_set_ask_price(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Req.ask_price)
}

// uint64 ask_vol = 8;
inline void ficc_BilateralOrder_Req::clear_ask_vol() {
  ask_vol_ = uint64_t{0u};
}
inline uint64_t ficc_BilateralOrder_Req::_internal_ask_vol() const {
  return ask_vol_;
}
inline uint64_t ficc_BilateralOrder_Req::ask_vol() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Req.ask_vol)
  return _internal_ask_vol();
}
inline void ficc_BilateralOrder_Req::_internal_set_ask_vol(uint64_t value) {
  
  ask_vol_ = value;
}
inline void ficc_BilateralOrder_Req::set_ask_vol(uint64_t value) {
  _internal_set_ask_vol(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Req.ask_vol)
}

// string time_cond = 9;
inline void ficc_BilateralOrder_Req::clear_time_cond() {
  time_cond_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Req::time_cond() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Req.time_cond)
  return _internal_time_cond();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Req::set_time_cond(ArgT0&& arg0, ArgT... args) {
 
 time_cond_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Req.time_cond)
}
inline std::string* ficc_BilateralOrder_Req::mutable_time_cond() {
  std::string* _s = _internal_mutable_time_cond();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Req.time_cond)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Req::_internal_time_cond() const {
  return time_cond_.Get();
}
inline void ficc_BilateralOrder_Req::_internal_set_time_cond(const std::string& value) {
  
  time_cond_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Req::_internal_mutable_time_cond() {
  
  return time_cond_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Req::release_time_cond() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Req.time_cond)
  return time_cond_.Release();
}
inline void ficc_BilateralOrder_Req::set_allocated_time_cond(std::string* time_cond) {
  if (time_cond != nullptr) {
    
  } else {
    
  }
  time_cond_.SetAllocated(time_cond, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (time_cond_.IsDefault()) {
    time_cond_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Req.time_cond)
}

// uint32 user_id = 10;
inline void ficc_BilateralOrder_Req::clear_user_id() {
  user_id_ = 0u;
}
inline uint32_t ficc_BilateralOrder_Req::_internal_user_id() const {
  return user_id_;
}
inline uint32_t ficc_BilateralOrder_Req::user_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Req.user_id)
  return _internal_user_id();
}
inline void ficc_BilateralOrder_Req::_internal_set_user_id(uint32_t value) {
  
  user_id_ = value;
}
inline void ficc_BilateralOrder_Req::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Req.user_id)
}

// uint64 strategy_code = 11;
inline void ficc_BilateralOrder_Req::clear_strategy_code() {
  strategy_code_ = uint64_t{0u};
}
inline uint64_t ficc_BilateralOrder_Req::_internal_strategy_code() const {
  return strategy_code_;
}
inline uint64_t ficc_BilateralOrder_Req::strategy_code() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Req.strategy_code)
  return _internal_strategy_code();
}
inline void ficc_BilateralOrder_Req::_internal_set_strategy_code(uint64_t value) {
  
  strategy_code_ = value;
}
inline void ficc_BilateralOrder_Req::set_strategy_code(uint64_t value) {
  _internal_set_strategy_code(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Req.strategy_code)
}

// string text = 12;
inline void ficc_BilateralOrder_Req::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Req::text() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Req.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Req::set_text(ArgT0&& arg0, ArgT... args) {
 
 text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Req.text)
}
inline std::string* ficc_BilateralOrder_Req::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Req.text)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Req::_internal_text() const {
  return text_.Get();
}
inline void ficc_BilateralOrder_Req::_internal_set_text(const std::string& value) {
  
  text_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Req::_internal_mutable_text() {
  
  return text_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Req::release_text() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Req.text)
  return text_.Release();
}
inline void ficc_BilateralOrder_Req::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault()) {
    text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Req.text)
}

// string order_sys_id = 13;
inline void ficc_BilateralOrder_Req::clear_order_sys_id() {
  order_sys_id_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Req::order_sys_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Req.order_sys_id)
  return _internal_order_sys_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Req::set_order_sys_id(ArgT0&& arg0, ArgT... args) {
 
 order_sys_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Req.order_sys_id)
}
inline std::string* ficc_BilateralOrder_Req::mutable_order_sys_id() {
  std::string* _s = _internal_mutable_order_sys_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Req.order_sys_id)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Req::_internal_order_sys_id() const {
  return order_sys_id_.Get();
}
inline void ficc_BilateralOrder_Req::_internal_set_order_sys_id(const std::string& value) {
  
  order_sys_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Req::_internal_mutable_order_sys_id() {
  
  return order_sys_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Req::release_order_sys_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Req.order_sys_id)
  return order_sys_id_.Release();
}
inline void ficc_BilateralOrder_Req::set_allocated_order_sys_id(std::string* order_sys_id) {
  if (order_sys_id != nullptr) {
    
  } else {
    
  }
  order_sys_id_.SetAllocated(order_sys_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_sys_id_.IsDefault()) {
    order_sys_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Req.order_sys_id)
}

// float bid_ytm = 14;
inline void ficc_BilateralOrder_Req::clear_bid_ytm() {
  bid_ytm_ = 0;
}
inline float ficc_BilateralOrder_Req::_internal_bid_ytm() const {
  return bid_ytm_;
}
inline float ficc_BilateralOrder_Req::bid_ytm() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Req.bid_ytm)
  return _internal_bid_ytm();
}
inline void ficc_BilateralOrder_Req::_internal_set_bid_ytm(float value) {
  
  bid_ytm_ = value;
}
inline void ficc_BilateralOrder_Req::set_bid_ytm(float value) {
  _internal_set_bid_ytm(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Req.bid_ytm)
}

// float bid_strike_yeild = 15;
inline void ficc_BilateralOrder_Req::clear_bid_strike_yeild() {
  bid_strike_yeild_ = 0;
}
inline float ficc_BilateralOrder_Req::_internal_bid_strike_yeild() const {
  return bid_strike_yeild_;
}
inline float ficc_BilateralOrder_Req::bid_strike_yeild() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Req.bid_strike_yeild)
  return _internal_bid_strike_yeild();
}
inline void ficc_BilateralOrder_Req::_internal_set_bid_strike_yeild(float value) {
  
  bid_strike_yeild_ = value;
}
inline void ficc_BilateralOrder_Req::set_bid_strike_yeild(float value) {
  _internal_set_bid_strike_yeild(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Req.bid_strike_yeild)
}

// uint64 bid_legsettl_type = 16;
inline void ficc_BilateralOrder_Req::clear_bid_legsettl_type() {
  bid_legsettl_type_ = uint64_t{0u};
}
inline uint64_t ficc_BilateralOrder_Req::_internal_bid_legsettl_type() const {
  return bid_legsettl_type_;
}
inline uint64_t ficc_BilateralOrder_Req::bid_legsettl_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Req.bid_legsettl_type)
  return _internal_bid_legsettl_type();
}
inline void ficc_BilateralOrder_Req::_internal_set_bid_legsettl_type(uint64_t value) {
  
  bid_legsettl_type_ = value;
}
inline void ficc_BilateralOrder_Req::set_bid_legsettl_type(uint64_t value) {
  _internal_set_bid_legsettl_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Req.bid_legsettl_type)
}

// uint64 bid_delivery_type = 17;
inline void ficc_BilateralOrder_Req::clear_bid_delivery_type() {
  bid_delivery_type_ = uint64_t{0u};
}
inline uint64_t ficc_BilateralOrder_Req::_internal_bid_delivery_type() const {
  return bid_delivery_type_;
}
inline uint64_t ficc_BilateralOrder_Req::bid_delivery_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Req.bid_delivery_type)
  return _internal_bid_delivery_type();
}
inline void ficc_BilateralOrder_Req::_internal_set_bid_delivery_type(uint64_t value) {
  
  bid_delivery_type_ = value;
}
inline void ficc_BilateralOrder_Req::set_bid_delivery_type(uint64_t value) {
  _internal_set_bid_delivery_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Req.bid_delivery_type)
}

// uint64 bid_clearing_method = 18;
inline void ficc_BilateralOrder_Req::clear_bid_clearing_method() {
  bid_clearing_method_ = uint64_t{0u};
}
inline uint64_t ficc_BilateralOrder_Req::_internal_bid_clearing_method() const {
  return bid_clearing_method_;
}
inline uint64_t ficc_BilateralOrder_Req::bid_clearing_method() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Req.bid_clearing_method)
  return _internal_bid_clearing_method();
}
inline void ficc_BilateralOrder_Req::_internal_set_bid_clearing_method(uint64_t value) {
  
  bid_clearing_method_ = value;
}
inline void ficc_BilateralOrder_Req::set_bid_clearing_method(uint64_t value) {
  _internal_set_bid_clearing_method(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Req.bid_clearing_method)
}

// float ask_ytm = 19;
inline void ficc_BilateralOrder_Req::clear_ask_ytm() {
  ask_ytm_ = 0;
}
inline float ficc_BilateralOrder_Req::_internal_ask_ytm() const {
  return ask_ytm_;
}
inline float ficc_BilateralOrder_Req::ask_ytm() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Req.ask_ytm)
  return _internal_ask_ytm();
}
inline void ficc_BilateralOrder_Req::_internal_set_ask_ytm(float value) {
  
  ask_ytm_ = value;
}
inline void ficc_BilateralOrder_Req::set_ask_ytm(float value) {
  _internal_set_ask_ytm(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Req.ask_ytm)
}

// float ask_strike_yeild = 20;
inline void ficc_BilateralOrder_Req::clear_ask_strike_yeild() {
  ask_strike_yeild_ = 0;
}
inline float ficc_BilateralOrder_Req::_internal_ask_strike_yeild() const {
  return ask_strike_yeild_;
}
inline float ficc_BilateralOrder_Req::ask_strike_yeild() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Req.ask_strike_yeild)
  return _internal_ask_strike_yeild();
}
inline void ficc_BilateralOrder_Req::_internal_set_ask_strike_yeild(float value) {
  
  ask_strike_yeild_ = value;
}
inline void ficc_BilateralOrder_Req::set_ask_strike_yeild(float value) {
  _internal_set_ask_strike_yeild(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Req.ask_strike_yeild)
}

// uint64 ask_legsettl_type = 21;
inline void ficc_BilateralOrder_Req::clear_ask_legsettl_type() {
  ask_legsettl_type_ = uint64_t{0u};
}
inline uint64_t ficc_BilateralOrder_Req::_internal_ask_legsettl_type() const {
  return ask_legsettl_type_;
}
inline uint64_t ficc_BilateralOrder_Req::ask_legsettl_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Req.ask_legsettl_type)
  return _internal_ask_legsettl_type();
}
inline void ficc_BilateralOrder_Req::_internal_set_ask_legsettl_type(uint64_t value) {
  
  ask_legsettl_type_ = value;
}
inline void ficc_BilateralOrder_Req::set_ask_legsettl_type(uint64_t value) {
  _internal_set_ask_legsettl_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Req.ask_legsettl_type)
}

// uint64 ask_delivery_type = 22;
inline void ficc_BilateralOrder_Req::clear_ask_delivery_type() {
  ask_delivery_type_ = uint64_t{0u};
}
inline uint64_t ficc_BilateralOrder_Req::_internal_ask_delivery_type() const {
  return ask_delivery_type_;
}
inline uint64_t ficc_BilateralOrder_Req::ask_delivery_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Req.ask_delivery_type)
  return _internal_ask_delivery_type();
}
inline void ficc_BilateralOrder_Req::_internal_set_ask_delivery_type(uint64_t value) {
  
  ask_delivery_type_ = value;
}
inline void ficc_BilateralOrder_Req::set_ask_delivery_type(uint64_t value) {
  _internal_set_ask_delivery_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Req.ask_delivery_type)
}

// uint64 ask_clearing_method = 23;
inline void ficc_BilateralOrder_Req::clear_ask_clearing_method() {
  ask_clearing_method_ = uint64_t{0u};
}
inline uint64_t ficc_BilateralOrder_Req::_internal_ask_clearing_method() const {
  return ask_clearing_method_;
}
inline uint64_t ficc_BilateralOrder_Req::ask_clearing_method() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Req.ask_clearing_method)
  return _internal_ask_clearing_method();
}
inline void ficc_BilateralOrder_Req::_internal_set_ask_clearing_method(uint64_t value) {
  
  ask_clearing_method_ = value;
}
inline void ficc_BilateralOrder_Req::set_ask_clearing_method(uint64_t value) {
  _internal_set_ask_clearing_method(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Req.ask_clearing_method)
}

// uint64 quote_type = 24;
inline void ficc_BilateralOrder_Req::clear_quote_type() {
  quote_type_ = uint64_t{0u};
}
inline uint64_t ficc_BilateralOrder_Req::_internal_quote_type() const {
  return quote_type_;
}
inline uint64_t ficc_BilateralOrder_Req::quote_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Req.quote_type)
  return _internal_quote_type();
}
inline void ficc_BilateralOrder_Req::_internal_set_quote_type(uint64_t value) {
  
  quote_type_ = value;
}
inline void ficc_BilateralOrder_Req::set_quote_type(uint64_t value) {
  _internal_set_quote_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Req.quote_type)
}

// uint64 max_floor = 25;
inline void ficc_BilateralOrder_Req::clear_max_floor() {
  max_floor_ = uint64_t{0u};
}
inline uint64_t ficc_BilateralOrder_Req::_internal_max_floor() const {
  return max_floor_;
}
inline uint64_t ficc_BilateralOrder_Req::max_floor() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Req.max_floor)
  return _internal_max_floor();
}
inline void ficc_BilateralOrder_Req::_internal_set_max_floor(uint64_t value) {
  
  max_floor_ = value;
}
inline void ficc_BilateralOrder_Req::set_max_floor(uint64_t value) {
  _internal_set_max_floor(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Req.max_floor)
}

// string valid_until_time = 26;
inline void ficc_BilateralOrder_Req::clear_valid_until_time() {
  valid_until_time_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Req::valid_until_time() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Req.valid_until_time)
  return _internal_valid_until_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Req::set_valid_until_time(ArgT0&& arg0, ArgT... args) {
 
 valid_until_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Req.valid_until_time)
}
inline std::string* ficc_BilateralOrder_Req::mutable_valid_until_time() {
  std::string* _s = _internal_mutable_valid_until_time();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Req.valid_until_time)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Req::_internal_valid_until_time() const {
  return valid_until_time_.Get();
}
inline void ficc_BilateralOrder_Req::_internal_set_valid_until_time(const std::string& value) {
  
  valid_until_time_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Req::_internal_mutable_valid_until_time() {
  
  return valid_until_time_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Req::release_valid_until_time() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Req.valid_until_time)
  return valid_until_time_.Release();
}
inline void ficc_BilateralOrder_Req::set_allocated_valid_until_time(std::string* valid_until_time) {
  if (valid_until_time != nullptr) {
    
  } else {
    
  }
  valid_until_time_.SetAllocated(valid_until_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (valid_until_time_.IsDefault()) {
    valid_until_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Req.valid_until_time)
}

// string client_ref_id = 27;
inline void ficc_BilateralOrder_Req::clear_client_ref_id() {
  client_ref_id_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Req::client_ref_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Req.client_ref_id)
  return _internal_client_ref_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Req::set_client_ref_id(ArgT0&& arg0, ArgT... args) {
 
 client_ref_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Req.client_ref_id)
}
inline std::string* ficc_BilateralOrder_Req::mutable_client_ref_id() {
  std::string* _s = _internal_mutable_client_ref_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Req.client_ref_id)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Req::_internal_client_ref_id() const {
  return client_ref_id_.Get();
}
inline void ficc_BilateralOrder_Req::_internal_set_client_ref_id(const std::string& value) {
  
  client_ref_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Req::_internal_mutable_client_ref_id() {
  
  return client_ref_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Req::release_client_ref_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Req.client_ref_id)
  return client_ref_id_.Release();
}
inline void ficc_BilateralOrder_Req::set_allocated_client_ref_id(std::string* client_ref_id) {
  if (client_ref_id != nullptr) {
    
  } else {
    
  }
  client_ref_id_.SetAllocated(client_ref_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_ref_id_.IsDefault()) {
    client_ref_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Req.client_ref_id)
}

// uint64 routing_type = 28;
inline void ficc_BilateralOrder_Req::clear_routing_type() {
  routing_type_ = uint64_t{0u};
}
inline uint64_t ficc_BilateralOrder_Req::_internal_routing_type() const {
  return routing_type_;
}
inline uint64_t ficc_BilateralOrder_Req::routing_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Req.routing_type)
  return _internal_routing_type();
}
inline void ficc_BilateralOrder_Req::_internal_set_routing_type(uint64_t value) {
  
  routing_type_ = value;
}
inline void ficc_BilateralOrder_Req::set_routing_type(uint64_t value) {
  _internal_set_routing_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Req.routing_type)
}

// uint64 market_indicator = 29;
inline void ficc_BilateralOrder_Req::clear_market_indicator() {
  market_indicator_ = uint64_t{0u};
}
inline uint64_t ficc_BilateralOrder_Req::_internal_market_indicator() const {
  return market_indicator_;
}
inline uint64_t ficc_BilateralOrder_Req::market_indicator() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Req.market_indicator)
  return _internal_market_indicator();
}
inline void ficc_BilateralOrder_Req::_internal_set_market_indicator(uint64_t value) {
  
  market_indicator_ = value;
}
inline void ficc_BilateralOrder_Req::set_market_indicator(uint64_t value) {
  _internal_set_market_indicator(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Req.market_indicator)
}

// string reserver1 = 30;
inline void ficc_BilateralOrder_Req::clear_reserver1() {
  reserver1_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Req::reserver1() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Req.reserver1)
  return _internal_reserver1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Req::set_reserver1(ArgT0&& arg0, ArgT... args) {
 
 reserver1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Req.reserver1)
}
inline std::string* ficc_BilateralOrder_Req::mutable_reserver1() {
  std::string* _s = _internal_mutable_reserver1();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Req.reserver1)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Req::_internal_reserver1() const {
  return reserver1_.Get();
}
inline void ficc_BilateralOrder_Req::_internal_set_reserver1(const std::string& value) {
  
  reserver1_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Req::_internal_mutable_reserver1() {
  
  return reserver1_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Req::release_reserver1() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Req.reserver1)
  return reserver1_.Release();
}
inline void ficc_BilateralOrder_Req::set_allocated_reserver1(std::string* reserver1) {
  if (reserver1 != nullptr) {
    
  } else {
    
  }
  reserver1_.SetAllocated(reserver1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reserver1_.IsDefault()) {
    reserver1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Req.reserver1)
}

// -------------------------------------------------------------------

// ficc_BilateralOrder_Rtn

// .message_head.head head = 1;
inline bool ficc_BilateralOrder_Rtn::_internal_has_head() const {
  return this != internal_default_instance() && head_ != nullptr;
}
inline bool ficc_BilateralOrder_Rtn::has_head() const {
  return _internal_has_head();
}
inline const ::message_head::head& ficc_BilateralOrder_Rtn::_internal_head() const {
  const ::message_head::head* p = head_;
  return p != nullptr ? *p : reinterpret_cast<const ::message_head::head&>(
      ::message_head::_head_default_instance_);
}
inline const ::message_head::head& ficc_BilateralOrder_Rtn::head() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.head)
  return _internal_head();
}
inline void ficc_BilateralOrder_Rtn::unsafe_arena_set_allocated_head(
    ::message_head::head* head) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ficc_message.ficc_BilateralOrder_Rtn.head)
}
inline ::message_head::head* ficc_BilateralOrder_Rtn::release_head() {
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message_head::head* ficc_BilateralOrder_Rtn::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Rtn.head)
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
  return temp;
}
inline ::message_head::head* ficc_BilateralOrder_Rtn::_internal_mutable_head() {
  
  if (head_ == nullptr) {
    auto* p = CreateMaybeMessage<::message_head::head>(GetArenaForAllocation());
    head_ = p;
  }
  return head_;
}
inline ::message_head::head* ficc_BilateralOrder_Rtn::mutable_head() {
  ::message_head::head* _msg = _internal_mutable_head();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Rtn.head)
  return _msg;
}
inline void ficc_BilateralOrder_Rtn::set_allocated_head(::message_head::head* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head));
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Rtn.head)
}

// string trade_acct = 2;
inline void ficc_BilateralOrder_Rtn::clear_trade_acct() {
  trade_acct_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Rtn::trade_acct() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.trade_acct)
  return _internal_trade_acct();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Rtn::set_trade_acct(ArgT0&& arg0, ArgT... args) {
 
 trade_acct_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.trade_acct)
}
inline std::string* ficc_BilateralOrder_Rtn::mutable_trade_acct() {
  std::string* _s = _internal_mutable_trade_acct();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Rtn.trade_acct)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Rtn::_internal_trade_acct() const {
  return trade_acct_.Get();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_trade_acct(const std::string& value) {
  
  trade_acct_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::_internal_mutable_trade_acct() {
  
  return trade_acct_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::release_trade_acct() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Rtn.trade_acct)
  return trade_acct_.Release();
}
inline void ficc_BilateralOrder_Rtn::set_allocated_trade_acct(std::string* trade_acct) {
  if (trade_acct != nullptr) {
    
  } else {
    
  }
  trade_acct_.SetAllocated(trade_acct, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trade_acct_.IsDefault()) {
    trade_acct_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Rtn.trade_acct)
}

// string fund_acct = 3;
inline void ficc_BilateralOrder_Rtn::clear_fund_acct() {
  fund_acct_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Rtn::fund_acct() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.fund_acct)
  return _internal_fund_acct();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Rtn::set_fund_acct(ArgT0&& arg0, ArgT... args) {
 
 fund_acct_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.fund_acct)
}
inline std::string* ficc_BilateralOrder_Rtn::mutable_fund_acct() {
  std::string* _s = _internal_mutable_fund_acct();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Rtn.fund_acct)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Rtn::_internal_fund_acct() const {
  return fund_acct_.Get();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_fund_acct(const std::string& value) {
  
  fund_acct_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::_internal_mutable_fund_acct() {
  
  return fund_acct_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::release_fund_acct() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Rtn.fund_acct)
  return fund_acct_.Release();
}
inline void ficc_BilateralOrder_Rtn::set_allocated_fund_acct(std::string* fund_acct) {
  if (fund_acct != nullptr) {
    
  } else {
    
  }
  fund_acct_.SetAllocated(fund_acct, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fund_acct_.IsDefault()) {
    fund_acct_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Rtn.fund_acct)
}

// string combino = 4;
inline void ficc_BilateralOrder_Rtn::clear_combino() {
  combino_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Rtn::combino() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.combino)
  return _internal_combino();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Rtn::set_combino(ArgT0&& arg0, ArgT... args) {
 
 combino_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.combino)
}
inline std::string* ficc_BilateralOrder_Rtn::mutable_combino() {
  std::string* _s = _internal_mutable_combino();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Rtn.combino)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Rtn::_internal_combino() const {
  return combino_.Get();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_combino(const std::string& value) {
  
  combino_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::_internal_mutable_combino() {
  
  return combino_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::release_combino() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Rtn.combino)
  return combino_.Release();
}
inline void ficc_BilateralOrder_Rtn::set_allocated_combino(std::string* combino) {
  if (combino != nullptr) {
    
  } else {
    
  }
  combino_.SetAllocated(combino, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (combino_.IsDefault()) {
    combino_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Rtn.combino)
}

// uint32 user_id = 5;
inline void ficc_BilateralOrder_Rtn::clear_user_id() {
  user_id_ = 0u;
}
inline uint32_t ficc_BilateralOrder_Rtn::_internal_user_id() const {
  return user_id_;
}
inline uint32_t ficc_BilateralOrder_Rtn::user_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.user_id)
  return _internal_user_id();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_user_id(uint32_t value) {
  
  user_id_ = value;
}
inline void ficc_BilateralOrder_Rtn::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.user_id)
}

// string ex_code = 6;
inline void ficc_BilateralOrder_Rtn::clear_ex_code() {
  ex_code_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Rtn::ex_code() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.ex_code)
  return _internal_ex_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Rtn::set_ex_code(ArgT0&& arg0, ArgT... args) {
 
 ex_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.ex_code)
}
inline std::string* ficc_BilateralOrder_Rtn::mutable_ex_code() {
  std::string* _s = _internal_mutable_ex_code();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Rtn.ex_code)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Rtn::_internal_ex_code() const {
  return ex_code_.Get();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_ex_code(const std::string& value) {
  
  ex_code_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::_internal_mutable_ex_code() {
  
  return ex_code_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::release_ex_code() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Rtn.ex_code)
  return ex_code_.Release();
}
inline void ficc_BilateralOrder_Rtn::set_allocated_ex_code(std::string* ex_code) {
  if (ex_code != nullptr) {
    
  } else {
    
  }
  ex_code_.SetAllocated(ex_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ex_code_.IsDefault()) {
    ex_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Rtn.ex_code)
}

// string commodity_type = 7;
inline void ficc_BilateralOrder_Rtn::clear_commodity_type() {
  commodity_type_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Rtn::commodity_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.commodity_type)
  return _internal_commodity_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Rtn::set_commodity_type(ArgT0&& arg0, ArgT... args) {
 
 commodity_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.commodity_type)
}
inline std::string* ficc_BilateralOrder_Rtn::mutable_commodity_type() {
  std::string* _s = _internal_mutable_commodity_type();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Rtn.commodity_type)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Rtn::_internal_commodity_type() const {
  return commodity_type_.Get();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_commodity_type(const std::string& value) {
  
  commodity_type_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::_internal_mutable_commodity_type() {
  
  return commodity_type_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::release_commodity_type() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Rtn.commodity_type)
  return commodity_type_.Release();
}
inline void ficc_BilateralOrder_Rtn::set_allocated_commodity_type(std::string* commodity_type) {
  if (commodity_type != nullptr) {
    
  } else {
    
  }
  commodity_type_.SetAllocated(commodity_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (commodity_type_.IsDefault()) {
    commodity_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Rtn.commodity_type)
}

// string secu_code = 8;
inline void ficc_BilateralOrder_Rtn::clear_secu_code() {
  secu_code_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Rtn::secu_code() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.secu_code)
  return _internal_secu_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Rtn::set_secu_code(ArgT0&& arg0, ArgT... args) {
 
 secu_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.secu_code)
}
inline std::string* ficc_BilateralOrder_Rtn::mutable_secu_code() {
  std::string* _s = _internal_mutable_secu_code();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Rtn.secu_code)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Rtn::_internal_secu_code() const {
  return secu_code_.Get();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_secu_code(const std::string& value) {
  
  secu_code_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::_internal_mutable_secu_code() {
  
  return secu_code_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::release_secu_code() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Rtn.secu_code)
  return secu_code_.Release();
}
inline void ficc_BilateralOrder_Rtn::set_allocated_secu_code(std::string* secu_code) {
  if (secu_code != nullptr) {
    
  } else {
    
  }
  secu_code_.SetAllocated(secu_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secu_code_.IsDefault()) {
    secu_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Rtn.secu_code)
}

// string secu_name = 9;
inline void ficc_BilateralOrder_Rtn::clear_secu_name() {
  secu_name_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Rtn::secu_name() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.secu_name)
  return _internal_secu_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Rtn::set_secu_name(ArgT0&& arg0, ArgT... args) {
 
 secu_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.secu_name)
}
inline std::string* ficc_BilateralOrder_Rtn::mutable_secu_name() {
  std::string* _s = _internal_mutable_secu_name();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Rtn.secu_name)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Rtn::_internal_secu_name() const {
  return secu_name_.Get();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_secu_name(const std::string& value) {
  
  secu_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::_internal_mutable_secu_name() {
  
  return secu_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::release_secu_name() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Rtn.secu_name)
  return secu_name_.Release();
}
inline void ficc_BilateralOrder_Rtn::set_allocated_secu_name(std::string* secu_name) {
  if (secu_name != nullptr) {
    
  } else {
    
  }
  secu_name_.SetAllocated(secu_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secu_name_.IsDefault()) {
    secu_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Rtn.secu_name)
}

// string order_price_type = 10;
inline void ficc_BilateralOrder_Rtn::clear_order_price_type() {
  order_price_type_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Rtn::order_price_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.order_price_type)
  return _internal_order_price_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Rtn::set_order_price_type(ArgT0&& arg0, ArgT... args) {
 
 order_price_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.order_price_type)
}
inline std::string* ficc_BilateralOrder_Rtn::mutable_order_price_type() {
  std::string* _s = _internal_mutable_order_price_type();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Rtn.order_price_type)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Rtn::_internal_order_price_type() const {
  return order_price_type_.Get();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_order_price_type(const std::string& value) {
  
  order_price_type_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::_internal_mutable_order_price_type() {
  
  return order_price_type_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::release_order_price_type() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Rtn.order_price_type)
  return order_price_type_.Release();
}
inline void ficc_BilateralOrder_Rtn::set_allocated_order_price_type(std::string* order_price_type) {
  if (order_price_type != nullptr) {
    
  } else {
    
  }
  order_price_type_.SetAllocated(order_price_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_price_type_.IsDefault()) {
    order_price_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Rtn.order_price_type)
}

// string offset_flag = 11;
inline void ficc_BilateralOrder_Rtn::clear_offset_flag() {
  offset_flag_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Rtn::offset_flag() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.offset_flag)
  return _internal_offset_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Rtn::set_offset_flag(ArgT0&& arg0, ArgT... args) {
 
 offset_flag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.offset_flag)
}
inline std::string* ficc_BilateralOrder_Rtn::mutable_offset_flag() {
  std::string* _s = _internal_mutable_offset_flag();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Rtn.offset_flag)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Rtn::_internal_offset_flag() const {
  return offset_flag_.Get();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_offset_flag(const std::string& value) {
  
  offset_flag_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::_internal_mutable_offset_flag() {
  
  return offset_flag_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::release_offset_flag() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Rtn.offset_flag)
  return offset_flag_.Release();
}
inline void ficc_BilateralOrder_Rtn::set_allocated_offset_flag(std::string* offset_flag) {
  if (offset_flag != nullptr) {
    
  } else {
    
  }
  offset_flag_.SetAllocated(offset_flag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (offset_flag_.IsDefault()) {
    offset_flag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Rtn.offset_flag)
}

// string hedge_flag = 12;
inline void ficc_BilateralOrder_Rtn::clear_hedge_flag() {
  hedge_flag_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Rtn::hedge_flag() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.hedge_flag)
  return _internal_hedge_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Rtn::set_hedge_flag(ArgT0&& arg0, ArgT... args) {
 
 hedge_flag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.hedge_flag)
}
inline std::string* ficc_BilateralOrder_Rtn::mutable_hedge_flag() {
  std::string* _s = _internal_mutable_hedge_flag();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Rtn.hedge_flag)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Rtn::_internal_hedge_flag() const {
  return hedge_flag_.Get();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_hedge_flag(const std::string& value) {
  
  hedge_flag_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::_internal_mutable_hedge_flag() {
  
  return hedge_flag_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::release_hedge_flag() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Rtn.hedge_flag)
  return hedge_flag_.Release();
}
inline void ficc_BilateralOrder_Rtn::set_allocated_hedge_flag(std::string* hedge_flag) {
  if (hedge_flag != nullptr) {
    
  } else {
    
  }
  hedge_flag_.SetAllocated(hedge_flag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hedge_flag_.IsDefault()) {
    hedge_flag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Rtn.hedge_flag)
}

// string bilateral_id = 13;
inline void ficc_BilateralOrder_Rtn::clear_bilateral_id() {
  bilateral_id_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Rtn::bilateral_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.bilateral_id)
  return _internal_bilateral_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Rtn::set_bilateral_id(ArgT0&& arg0, ArgT... args) {
 
 bilateral_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.bilateral_id)
}
inline std::string* ficc_BilateralOrder_Rtn::mutable_bilateral_id() {
  std::string* _s = _internal_mutable_bilateral_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Rtn.bilateral_id)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Rtn::_internal_bilateral_id() const {
  return bilateral_id_.Get();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_bilateral_id(const std::string& value) {
  
  bilateral_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::_internal_mutable_bilateral_id() {
  
  return bilateral_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::release_bilateral_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Rtn.bilateral_id)
  return bilateral_id_.Release();
}
inline void ficc_BilateralOrder_Rtn::set_allocated_bilateral_id(std::string* bilateral_id) {
  if (bilateral_id != nullptr) {
    
  } else {
    
  }
  bilateral_id_.SetAllocated(bilateral_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bilateral_id_.IsDefault()) {
    bilateral_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Rtn.bilateral_id)
}

// float bid_price = 14;
inline void ficc_BilateralOrder_Rtn::clear_bid_price() {
  bid_price_ = 0;
}
inline float ficc_BilateralOrder_Rtn::_internal_bid_price() const {
  return bid_price_;
}
inline float ficc_BilateralOrder_Rtn::bid_price() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.bid_price)
  return _internal_bid_price();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_bid_price(float value) {
  
  bid_price_ = value;
}
inline void ficc_BilateralOrder_Rtn::set_bid_price(float value) {
  _internal_set_bid_price(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.bid_price)
}

// uint64 bid_vol = 15;
inline void ficc_BilateralOrder_Rtn::clear_bid_vol() {
  bid_vol_ = uint64_t{0u};
}
inline uint64_t ficc_BilateralOrder_Rtn::_internal_bid_vol() const {
  return bid_vol_;
}
inline uint64_t ficc_BilateralOrder_Rtn::bid_vol() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.bid_vol)
  return _internal_bid_vol();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_bid_vol(uint64_t value) {
  
  bid_vol_ = value;
}
inline void ficc_BilateralOrder_Rtn::set_bid_vol(uint64_t value) {
  _internal_set_bid_vol(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.bid_vol)
}

// float ask_price = 16;
inline void ficc_BilateralOrder_Rtn::clear_ask_price() {
  ask_price_ = 0;
}
inline float ficc_BilateralOrder_Rtn::_internal_ask_price() const {
  return ask_price_;
}
inline float ficc_BilateralOrder_Rtn::ask_price() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.ask_price)
  return _internal_ask_price();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_ask_price(float value) {
  
  ask_price_ = value;
}
inline void ficc_BilateralOrder_Rtn::set_ask_price(float value) {
  _internal_set_ask_price(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.ask_price)
}

// uint64 ask_vol = 17;
inline void ficc_BilateralOrder_Rtn::clear_ask_vol() {
  ask_vol_ = uint64_t{0u};
}
inline uint64_t ficc_BilateralOrder_Rtn::_internal_ask_vol() const {
  return ask_vol_;
}
inline uint64_t ficc_BilateralOrder_Rtn::ask_vol() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.ask_vol)
  return _internal_ask_vol();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_ask_vol(uint64_t value) {
  
  ask_vol_ = value;
}
inline void ficc_BilateralOrder_Rtn::set_ask_vol(uint64_t value) {
  _internal_set_ask_vol(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.ask_vol)
}

// string time_cond = 18;
inline void ficc_BilateralOrder_Rtn::clear_time_cond() {
  time_cond_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Rtn::time_cond() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.time_cond)
  return _internal_time_cond();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Rtn::set_time_cond(ArgT0&& arg0, ArgT... args) {
 
 time_cond_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.time_cond)
}
inline std::string* ficc_BilateralOrder_Rtn::mutable_time_cond() {
  std::string* _s = _internal_mutable_time_cond();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Rtn.time_cond)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Rtn::_internal_time_cond() const {
  return time_cond_.Get();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_time_cond(const std::string& value) {
  
  time_cond_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::_internal_mutable_time_cond() {
  
  return time_cond_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::release_time_cond() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Rtn.time_cond)
  return time_cond_.Release();
}
inline void ficc_BilateralOrder_Rtn::set_allocated_time_cond(std::string* time_cond) {
  if (time_cond != nullptr) {
    
  } else {
    
  }
  time_cond_.SetAllocated(time_cond, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (time_cond_.IsDefault()) {
    time_cond_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Rtn.time_cond)
}

// uint64 strategy_code = 19;
inline void ficc_BilateralOrder_Rtn::clear_strategy_code() {
  strategy_code_ = uint64_t{0u};
}
inline uint64_t ficc_BilateralOrder_Rtn::_internal_strategy_code() const {
  return strategy_code_;
}
inline uint64_t ficc_BilateralOrder_Rtn::strategy_code() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.strategy_code)
  return _internal_strategy_code();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_strategy_code(uint64_t value) {
  
  strategy_code_ = value;
}
inline void ficc_BilateralOrder_Rtn::set_strategy_code(uint64_t value) {
  _internal_set_strategy_code(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.strategy_code)
}

// string text = 20;
inline void ficc_BilateralOrder_Rtn::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Rtn::text() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Rtn::set_text(ArgT0&& arg0, ArgT... args) {
 
 text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.text)
}
inline std::string* ficc_BilateralOrder_Rtn::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Rtn.text)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Rtn::_internal_text() const {
  return text_.Get();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_text(const std::string& value) {
  
  text_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::_internal_mutable_text() {
  
  return text_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::release_text() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Rtn.text)
  return text_.Release();
}
inline void ficc_BilateralOrder_Rtn::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault()) {
    text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Rtn.text)
}

// string order_sys_id = 21;
inline void ficc_BilateralOrder_Rtn::clear_order_sys_id() {
  order_sys_id_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Rtn::order_sys_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.order_sys_id)
  return _internal_order_sys_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Rtn::set_order_sys_id(ArgT0&& arg0, ArgT... args) {
 
 order_sys_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.order_sys_id)
}
inline std::string* ficc_BilateralOrder_Rtn::mutable_order_sys_id() {
  std::string* _s = _internal_mutable_order_sys_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Rtn.order_sys_id)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Rtn::_internal_order_sys_id() const {
  return order_sys_id_.Get();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_order_sys_id(const std::string& value) {
  
  order_sys_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::_internal_mutable_order_sys_id() {
  
  return order_sys_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::release_order_sys_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Rtn.order_sys_id)
  return order_sys_id_.Release();
}
inline void ficc_BilateralOrder_Rtn::set_allocated_order_sys_id(std::string* order_sys_id) {
  if (order_sys_id != nullptr) {
    
  } else {
    
  }
  order_sys_id_.SetAllocated(order_sys_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_sys_id_.IsDefault()) {
    order_sys_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Rtn.order_sys_id)
}

// string trade_date = 22;
inline void ficc_BilateralOrder_Rtn::clear_trade_date() {
  trade_date_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Rtn::trade_date() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.trade_date)
  return _internal_trade_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Rtn::set_trade_date(ArgT0&& arg0, ArgT... args) {
 
 trade_date_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.trade_date)
}
inline std::string* ficc_BilateralOrder_Rtn::mutable_trade_date() {
  std::string* _s = _internal_mutable_trade_date();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Rtn.trade_date)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Rtn::_internal_trade_date() const {
  return trade_date_.Get();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_trade_date(const std::string& value) {
  
  trade_date_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::_internal_mutable_trade_date() {
  
  return trade_date_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::release_trade_date() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Rtn.trade_date)
  return trade_date_.Release();
}
inline void ficc_BilateralOrder_Rtn::set_allocated_trade_date(std::string* trade_date) {
  if (trade_date != nullptr) {
    
  } else {
    
  }
  trade_date_.SetAllocated(trade_date, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trade_date_.IsDefault()) {
    trade_date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Rtn.trade_date)
}

// string insert_time = 23;
inline void ficc_BilateralOrder_Rtn::clear_insert_time() {
  insert_time_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Rtn::insert_time() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.insert_time)
  return _internal_insert_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Rtn::set_insert_time(ArgT0&& arg0, ArgT... args) {
 
 insert_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.insert_time)
}
inline std::string* ficc_BilateralOrder_Rtn::mutable_insert_time() {
  std::string* _s = _internal_mutable_insert_time();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Rtn.insert_time)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Rtn::_internal_insert_time() const {
  return insert_time_.Get();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_insert_time(const std::string& value) {
  
  insert_time_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::_internal_mutable_insert_time() {
  
  return insert_time_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::release_insert_time() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Rtn.insert_time)
  return insert_time_.Release();
}
inline void ficc_BilateralOrder_Rtn::set_allocated_insert_time(std::string* insert_time) {
  if (insert_time != nullptr) {
    
  } else {
    
  }
  insert_time_.SetAllocated(insert_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (insert_time_.IsDefault()) {
    insert_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Rtn.insert_time)
}

// float bid_ytm = 24;
inline void ficc_BilateralOrder_Rtn::clear_bid_ytm() {
  bid_ytm_ = 0;
}
inline float ficc_BilateralOrder_Rtn::_internal_bid_ytm() const {
  return bid_ytm_;
}
inline float ficc_BilateralOrder_Rtn::bid_ytm() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.bid_ytm)
  return _internal_bid_ytm();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_bid_ytm(float value) {
  
  bid_ytm_ = value;
}
inline void ficc_BilateralOrder_Rtn::set_bid_ytm(float value) {
  _internal_set_bid_ytm(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.bid_ytm)
}

// float bid_strike_yeild = 25;
inline void ficc_BilateralOrder_Rtn::clear_bid_strike_yeild() {
  bid_strike_yeild_ = 0;
}
inline float ficc_BilateralOrder_Rtn::_internal_bid_strike_yeild() const {
  return bid_strike_yeild_;
}
inline float ficc_BilateralOrder_Rtn::bid_strike_yeild() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.bid_strike_yeild)
  return _internal_bid_strike_yeild();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_bid_strike_yeild(float value) {
  
  bid_strike_yeild_ = value;
}
inline void ficc_BilateralOrder_Rtn::set_bid_strike_yeild(float value) {
  _internal_set_bid_strike_yeild(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.bid_strike_yeild)
}

// uint64 bid_legsettl_type = 26;
inline void ficc_BilateralOrder_Rtn::clear_bid_legsettl_type() {
  bid_legsettl_type_ = uint64_t{0u};
}
inline uint64_t ficc_BilateralOrder_Rtn::_internal_bid_legsettl_type() const {
  return bid_legsettl_type_;
}
inline uint64_t ficc_BilateralOrder_Rtn::bid_legsettl_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.bid_legsettl_type)
  return _internal_bid_legsettl_type();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_bid_legsettl_type(uint64_t value) {
  
  bid_legsettl_type_ = value;
}
inline void ficc_BilateralOrder_Rtn::set_bid_legsettl_type(uint64_t value) {
  _internal_set_bid_legsettl_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.bid_legsettl_type)
}

// uint64 bid_delivery_type = 27;
inline void ficc_BilateralOrder_Rtn::clear_bid_delivery_type() {
  bid_delivery_type_ = uint64_t{0u};
}
inline uint64_t ficc_BilateralOrder_Rtn::_internal_bid_delivery_type() const {
  return bid_delivery_type_;
}
inline uint64_t ficc_BilateralOrder_Rtn::bid_delivery_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.bid_delivery_type)
  return _internal_bid_delivery_type();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_bid_delivery_type(uint64_t value) {
  
  bid_delivery_type_ = value;
}
inline void ficc_BilateralOrder_Rtn::set_bid_delivery_type(uint64_t value) {
  _internal_set_bid_delivery_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.bid_delivery_type)
}

// uint64 bid_clearing_method = 28;
inline void ficc_BilateralOrder_Rtn::clear_bid_clearing_method() {
  bid_clearing_method_ = uint64_t{0u};
}
inline uint64_t ficc_BilateralOrder_Rtn::_internal_bid_clearing_method() const {
  return bid_clearing_method_;
}
inline uint64_t ficc_BilateralOrder_Rtn::bid_clearing_method() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.bid_clearing_method)
  return _internal_bid_clearing_method();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_bid_clearing_method(uint64_t value) {
  
  bid_clearing_method_ = value;
}
inline void ficc_BilateralOrder_Rtn::set_bid_clearing_method(uint64_t value) {
  _internal_set_bid_clearing_method(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.bid_clearing_method)
}

// float ask_ytm = 29;
inline void ficc_BilateralOrder_Rtn::clear_ask_ytm() {
  ask_ytm_ = 0;
}
inline float ficc_BilateralOrder_Rtn::_internal_ask_ytm() const {
  return ask_ytm_;
}
inline float ficc_BilateralOrder_Rtn::ask_ytm() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.ask_ytm)
  return _internal_ask_ytm();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_ask_ytm(float value) {
  
  ask_ytm_ = value;
}
inline void ficc_BilateralOrder_Rtn::set_ask_ytm(float value) {
  _internal_set_ask_ytm(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.ask_ytm)
}

// float ask_strike_yeild = 30;
inline void ficc_BilateralOrder_Rtn::clear_ask_strike_yeild() {
  ask_strike_yeild_ = 0;
}
inline float ficc_BilateralOrder_Rtn::_internal_ask_strike_yeild() const {
  return ask_strike_yeild_;
}
inline float ficc_BilateralOrder_Rtn::ask_strike_yeild() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.ask_strike_yeild)
  return _internal_ask_strike_yeild();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_ask_strike_yeild(float value) {
  
  ask_strike_yeild_ = value;
}
inline void ficc_BilateralOrder_Rtn::set_ask_strike_yeild(float value) {
  _internal_set_ask_strike_yeild(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.ask_strike_yeild)
}

// uint64 ask_legsettl_type = 31;
inline void ficc_BilateralOrder_Rtn::clear_ask_legsettl_type() {
  ask_legsettl_type_ = uint64_t{0u};
}
inline uint64_t ficc_BilateralOrder_Rtn::_internal_ask_legsettl_type() const {
  return ask_legsettl_type_;
}
inline uint64_t ficc_BilateralOrder_Rtn::ask_legsettl_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.ask_legsettl_type)
  return _internal_ask_legsettl_type();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_ask_legsettl_type(uint64_t value) {
  
  ask_legsettl_type_ = value;
}
inline void ficc_BilateralOrder_Rtn::set_ask_legsettl_type(uint64_t value) {
  _internal_set_ask_legsettl_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.ask_legsettl_type)
}

// uint64 ask_delivery_type = 32;
inline void ficc_BilateralOrder_Rtn::clear_ask_delivery_type() {
  ask_delivery_type_ = uint64_t{0u};
}
inline uint64_t ficc_BilateralOrder_Rtn::_internal_ask_delivery_type() const {
  return ask_delivery_type_;
}
inline uint64_t ficc_BilateralOrder_Rtn::ask_delivery_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.ask_delivery_type)
  return _internal_ask_delivery_type();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_ask_delivery_type(uint64_t value) {
  
  ask_delivery_type_ = value;
}
inline void ficc_BilateralOrder_Rtn::set_ask_delivery_type(uint64_t value) {
  _internal_set_ask_delivery_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.ask_delivery_type)
}

// uint64 ask_clearing_method = 33;
inline void ficc_BilateralOrder_Rtn::clear_ask_clearing_method() {
  ask_clearing_method_ = uint64_t{0u};
}
inline uint64_t ficc_BilateralOrder_Rtn::_internal_ask_clearing_method() const {
  return ask_clearing_method_;
}
inline uint64_t ficc_BilateralOrder_Rtn::ask_clearing_method() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.ask_clearing_method)
  return _internal_ask_clearing_method();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_ask_clearing_method(uint64_t value) {
  
  ask_clearing_method_ = value;
}
inline void ficc_BilateralOrder_Rtn::set_ask_clearing_method(uint64_t value) {
  _internal_set_ask_clearing_method(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.ask_clearing_method)
}

// uint64 quote_type = 34;
inline void ficc_BilateralOrder_Rtn::clear_quote_type() {
  quote_type_ = uint64_t{0u};
}
inline uint64_t ficc_BilateralOrder_Rtn::_internal_quote_type() const {
  return quote_type_;
}
inline uint64_t ficc_BilateralOrder_Rtn::quote_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.quote_type)
  return _internal_quote_type();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_quote_type(uint64_t value) {
  
  quote_type_ = value;
}
inline void ficc_BilateralOrder_Rtn::set_quote_type(uint64_t value) {
  _internal_set_quote_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.quote_type)
}

// uint64 max_floor = 35;
inline void ficc_BilateralOrder_Rtn::clear_max_floor() {
  max_floor_ = uint64_t{0u};
}
inline uint64_t ficc_BilateralOrder_Rtn::_internal_max_floor() const {
  return max_floor_;
}
inline uint64_t ficc_BilateralOrder_Rtn::max_floor() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.max_floor)
  return _internal_max_floor();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_max_floor(uint64_t value) {
  
  max_floor_ = value;
}
inline void ficc_BilateralOrder_Rtn::set_max_floor(uint64_t value) {
  _internal_set_max_floor(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.max_floor)
}

// string valid_until_time = 36;
inline void ficc_BilateralOrder_Rtn::clear_valid_until_time() {
  valid_until_time_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Rtn::valid_until_time() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.valid_until_time)
  return _internal_valid_until_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Rtn::set_valid_until_time(ArgT0&& arg0, ArgT... args) {
 
 valid_until_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.valid_until_time)
}
inline std::string* ficc_BilateralOrder_Rtn::mutable_valid_until_time() {
  std::string* _s = _internal_mutable_valid_until_time();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Rtn.valid_until_time)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Rtn::_internal_valid_until_time() const {
  return valid_until_time_.Get();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_valid_until_time(const std::string& value) {
  
  valid_until_time_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::_internal_mutable_valid_until_time() {
  
  return valid_until_time_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::release_valid_until_time() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Rtn.valid_until_time)
  return valid_until_time_.Release();
}
inline void ficc_BilateralOrder_Rtn::set_allocated_valid_until_time(std::string* valid_until_time) {
  if (valid_until_time != nullptr) {
    
  } else {
    
  }
  valid_until_time_.SetAllocated(valid_until_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (valid_until_time_.IsDefault()) {
    valid_until_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Rtn.valid_until_time)
}

// string client_ref_id = 37;
inline void ficc_BilateralOrder_Rtn::clear_client_ref_id() {
  client_ref_id_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Rtn::client_ref_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.client_ref_id)
  return _internal_client_ref_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Rtn::set_client_ref_id(ArgT0&& arg0, ArgT... args) {
 
 client_ref_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.client_ref_id)
}
inline std::string* ficc_BilateralOrder_Rtn::mutable_client_ref_id() {
  std::string* _s = _internal_mutable_client_ref_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Rtn.client_ref_id)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Rtn::_internal_client_ref_id() const {
  return client_ref_id_.Get();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_client_ref_id(const std::string& value) {
  
  client_ref_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::_internal_mutable_client_ref_id() {
  
  return client_ref_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::release_client_ref_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Rtn.client_ref_id)
  return client_ref_id_.Release();
}
inline void ficc_BilateralOrder_Rtn::set_allocated_client_ref_id(std::string* client_ref_id) {
  if (client_ref_id != nullptr) {
    
  } else {
    
  }
  client_ref_id_.SetAllocated(client_ref_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_ref_id_.IsDefault()) {
    client_ref_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Rtn.client_ref_id)
}

// uint64 routing_type = 38;
inline void ficc_BilateralOrder_Rtn::clear_routing_type() {
  routing_type_ = uint64_t{0u};
}
inline uint64_t ficc_BilateralOrder_Rtn::_internal_routing_type() const {
  return routing_type_;
}
inline uint64_t ficc_BilateralOrder_Rtn::routing_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.routing_type)
  return _internal_routing_type();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_routing_type(uint64_t value) {
  
  routing_type_ = value;
}
inline void ficc_BilateralOrder_Rtn::set_routing_type(uint64_t value) {
  _internal_set_routing_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.routing_type)
}

// uint64 market_indicator = 39;
inline void ficc_BilateralOrder_Rtn::clear_market_indicator() {
  market_indicator_ = uint64_t{0u};
}
inline uint64_t ficc_BilateralOrder_Rtn::_internal_market_indicator() const {
  return market_indicator_;
}
inline uint64_t ficc_BilateralOrder_Rtn::market_indicator() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.market_indicator)
  return _internal_market_indicator();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_market_indicator(uint64_t value) {
  
  market_indicator_ = value;
}
inline void ficc_BilateralOrder_Rtn::set_market_indicator(uint64_t value) {
  _internal_set_market_indicator(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.market_indicator)
}

// string trading_day = 40;
inline void ficc_BilateralOrder_Rtn::clear_trading_day() {
  trading_day_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Rtn::trading_day() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.trading_day)
  return _internal_trading_day();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Rtn::set_trading_day(ArgT0&& arg0, ArgT... args) {
 
 trading_day_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.trading_day)
}
inline std::string* ficc_BilateralOrder_Rtn::mutable_trading_day() {
  std::string* _s = _internal_mutable_trading_day();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Rtn.trading_day)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Rtn::_internal_trading_day() const {
  return trading_day_.Get();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_trading_day(const std::string& value) {
  
  trading_day_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::_internal_mutable_trading_day() {
  
  return trading_day_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::release_trading_day() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Rtn.trading_day)
  return trading_day_.Release();
}
inline void ficc_BilateralOrder_Rtn::set_allocated_trading_day(std::string* trading_day) {
  if (trading_day != nullptr) {
    
  } else {
    
  }
  trading_day_.SetAllocated(trading_day, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trading_day_.IsDefault()) {
    trading_day_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Rtn.trading_day)
}

// uint64 ask_vol_traded = 41;
inline void ficc_BilateralOrder_Rtn::clear_ask_vol_traded() {
  ask_vol_traded_ = uint64_t{0u};
}
inline uint64_t ficc_BilateralOrder_Rtn::_internal_ask_vol_traded() const {
  return ask_vol_traded_;
}
inline uint64_t ficc_BilateralOrder_Rtn::ask_vol_traded() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.ask_vol_traded)
  return _internal_ask_vol_traded();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_ask_vol_traded(uint64_t value) {
  
  ask_vol_traded_ = value;
}
inline void ficc_BilateralOrder_Rtn::set_ask_vol_traded(uint64_t value) {
  _internal_set_ask_vol_traded(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.ask_vol_traded)
}

// uint64 ask_vol_total = 42;
inline void ficc_BilateralOrder_Rtn::clear_ask_vol_total() {
  ask_vol_total_ = uint64_t{0u};
}
inline uint64_t ficc_BilateralOrder_Rtn::_internal_ask_vol_total() const {
  return ask_vol_total_;
}
inline uint64_t ficc_BilateralOrder_Rtn::ask_vol_total() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.ask_vol_total)
  return _internal_ask_vol_total();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_ask_vol_total(uint64_t value) {
  
  ask_vol_total_ = value;
}
inline void ficc_BilateralOrder_Rtn::set_ask_vol_total(uint64_t value) {
  _internal_set_ask_vol_total(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.ask_vol_total)
}

// uint64 bid_vol_traded = 43;
inline void ficc_BilateralOrder_Rtn::clear_bid_vol_traded() {
  bid_vol_traded_ = uint64_t{0u};
}
inline uint64_t ficc_BilateralOrder_Rtn::_internal_bid_vol_traded() const {
  return bid_vol_traded_;
}
inline uint64_t ficc_BilateralOrder_Rtn::bid_vol_traded() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.bid_vol_traded)
  return _internal_bid_vol_traded();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_bid_vol_traded(uint64_t value) {
  
  bid_vol_traded_ = value;
}
inline void ficc_BilateralOrder_Rtn::set_bid_vol_traded(uint64_t value) {
  _internal_set_bid_vol_traded(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.bid_vol_traded)
}

// uint64 bid_vol_total = 44;
inline void ficc_BilateralOrder_Rtn::clear_bid_vol_total() {
  bid_vol_total_ = uint64_t{0u};
}
inline uint64_t ficc_BilateralOrder_Rtn::_internal_bid_vol_total() const {
  return bid_vol_total_;
}
inline uint64_t ficc_BilateralOrder_Rtn::bid_vol_total() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.bid_vol_total)
  return _internal_bid_vol_total();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_bid_vol_total(uint64_t value) {
  
  bid_vol_total_ = value;
}
inline void ficc_BilateralOrder_Rtn::set_bid_vol_total(uint64_t value) {
  _internal_set_bid_vol_total(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.bid_vol_total)
}

// string order_submit_status = 45;
inline void ficc_BilateralOrder_Rtn::clear_order_submit_status() {
  order_submit_status_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Rtn::order_submit_status() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.order_submit_status)
  return _internal_order_submit_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Rtn::set_order_submit_status(ArgT0&& arg0, ArgT... args) {
 
 order_submit_status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.order_submit_status)
}
inline std::string* ficc_BilateralOrder_Rtn::mutable_order_submit_status() {
  std::string* _s = _internal_mutable_order_submit_status();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Rtn.order_submit_status)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Rtn::_internal_order_submit_status() const {
  return order_submit_status_.Get();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_order_submit_status(const std::string& value) {
  
  order_submit_status_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::_internal_mutable_order_submit_status() {
  
  return order_submit_status_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::release_order_submit_status() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Rtn.order_submit_status)
  return order_submit_status_.Release();
}
inline void ficc_BilateralOrder_Rtn::set_allocated_order_submit_status(std::string* order_submit_status) {
  if (order_submit_status != nullptr) {
    
  } else {
    
  }
  order_submit_status_.SetAllocated(order_submit_status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_submit_status_.IsDefault()) {
    order_submit_status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Rtn.order_submit_status)
}

// string order_status = 46;
inline void ficc_BilateralOrder_Rtn::clear_order_status() {
  order_status_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Rtn::order_status() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.order_status)
  return _internal_order_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Rtn::set_order_status(ArgT0&& arg0, ArgT... args) {
 
 order_status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.order_status)
}
inline std::string* ficc_BilateralOrder_Rtn::mutable_order_status() {
  std::string* _s = _internal_mutable_order_status();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Rtn.order_status)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Rtn::_internal_order_status() const {
  return order_status_.Get();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_order_status(const std::string& value) {
  
  order_status_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::_internal_mutable_order_status() {
  
  return order_status_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::release_order_status() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Rtn.order_status)
  return order_status_.Release();
}
inline void ficc_BilateralOrder_Rtn::set_allocated_order_status(std::string* order_status) {
  if (order_status != nullptr) {
    
  } else {
    
  }
  order_status_.SetAllocated(order_status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_status_.IsDefault()) {
    order_status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Rtn.order_status)
}

// string update_time = 47;
inline void ficc_BilateralOrder_Rtn::clear_update_time() {
  update_time_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Rtn::update_time() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.update_time)
  return _internal_update_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Rtn::set_update_time(ArgT0&& arg0, ArgT... args) {
 
 update_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.update_time)
}
inline std::string* ficc_BilateralOrder_Rtn::mutable_update_time() {
  std::string* _s = _internal_mutable_update_time();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Rtn.update_time)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Rtn::_internal_update_time() const {
  return update_time_.Get();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_update_time(const std::string& value) {
  
  update_time_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::_internal_mutable_update_time() {
  
  return update_time_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::release_update_time() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Rtn.update_time)
  return update_time_.Release();
}
inline void ficc_BilateralOrder_Rtn::set_allocated_update_time(std::string* update_time) {
  if (update_time != nullptr) {
    
  } else {
    
  }
  update_time_.SetAllocated(update_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (update_time_.IsDefault()) {
    update_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Rtn.update_time)
}

// string cancel_time = 48;
inline void ficc_BilateralOrder_Rtn::clear_cancel_time() {
  cancel_time_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Rtn::cancel_time() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.cancel_time)
  return _internal_cancel_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Rtn::set_cancel_time(ArgT0&& arg0, ArgT... args) {
 
 cancel_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.cancel_time)
}
inline std::string* ficc_BilateralOrder_Rtn::mutable_cancel_time() {
  std::string* _s = _internal_mutable_cancel_time();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Rtn.cancel_time)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Rtn::_internal_cancel_time() const {
  return cancel_time_.Get();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_cancel_time(const std::string& value) {
  
  cancel_time_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::_internal_mutable_cancel_time() {
  
  return cancel_time_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::release_cancel_time() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Rtn.cancel_time)
  return cancel_time_.Release();
}
inline void ficc_BilateralOrder_Rtn::set_allocated_cancel_time(std::string* cancel_time) {
  if (cancel_time != nullptr) {
    
  } else {
    
  }
  cancel_time_.SetAllocated(cancel_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cancel_time_.IsDefault()) {
    cancel_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Rtn.cancel_time)
}

// uint64 ret_code = 49;
inline void ficc_BilateralOrder_Rtn::clear_ret_code() {
  ret_code_ = uint64_t{0u};
}
inline uint64_t ficc_BilateralOrder_Rtn::_internal_ret_code() const {
  return ret_code_;
}
inline uint64_t ficc_BilateralOrder_Rtn::ret_code() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.ret_code)
  return _internal_ret_code();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_ret_code(uint64_t value) {
  
  ret_code_ = value;
}
inline void ficc_BilateralOrder_Rtn::set_ret_code(uint64_t value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.ret_code)
}

// string ret_msg = 50;
inline void ficc_BilateralOrder_Rtn::clear_ret_msg() {
  ret_msg_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Rtn::ret_msg() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.ret_msg)
  return _internal_ret_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Rtn::set_ret_msg(ArgT0&& arg0, ArgT... args) {
 
 ret_msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.ret_msg)
}
inline std::string* ficc_BilateralOrder_Rtn::mutable_ret_msg() {
  std::string* _s = _internal_mutable_ret_msg();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Rtn.ret_msg)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Rtn::_internal_ret_msg() const {
  return ret_msg_.Get();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_ret_msg(const std::string& value) {
  
  ret_msg_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::_internal_mutable_ret_msg() {
  
  return ret_msg_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::release_ret_msg() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Rtn.ret_msg)
  return ret_msg_.Release();
}
inline void ficc_BilateralOrder_Rtn::set_allocated_ret_msg(std::string* ret_msg) {
  if (ret_msg != nullptr) {
    
  } else {
    
  }
  ret_msg_.SetAllocated(ret_msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ret_msg_.IsDefault()) {
    ret_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Rtn.ret_msg)
}

// string action_flag = 51;
inline void ficc_BilateralOrder_Rtn::clear_action_flag() {
  action_flag_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Rtn::action_flag() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.action_flag)
  return _internal_action_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Rtn::set_action_flag(ArgT0&& arg0, ArgT... args) {
 
 action_flag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.action_flag)
}
inline std::string* ficc_BilateralOrder_Rtn::mutable_action_flag() {
  std::string* _s = _internal_mutable_action_flag();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Rtn.action_flag)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Rtn::_internal_action_flag() const {
  return action_flag_.Get();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_action_flag(const std::string& value) {
  
  action_flag_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::_internal_mutable_action_flag() {
  
  return action_flag_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::release_action_flag() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Rtn.action_flag)
  return action_flag_.Release();
}
inline void ficc_BilateralOrder_Rtn::set_allocated_action_flag(std::string* action_flag) {
  if (action_flag != nullptr) {
    
  } else {
    
  }
  action_flag_.SetAllocated(action_flag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_flag_.IsDefault()) {
    action_flag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Rtn.action_flag)
}

// string order_source = 52;
inline void ficc_BilateralOrder_Rtn::clear_order_source() {
  order_source_.ClearToEmpty();
}
inline const std::string& ficc_BilateralOrder_Rtn::order_source() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.order_source)
  return _internal_order_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_BilateralOrder_Rtn::set_order_source(ArgT0&& arg0, ArgT... args) {
 
 order_source_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.order_source)
}
inline std::string* ficc_BilateralOrder_Rtn::mutable_order_source() {
  std::string* _s = _internal_mutable_order_source();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_BilateralOrder_Rtn.order_source)
  return _s;
}
inline const std::string& ficc_BilateralOrder_Rtn::_internal_order_source() const {
  return order_source_.Get();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_order_source(const std::string& value) {
  
  order_source_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::_internal_mutable_order_source() {
  
  return order_source_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_BilateralOrder_Rtn::release_order_source() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_BilateralOrder_Rtn.order_source)
  return order_source_.Release();
}
inline void ficc_BilateralOrder_Rtn::set_allocated_order_source(std::string* order_source) {
  if (order_source != nullptr) {
    
  } else {
    
  }
  order_source_.SetAllocated(order_source, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_source_.IsDefault()) {
    order_source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_BilateralOrder_Rtn.order_source)
}

// uint32 sequence_no = 53;
inline void ficc_BilateralOrder_Rtn::clear_sequence_no() {
  sequence_no_ = 0u;
}
inline uint32_t ficc_BilateralOrder_Rtn::_internal_sequence_no() const {
  return sequence_no_;
}
inline uint32_t ficc_BilateralOrder_Rtn::sequence_no() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_BilateralOrder_Rtn.sequence_no)
  return _internal_sequence_no();
}
inline void ficc_BilateralOrder_Rtn::_internal_set_sequence_no(uint32_t value) {
  
  sequence_no_ = value;
}
inline void ficc_BilateralOrder_Rtn::set_sequence_no(uint32_t value) {
  _internal_set_sequence_no(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_BilateralOrder_Rtn.sequence_no)
}

// -------------------------------------------------------------------

// ficc_SystemMonitor

// .message_head.head head = 1;
inline bool ficc_SystemMonitor::_internal_has_head() const {
  return this != internal_default_instance() && head_ != nullptr;
}
inline bool ficc_SystemMonitor::has_head() const {
  return _internal_has_head();
}
inline const ::message_head::head& ficc_SystemMonitor::_internal_head() const {
  const ::message_head::head* p = head_;
  return p != nullptr ? *p : reinterpret_cast<const ::message_head::head&>(
      ::message_head::_head_default_instance_);
}
inline const ::message_head::head& ficc_SystemMonitor::head() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_SystemMonitor.head)
  return _internal_head();
}
inline void ficc_SystemMonitor::unsafe_arena_set_allocated_head(
    ::message_head::head* head) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ficc_message.ficc_SystemMonitor.head)
}
inline ::message_head::head* ficc_SystemMonitor::release_head() {
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message_head::head* ficc_SystemMonitor::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_SystemMonitor.head)
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
  return temp;
}
inline ::message_head::head* ficc_SystemMonitor::_internal_mutable_head() {
  
  if (head_ == nullptr) {
    auto* p = CreateMaybeMessage<::message_head::head>(GetArenaForAllocation());
    head_ = p;
  }
  return head_;
}
inline ::message_head::head* ficc_SystemMonitor::mutable_head() {
  ::message_head::head* _msg = _internal_mutable_head();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_SystemMonitor.head)
  return _msg;
}
inline void ficc_SystemMonitor::set_allocated_head(::message_head::head* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head));
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_SystemMonitor.head)
}

// uint32 status = 2;
inline void ficc_SystemMonitor::clear_status() {
  status_ = 0u;
}
inline uint32_t ficc_SystemMonitor::_internal_status() const {
  return status_;
}
inline uint32_t ficc_SystemMonitor::status() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_SystemMonitor.status)
  return _internal_status();
}
inline void ficc_SystemMonitor::_internal_set_status(uint32_t value) {
  
  status_ = value;
}
inline void ficc_SystemMonitor::set_status(uint32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_SystemMonitor.status)
}

// string msg = 3;
inline void ficc_SystemMonitor::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& ficc_SystemMonitor::msg() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_SystemMonitor.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_SystemMonitor::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_SystemMonitor.msg)
}
inline std::string* ficc_SystemMonitor::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_SystemMonitor.msg)
  return _s;
}
inline const std::string& ficc_SystemMonitor::_internal_msg() const {
  return msg_.Get();
}
inline void ficc_SystemMonitor::_internal_set_msg(const std::string& value) {
  
  msg_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_SystemMonitor::_internal_mutable_msg() {
  
  return msg_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_SystemMonitor::release_msg() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_SystemMonitor.msg)
  return msg_.Release();
}
inline void ficc_SystemMonitor::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_.IsDefault()) {
    msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_SystemMonitor.msg)
}

// string send_time = 4;
inline void ficc_SystemMonitor::clear_send_time() {
  send_time_.ClearToEmpty();
}
inline const std::string& ficc_SystemMonitor::send_time() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_SystemMonitor.send_time)
  return _internal_send_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_SystemMonitor::set_send_time(ArgT0&& arg0, ArgT... args) {
 
 send_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_SystemMonitor.send_time)
}
inline std::string* ficc_SystemMonitor::mutable_send_time() {
  std::string* _s = _internal_mutable_send_time();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_SystemMonitor.send_time)
  return _s;
}
inline const std::string& ficc_SystemMonitor::_internal_send_time() const {
  return send_time_.Get();
}
inline void ficc_SystemMonitor::_internal_set_send_time(const std::string& value) {
  
  send_time_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_SystemMonitor::_internal_mutable_send_time() {
  
  return send_time_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_SystemMonitor::release_send_time() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_SystemMonitor.send_time)
  return send_time_.Release();
}
inline void ficc_SystemMonitor::set_allocated_send_time(std::string* send_time) {
  if (send_time != nullptr) {
    
  } else {
    
  }
  send_time_.SetAllocated(send_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (send_time_.IsDefault()) {
    send_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_SystemMonitor.send_time)
}

// string tkernel_ip = 5;
inline void ficc_SystemMonitor::clear_tkernel_ip() {
  tkernel_ip_.ClearToEmpty();
}
inline const std::string& ficc_SystemMonitor::tkernel_ip() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_SystemMonitor.tkernel_ip)
  return _internal_tkernel_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_SystemMonitor::set_tkernel_ip(ArgT0&& arg0, ArgT... args) {
 
 tkernel_ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_SystemMonitor.tkernel_ip)
}
inline std::string* ficc_SystemMonitor::mutable_tkernel_ip() {
  std::string* _s = _internal_mutable_tkernel_ip();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_SystemMonitor.tkernel_ip)
  return _s;
}
inline const std::string& ficc_SystemMonitor::_internal_tkernel_ip() const {
  return tkernel_ip_.Get();
}
inline void ficc_SystemMonitor::_internal_set_tkernel_ip(const std::string& value) {
  
  tkernel_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_SystemMonitor::_internal_mutable_tkernel_ip() {
  
  return tkernel_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_SystemMonitor::release_tkernel_ip() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_SystemMonitor.tkernel_ip)
  return tkernel_ip_.Release();
}
inline void ficc_SystemMonitor::set_allocated_tkernel_ip(std::string* tkernel_ip) {
  if (tkernel_ip != nullptr) {
    
  } else {
    
  }
  tkernel_ip_.SetAllocated(tkernel_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tkernel_ip_.IsDefault()) {
    tkernel_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_SystemMonitor.tkernel_ip)
}

// string trade_day = 6;
inline void ficc_SystemMonitor::clear_trade_day() {
  trade_day_.ClearToEmpty();
}
inline const std::string& ficc_SystemMonitor::trade_day() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_SystemMonitor.trade_day)
  return _internal_trade_day();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_SystemMonitor::set_trade_day(ArgT0&& arg0, ArgT... args) {
 
 trade_day_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_SystemMonitor.trade_day)
}
inline std::string* ficc_SystemMonitor::mutable_trade_day() {
  std::string* _s = _internal_mutable_trade_day();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_SystemMonitor.trade_day)
  return _s;
}
inline const std::string& ficc_SystemMonitor::_internal_trade_day() const {
  return trade_day_.Get();
}
inline void ficc_SystemMonitor::_internal_set_trade_day(const std::string& value) {
  
  trade_day_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_SystemMonitor::_internal_mutable_trade_day() {
  
  return trade_day_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_SystemMonitor::release_trade_day() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_SystemMonitor.trade_day)
  return trade_day_.Release();
}
inline void ficc_SystemMonitor::set_allocated_trade_day(std::string* trade_day) {
  if (trade_day != nullptr) {
    
  } else {
    
  }
  trade_day_.SetAllocated(trade_day, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trade_day_.IsDefault()) {
    trade_day_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_SystemMonitor.trade_day)
}

// -------------------------------------------------------------------

// ficc_OrderAction_Req

// .message_head.head head = 1;
inline bool ficc_OrderAction_Req::_internal_has_head() const {
  return this != internal_default_instance() && head_ != nullptr;
}
inline bool ficc_OrderAction_Req::has_head() const {
  return _internal_has_head();
}
inline const ::message_head::head& ficc_OrderAction_Req::_internal_head() const {
  const ::message_head::head* p = head_;
  return p != nullptr ? *p : reinterpret_cast<const ::message_head::head&>(
      ::message_head::_head_default_instance_);
}
inline const ::message_head::head& ficc_OrderAction_Req::head() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_OrderAction_Req.head)
  return _internal_head();
}
inline void ficc_OrderAction_Req::unsafe_arena_set_allocated_head(
    ::message_head::head* head) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ficc_message.ficc_OrderAction_Req.head)
}
inline ::message_head::head* ficc_OrderAction_Req::release_head() {
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message_head::head* ficc_OrderAction_Req::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_OrderAction_Req.head)
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
  return temp;
}
inline ::message_head::head* ficc_OrderAction_Req::_internal_mutable_head() {
  
  if (head_ == nullptr) {
    auto* p = CreateMaybeMessage<::message_head::head>(GetArenaForAllocation());
    head_ = p;
  }
  return head_;
}
inline ::message_head::head* ficc_OrderAction_Req::mutable_head() {
  ::message_head::head* _msg = _internal_mutable_head();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_OrderAction_Req.head)
  return _msg;
}
inline void ficc_OrderAction_Req::set_allocated_head(::message_head::head* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head));
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_OrderAction_Req.head)
}

// string order_inner_id = 2;
inline void ficc_OrderAction_Req::clear_order_inner_id() {
  order_inner_id_.ClearToEmpty();
}
inline const std::string& ficc_OrderAction_Req::order_inner_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_OrderAction_Req.order_inner_id)
  return _internal_order_inner_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_OrderAction_Req::set_order_inner_id(ArgT0&& arg0, ArgT... args) {
 
 order_inner_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_OrderAction_Req.order_inner_id)
}
inline std::string* ficc_OrderAction_Req::mutable_order_inner_id() {
  std::string* _s = _internal_mutable_order_inner_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_OrderAction_Req.order_inner_id)
  return _s;
}
inline const std::string& ficc_OrderAction_Req::_internal_order_inner_id() const {
  return order_inner_id_.Get();
}
inline void ficc_OrderAction_Req::_internal_set_order_inner_id(const std::string& value) {
  
  order_inner_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_OrderAction_Req::_internal_mutable_order_inner_id() {
  
  return order_inner_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_OrderAction_Req::release_order_inner_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_OrderAction_Req.order_inner_id)
  return order_inner_id_.Release();
}
inline void ficc_OrderAction_Req::set_allocated_order_inner_id(std::string* order_inner_id) {
  if (order_inner_id != nullptr) {
    
  } else {
    
  }
  order_inner_id_.SetAllocated(order_inner_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_inner_id_.IsDefault()) {
    order_inner_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_OrderAction_Req.order_inner_id)
}

// uint64 quote_type = 3;
inline void ficc_OrderAction_Req::clear_quote_type() {
  quote_type_ = uint64_t{0u};
}
inline uint64_t ficc_OrderAction_Req::_internal_quote_type() const {
  return quote_type_;
}
inline uint64_t ficc_OrderAction_Req::quote_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_OrderAction_Req.quote_type)
  return _internal_quote_type();
}
inline void ficc_OrderAction_Req::_internal_set_quote_type(uint64_t value) {
  
  quote_type_ = value;
}
inline void ficc_OrderAction_Req::set_quote_type(uint64_t value) {
  _internal_set_quote_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_OrderAction_Req.quote_type)
}

// uint32 user_id = 4;
inline void ficc_OrderAction_Req::clear_user_id() {
  user_id_ = 0u;
}
inline uint32_t ficc_OrderAction_Req::_internal_user_id() const {
  return user_id_;
}
inline uint32_t ficc_OrderAction_Req::user_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_OrderAction_Req.user_id)
  return _internal_user_id();
}
inline void ficc_OrderAction_Req::_internal_set_user_id(uint32_t value) {
  
  user_id_ = value;
}
inline void ficc_OrderAction_Req::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_OrderAction_Req.user_id)
}

// -------------------------------------------------------------------

// ficc_OrderAction_Rsp

// .message_head.head head = 1;
inline bool ficc_OrderAction_Rsp::_internal_has_head() const {
  return this != internal_default_instance() && head_ != nullptr;
}
inline bool ficc_OrderAction_Rsp::has_head() const {
  return _internal_has_head();
}
inline const ::message_head::head& ficc_OrderAction_Rsp::_internal_head() const {
  const ::message_head::head* p = head_;
  return p != nullptr ? *p : reinterpret_cast<const ::message_head::head&>(
      ::message_head::_head_default_instance_);
}
inline const ::message_head::head& ficc_OrderAction_Rsp::head() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_OrderAction_Rsp.head)
  return _internal_head();
}
inline void ficc_OrderAction_Rsp::unsafe_arena_set_allocated_head(
    ::message_head::head* head) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ficc_message.ficc_OrderAction_Rsp.head)
}
inline ::message_head::head* ficc_OrderAction_Rsp::release_head() {
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message_head::head* ficc_OrderAction_Rsp::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_OrderAction_Rsp.head)
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
  return temp;
}
inline ::message_head::head* ficc_OrderAction_Rsp::_internal_mutable_head() {
  
  if (head_ == nullptr) {
    auto* p = CreateMaybeMessage<::message_head::head>(GetArenaForAllocation());
    head_ = p;
  }
  return head_;
}
inline ::message_head::head* ficc_OrderAction_Rsp::mutable_head() {
  ::message_head::head* _msg = _internal_mutable_head();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_OrderAction_Rsp.head)
  return _msg;
}
inline void ficc_OrderAction_Rsp::set_allocated_head(::message_head::head* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head));
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_OrderAction_Rsp.head)
}

// string order_inner_id = 2;
inline void ficc_OrderAction_Rsp::clear_order_inner_id() {
  order_inner_id_.ClearToEmpty();
}
inline const std::string& ficc_OrderAction_Rsp::order_inner_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_OrderAction_Rsp.order_inner_id)
  return _internal_order_inner_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_OrderAction_Rsp::set_order_inner_id(ArgT0&& arg0, ArgT... args) {
 
 order_inner_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_OrderAction_Rsp.order_inner_id)
}
inline std::string* ficc_OrderAction_Rsp::mutable_order_inner_id() {
  std::string* _s = _internal_mutable_order_inner_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_OrderAction_Rsp.order_inner_id)
  return _s;
}
inline const std::string& ficc_OrderAction_Rsp::_internal_order_inner_id() const {
  return order_inner_id_.Get();
}
inline void ficc_OrderAction_Rsp::_internal_set_order_inner_id(const std::string& value) {
  
  order_inner_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_OrderAction_Rsp::_internal_mutable_order_inner_id() {
  
  return order_inner_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_OrderAction_Rsp::release_order_inner_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_OrderAction_Rsp.order_inner_id)
  return order_inner_id_.Release();
}
inline void ficc_OrderAction_Rsp::set_allocated_order_inner_id(std::string* order_inner_id) {
  if (order_inner_id != nullptr) {
    
  } else {
    
  }
  order_inner_id_.SetAllocated(order_inner_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_inner_id_.IsDefault()) {
    order_inner_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_OrderAction_Rsp.order_inner_id)
}

// string secu_code = 3;
inline void ficc_OrderAction_Rsp::clear_secu_code() {
  secu_code_.ClearToEmpty();
}
inline const std::string& ficc_OrderAction_Rsp::secu_code() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_OrderAction_Rsp.secu_code)
  return _internal_secu_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_OrderAction_Rsp::set_secu_code(ArgT0&& arg0, ArgT... args) {
 
 secu_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_OrderAction_Rsp.secu_code)
}
inline std::string* ficc_OrderAction_Rsp::mutable_secu_code() {
  std::string* _s = _internal_mutable_secu_code();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_OrderAction_Rsp.secu_code)
  return _s;
}
inline const std::string& ficc_OrderAction_Rsp::_internal_secu_code() const {
  return secu_code_.Get();
}
inline void ficc_OrderAction_Rsp::_internal_set_secu_code(const std::string& value) {
  
  secu_code_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_OrderAction_Rsp::_internal_mutable_secu_code() {
  
  return secu_code_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_OrderAction_Rsp::release_secu_code() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_OrderAction_Rsp.secu_code)
  return secu_code_.Release();
}
inline void ficc_OrderAction_Rsp::set_allocated_secu_code(std::string* secu_code) {
  if (secu_code != nullptr) {
    
  } else {
    
  }
  secu_code_.SetAllocated(secu_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secu_code_.IsDefault()) {
    secu_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_OrderAction_Rsp.secu_code)
}

// string send_time = 4;
inline void ficc_OrderAction_Rsp::clear_send_time() {
  send_time_.ClearToEmpty();
}
inline const std::string& ficc_OrderAction_Rsp::send_time() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_OrderAction_Rsp.send_time)
  return _internal_send_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_OrderAction_Rsp::set_send_time(ArgT0&& arg0, ArgT... args) {
 
 send_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_OrderAction_Rsp.send_time)
}
inline std::string* ficc_OrderAction_Rsp::mutable_send_time() {
  std::string* _s = _internal_mutable_send_time();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_OrderAction_Rsp.send_time)
  return _s;
}
inline const std::string& ficc_OrderAction_Rsp::_internal_send_time() const {
  return send_time_.Get();
}
inline void ficc_OrderAction_Rsp::_internal_set_send_time(const std::string& value) {
  
  send_time_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_OrderAction_Rsp::_internal_mutable_send_time() {
  
  return send_time_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_OrderAction_Rsp::release_send_time() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_OrderAction_Rsp.send_time)
  return send_time_.Release();
}
inline void ficc_OrderAction_Rsp::set_allocated_send_time(std::string* send_time) {
  if (send_time != nullptr) {
    
  } else {
    
  }
  send_time_.SetAllocated(send_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (send_time_.IsDefault()) {
    send_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_OrderAction_Rsp.send_time)
}

// string order_status = 5;
inline void ficc_OrderAction_Rsp::clear_order_status() {
  order_status_.ClearToEmpty();
}
inline const std::string& ficc_OrderAction_Rsp::order_status() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_OrderAction_Rsp.order_status)
  return _internal_order_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_OrderAction_Rsp::set_order_status(ArgT0&& arg0, ArgT... args) {
 
 order_status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_OrderAction_Rsp.order_status)
}
inline std::string* ficc_OrderAction_Rsp::mutable_order_status() {
  std::string* _s = _internal_mutable_order_status();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_OrderAction_Rsp.order_status)
  return _s;
}
inline const std::string& ficc_OrderAction_Rsp::_internal_order_status() const {
  return order_status_.Get();
}
inline void ficc_OrderAction_Rsp::_internal_set_order_status(const std::string& value) {
  
  order_status_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_OrderAction_Rsp::_internal_mutable_order_status() {
  
  return order_status_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_OrderAction_Rsp::release_order_status() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_OrderAction_Rsp.order_status)
  return order_status_.Release();
}
inline void ficc_OrderAction_Rsp::set_allocated_order_status(std::string* order_status) {
  if (order_status != nullptr) {
    
  } else {
    
  }
  order_status_.SetAllocated(order_status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_status_.IsDefault()) {
    order_status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_OrderAction_Rsp.order_status)
}

// uint32 err_id = 6;
inline void ficc_OrderAction_Rsp::clear_err_id() {
  err_id_ = 0u;
}
inline uint32_t ficc_OrderAction_Rsp::_internal_err_id() const {
  return err_id_;
}
inline uint32_t ficc_OrderAction_Rsp::err_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_OrderAction_Rsp.err_id)
  return _internal_err_id();
}
inline void ficc_OrderAction_Rsp::_internal_set_err_id(uint32_t value) {
  
  err_id_ = value;
}
inline void ficc_OrderAction_Rsp::set_err_id(uint32_t value) {
  _internal_set_err_id(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_OrderAction_Rsp.err_id)
}

// string err_msg = 7;
inline void ficc_OrderAction_Rsp::clear_err_msg() {
  err_msg_.ClearToEmpty();
}
inline const std::string& ficc_OrderAction_Rsp::err_msg() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_OrderAction_Rsp.err_msg)
  return _internal_err_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_OrderAction_Rsp::set_err_msg(ArgT0&& arg0, ArgT... args) {
 
 err_msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_OrderAction_Rsp.err_msg)
}
inline std::string* ficc_OrderAction_Rsp::mutable_err_msg() {
  std::string* _s = _internal_mutable_err_msg();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_OrderAction_Rsp.err_msg)
  return _s;
}
inline const std::string& ficc_OrderAction_Rsp::_internal_err_msg() const {
  return err_msg_.Get();
}
inline void ficc_OrderAction_Rsp::_internal_set_err_msg(const std::string& value) {
  
  err_msg_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_OrderAction_Rsp::_internal_mutable_err_msg() {
  
  return err_msg_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_OrderAction_Rsp::release_err_msg() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_OrderAction_Rsp.err_msg)
  return err_msg_.Release();
}
inline void ficc_OrderAction_Rsp::set_allocated_err_msg(std::string* err_msg) {
  if (err_msg != nullptr) {
    
  } else {
    
  }
  err_msg_.SetAllocated(err_msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_msg_.IsDefault()) {
    err_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_OrderAction_Rsp.err_msg)
}

// -------------------------------------------------------------------

// ficc_QryBilateralOrder_Req

// .message_head.head head = 1;
inline bool ficc_QryBilateralOrder_Req::_internal_has_head() const {
  return this != internal_default_instance() && head_ != nullptr;
}
inline bool ficc_QryBilateralOrder_Req::has_head() const {
  return _internal_has_head();
}
inline const ::message_head::head& ficc_QryBilateralOrder_Req::_internal_head() const {
  const ::message_head::head* p = head_;
  return p != nullptr ? *p : reinterpret_cast<const ::message_head::head&>(
      ::message_head::_head_default_instance_);
}
inline const ::message_head::head& ficc_QryBilateralOrder_Req::head() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_QryBilateralOrder_Req.head)
  return _internal_head();
}
inline void ficc_QryBilateralOrder_Req::unsafe_arena_set_allocated_head(
    ::message_head::head* head) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ficc_message.ficc_QryBilateralOrder_Req.head)
}
inline ::message_head::head* ficc_QryBilateralOrder_Req::release_head() {
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message_head::head* ficc_QryBilateralOrder_Req::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_QryBilateralOrder_Req.head)
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
  return temp;
}
inline ::message_head::head* ficc_QryBilateralOrder_Req::_internal_mutable_head() {
  
  if (head_ == nullptr) {
    auto* p = CreateMaybeMessage<::message_head::head>(GetArenaForAllocation());
    head_ = p;
  }
  return head_;
}
inline ::message_head::head* ficc_QryBilateralOrder_Req::mutable_head() {
  ::message_head::head* _msg = _internal_mutable_head();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_QryBilateralOrder_Req.head)
  return _msg;
}
inline void ficc_QryBilateralOrder_Req::set_allocated_head(::message_head::head* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head));
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_QryBilateralOrder_Req.head)
}

// uint32 sequence_no = 2;
inline void ficc_QryBilateralOrder_Req::clear_sequence_no() {
  sequence_no_ = 0u;
}
inline uint32_t ficc_QryBilateralOrder_Req::_internal_sequence_no() const {
  return sequence_no_;
}
inline uint32_t ficc_QryBilateralOrder_Req::sequence_no() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_QryBilateralOrder_Req.sequence_no)
  return _internal_sequence_no();
}
inline void ficc_QryBilateralOrder_Req::_internal_set_sequence_no(uint32_t value) {
  
  sequence_no_ = value;
}
inline void ficc_QryBilateralOrder_Req::set_sequence_no(uint32_t value) {
  _internal_set_sequence_no(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_QryBilateralOrder_Req.sequence_no)
}

// -------------------------------------------------------------------

// ficc_QryMatch_Req

// .message_head.head head = 1;
inline bool ficc_QryMatch_Req::_internal_has_head() const {
  return this != internal_default_instance() && head_ != nullptr;
}
inline bool ficc_QryMatch_Req::has_head() const {
  return _internal_has_head();
}
inline const ::message_head::head& ficc_QryMatch_Req::_internal_head() const {
  const ::message_head::head* p = head_;
  return p != nullptr ? *p : reinterpret_cast<const ::message_head::head&>(
      ::message_head::_head_default_instance_);
}
inline const ::message_head::head& ficc_QryMatch_Req::head() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_QryMatch_Req.head)
  return _internal_head();
}
inline void ficc_QryMatch_Req::unsafe_arena_set_allocated_head(
    ::message_head::head* head) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ficc_message.ficc_QryMatch_Req.head)
}
inline ::message_head::head* ficc_QryMatch_Req::release_head() {
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message_head::head* ficc_QryMatch_Req::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_QryMatch_Req.head)
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
  return temp;
}
inline ::message_head::head* ficc_QryMatch_Req::_internal_mutable_head() {
  
  if (head_ == nullptr) {
    auto* p = CreateMaybeMessage<::message_head::head>(GetArenaForAllocation());
    head_ = p;
  }
  return head_;
}
inline ::message_head::head* ficc_QryMatch_Req::mutable_head() {
  ::message_head::head* _msg = _internal_mutable_head();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_QryMatch_Req.head)
  return _msg;
}
inline void ficc_QryMatch_Req::set_allocated_head(::message_head::head* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head));
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_QryMatch_Req.head)
}

// uint32 sequence_no = 2;
inline void ficc_QryMatch_Req::clear_sequence_no() {
  sequence_no_ = 0u;
}
inline uint32_t ficc_QryMatch_Req::_internal_sequence_no() const {
  return sequence_no_;
}
inline uint32_t ficc_QryMatch_Req::sequence_no() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_QryMatch_Req.sequence_no)
  return _internal_sequence_no();
}
inline void ficc_QryMatch_Req::_internal_set_sequence_no(uint32_t value) {
  
  sequence_no_ = value;
}
inline void ficc_QryMatch_Req::set_sequence_no(uint32_t value) {
  _internal_set_sequence_no(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_QryMatch_Req.sequence_no)
}

// -------------------------------------------------------------------

// ficc_Match_Rtn

// .message_head.head head = 1;
inline bool ficc_Match_Rtn::_internal_has_head() const {
  return this != internal_default_instance() && head_ != nullptr;
}
inline bool ficc_Match_Rtn::has_head() const {
  return _internal_has_head();
}
inline const ::message_head::head& ficc_Match_Rtn::_internal_head() const {
  const ::message_head::head* p = head_;
  return p != nullptr ? *p : reinterpret_cast<const ::message_head::head&>(
      ::message_head::_head_default_instance_);
}
inline const ::message_head::head& ficc_Match_Rtn::head() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.head)
  return _internal_head();
}
inline void ficc_Match_Rtn::unsafe_arena_set_allocated_head(
    ::message_head::head* head) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ficc_message.ficc_Match_Rtn.head)
}
inline ::message_head::head* ficc_Match_Rtn::release_head() {
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message_head::head* ficc_Match_Rtn::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Match_Rtn.head)
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
  return temp;
}
inline ::message_head::head* ficc_Match_Rtn::_internal_mutable_head() {
  
  if (head_ == nullptr) {
    auto* p = CreateMaybeMessage<::message_head::head>(GetArenaForAllocation());
    head_ = p;
  }
  return head_;
}
inline ::message_head::head* ficc_Match_Rtn::mutable_head() {
  ::message_head::head* _msg = _internal_mutable_head();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Match_Rtn.head)
  return _msg;
}
inline void ficc_Match_Rtn::set_allocated_head(::message_head::head* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head));
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Match_Rtn.head)
}

// string order_inner_id = 2;
inline void ficc_Match_Rtn::clear_order_inner_id() {
  order_inner_id_.ClearToEmpty();
}
inline const std::string& ficc_Match_Rtn::order_inner_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.order_inner_id)
  return _internal_order_inner_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Match_Rtn::set_order_inner_id(ArgT0&& arg0, ArgT... args) {
 
 order_inner_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.order_inner_id)
}
inline std::string* ficc_Match_Rtn::mutable_order_inner_id() {
  std::string* _s = _internal_mutable_order_inner_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Match_Rtn.order_inner_id)
  return _s;
}
inline const std::string& ficc_Match_Rtn::_internal_order_inner_id() const {
  return order_inner_id_.Get();
}
inline void ficc_Match_Rtn::_internal_set_order_inner_id(const std::string& value) {
  
  order_inner_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::_internal_mutable_order_inner_id() {
  
  return order_inner_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::release_order_inner_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Match_Rtn.order_inner_id)
  return order_inner_id_.Release();
}
inline void ficc_Match_Rtn::set_allocated_order_inner_id(std::string* order_inner_id) {
  if (order_inner_id != nullptr) {
    
  } else {
    
  }
  order_inner_id_.SetAllocated(order_inner_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_inner_id_.IsDefault()) {
    order_inner_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Match_Rtn.order_inner_id)
}

// string ex_code = 3;
inline void ficc_Match_Rtn::clear_ex_code() {
  ex_code_.ClearToEmpty();
}
inline const std::string& ficc_Match_Rtn::ex_code() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.ex_code)
  return _internal_ex_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Match_Rtn::set_ex_code(ArgT0&& arg0, ArgT... args) {
 
 ex_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.ex_code)
}
inline std::string* ficc_Match_Rtn::mutable_ex_code() {
  std::string* _s = _internal_mutable_ex_code();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Match_Rtn.ex_code)
  return _s;
}
inline const std::string& ficc_Match_Rtn::_internal_ex_code() const {
  return ex_code_.Get();
}
inline void ficc_Match_Rtn::_internal_set_ex_code(const std::string& value) {
  
  ex_code_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::_internal_mutable_ex_code() {
  
  return ex_code_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::release_ex_code() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Match_Rtn.ex_code)
  return ex_code_.Release();
}
inline void ficc_Match_Rtn::set_allocated_ex_code(std::string* ex_code) {
  if (ex_code != nullptr) {
    
  } else {
    
  }
  ex_code_.SetAllocated(ex_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ex_code_.IsDefault()) {
    ex_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Match_Rtn.ex_code)
}

// string trading_day = 4;
inline void ficc_Match_Rtn::clear_trading_day() {
  trading_day_.ClearToEmpty();
}
inline const std::string& ficc_Match_Rtn::trading_day() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.trading_day)
  return _internal_trading_day();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Match_Rtn::set_trading_day(ArgT0&& arg0, ArgT... args) {
 
 trading_day_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.trading_day)
}
inline std::string* ficc_Match_Rtn::mutable_trading_day() {
  std::string* _s = _internal_mutable_trading_day();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Match_Rtn.trading_day)
  return _s;
}
inline const std::string& ficc_Match_Rtn::_internal_trading_day() const {
  return trading_day_.Get();
}
inline void ficc_Match_Rtn::_internal_set_trading_day(const std::string& value) {
  
  trading_day_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::_internal_mutable_trading_day() {
  
  return trading_day_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::release_trading_day() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Match_Rtn.trading_day)
  return trading_day_.Release();
}
inline void ficc_Match_Rtn::set_allocated_trading_day(std::string* trading_day) {
  if (trading_day != nullptr) {
    
  } else {
    
  }
  trading_day_.SetAllocated(trading_day, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trading_day_.IsDefault()) {
    trading_day_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Match_Rtn.trading_day)
}

// string trade_acct = 5;
inline void ficc_Match_Rtn::clear_trade_acct() {
  trade_acct_.ClearToEmpty();
}
inline const std::string& ficc_Match_Rtn::trade_acct() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.trade_acct)
  return _internal_trade_acct();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Match_Rtn::set_trade_acct(ArgT0&& arg0, ArgT... args) {
 
 trade_acct_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.trade_acct)
}
inline std::string* ficc_Match_Rtn::mutable_trade_acct() {
  std::string* _s = _internal_mutable_trade_acct();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Match_Rtn.trade_acct)
  return _s;
}
inline const std::string& ficc_Match_Rtn::_internal_trade_acct() const {
  return trade_acct_.Get();
}
inline void ficc_Match_Rtn::_internal_set_trade_acct(const std::string& value) {
  
  trade_acct_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::_internal_mutable_trade_acct() {
  
  return trade_acct_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::release_trade_acct() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Match_Rtn.trade_acct)
  return trade_acct_.Release();
}
inline void ficc_Match_Rtn::set_allocated_trade_acct(std::string* trade_acct) {
  if (trade_acct != nullptr) {
    
  } else {
    
  }
  trade_acct_.SetAllocated(trade_acct, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trade_acct_.IsDefault()) {
    trade_acct_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Match_Rtn.trade_acct)
}

// string fund_acct = 6;
inline void ficc_Match_Rtn::clear_fund_acct() {
  fund_acct_.ClearToEmpty();
}
inline const std::string& ficc_Match_Rtn::fund_acct() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.fund_acct)
  return _internal_fund_acct();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Match_Rtn::set_fund_acct(ArgT0&& arg0, ArgT... args) {
 
 fund_acct_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.fund_acct)
}
inline std::string* ficc_Match_Rtn::mutable_fund_acct() {
  std::string* _s = _internal_mutable_fund_acct();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Match_Rtn.fund_acct)
  return _s;
}
inline const std::string& ficc_Match_Rtn::_internal_fund_acct() const {
  return fund_acct_.Get();
}
inline void ficc_Match_Rtn::_internal_set_fund_acct(const std::string& value) {
  
  fund_acct_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::_internal_mutable_fund_acct() {
  
  return fund_acct_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::release_fund_acct() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Match_Rtn.fund_acct)
  return fund_acct_.Release();
}
inline void ficc_Match_Rtn::set_allocated_fund_acct(std::string* fund_acct) {
  if (fund_acct != nullptr) {
    
  } else {
    
  }
  fund_acct_.SetAllocated(fund_acct, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fund_acct_.IsDefault()) {
    fund_acct_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Match_Rtn.fund_acct)
}

// uint32 user_id = 7;
inline void ficc_Match_Rtn::clear_user_id() {
  user_id_ = 0u;
}
inline uint32_t ficc_Match_Rtn::_internal_user_id() const {
  return user_id_;
}
inline uint32_t ficc_Match_Rtn::user_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.user_id)
  return _internal_user_id();
}
inline void ficc_Match_Rtn::_internal_set_user_id(uint32_t value) {
  
  user_id_ = value;
}
inline void ficc_Match_Rtn::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.user_id)
}

// string order_sys_id = 8;
inline void ficc_Match_Rtn::clear_order_sys_id() {
  order_sys_id_.ClearToEmpty();
}
inline const std::string& ficc_Match_Rtn::order_sys_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.order_sys_id)
  return _internal_order_sys_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Match_Rtn::set_order_sys_id(ArgT0&& arg0, ArgT... args) {
 
 order_sys_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.order_sys_id)
}
inline std::string* ficc_Match_Rtn::mutable_order_sys_id() {
  std::string* _s = _internal_mutable_order_sys_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Match_Rtn.order_sys_id)
  return _s;
}
inline const std::string& ficc_Match_Rtn::_internal_order_sys_id() const {
  return order_sys_id_.Get();
}
inline void ficc_Match_Rtn::_internal_set_order_sys_id(const std::string& value) {
  
  order_sys_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::_internal_mutable_order_sys_id() {
  
  return order_sys_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::release_order_sys_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Match_Rtn.order_sys_id)
  return order_sys_id_.Release();
}
inline void ficc_Match_Rtn::set_allocated_order_sys_id(std::string* order_sys_id) {
  if (order_sys_id != nullptr) {
    
  } else {
    
  }
  order_sys_id_.SetAllocated(order_sys_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_sys_id_.IsDefault()) {
    order_sys_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Match_Rtn.order_sys_id)
}

// string trade_id = 9;
inline void ficc_Match_Rtn::clear_trade_id() {
  trade_id_.ClearToEmpty();
}
inline const std::string& ficc_Match_Rtn::trade_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.trade_id)
  return _internal_trade_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Match_Rtn::set_trade_id(ArgT0&& arg0, ArgT... args) {
 
 trade_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.trade_id)
}
inline std::string* ficc_Match_Rtn::mutable_trade_id() {
  std::string* _s = _internal_mutable_trade_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Match_Rtn.trade_id)
  return _s;
}
inline const std::string& ficc_Match_Rtn::_internal_trade_id() const {
  return trade_id_.Get();
}
inline void ficc_Match_Rtn::_internal_set_trade_id(const std::string& value) {
  
  trade_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::_internal_mutable_trade_id() {
  
  return trade_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::release_trade_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Match_Rtn.trade_id)
  return trade_id_.Release();
}
inline void ficc_Match_Rtn::set_allocated_trade_id(std::string* trade_id) {
  if (trade_id != nullptr) {
    
  } else {
    
  }
  trade_id_.SetAllocated(trade_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trade_id_.IsDefault()) {
    trade_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Match_Rtn.trade_id)
}

// string secu_code = 10;
inline void ficc_Match_Rtn::clear_secu_code() {
  secu_code_.ClearToEmpty();
}
inline const std::string& ficc_Match_Rtn::secu_code() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.secu_code)
  return _internal_secu_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Match_Rtn::set_secu_code(ArgT0&& arg0, ArgT... args) {
 
 secu_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.secu_code)
}
inline std::string* ficc_Match_Rtn::mutable_secu_code() {
  std::string* _s = _internal_mutable_secu_code();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Match_Rtn.secu_code)
  return _s;
}
inline const std::string& ficc_Match_Rtn::_internal_secu_code() const {
  return secu_code_.Get();
}
inline void ficc_Match_Rtn::_internal_set_secu_code(const std::string& value) {
  
  secu_code_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::_internal_mutable_secu_code() {
  
  return secu_code_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::release_secu_code() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Match_Rtn.secu_code)
  return secu_code_.Release();
}
inline void ficc_Match_Rtn::set_allocated_secu_code(std::string* secu_code) {
  if (secu_code != nullptr) {
    
  } else {
    
  }
  secu_code_.SetAllocated(secu_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secu_code_.IsDefault()) {
    secu_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Match_Rtn.secu_code)
}

// string direction = 11;
inline void ficc_Match_Rtn::clear_direction() {
  direction_.ClearToEmpty();
}
inline const std::string& ficc_Match_Rtn::direction() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.direction)
  return _internal_direction();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Match_Rtn::set_direction(ArgT0&& arg0, ArgT... args) {
 
 direction_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.direction)
}
inline std::string* ficc_Match_Rtn::mutable_direction() {
  std::string* _s = _internal_mutable_direction();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Match_Rtn.direction)
  return _s;
}
inline const std::string& ficc_Match_Rtn::_internal_direction() const {
  return direction_.Get();
}
inline void ficc_Match_Rtn::_internal_set_direction(const std::string& value) {
  
  direction_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::_internal_mutable_direction() {
  
  return direction_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::release_direction() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Match_Rtn.direction)
  return direction_.Release();
}
inline void ficc_Match_Rtn::set_allocated_direction(std::string* direction) {
  if (direction != nullptr) {
    
  } else {
    
  }
  direction_.SetAllocated(direction, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (direction_.IsDefault()) {
    direction_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Match_Rtn.direction)
}

// string offset_flag = 12;
inline void ficc_Match_Rtn::clear_offset_flag() {
  offset_flag_.ClearToEmpty();
}
inline const std::string& ficc_Match_Rtn::offset_flag() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.offset_flag)
  return _internal_offset_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Match_Rtn::set_offset_flag(ArgT0&& arg0, ArgT... args) {
 
 offset_flag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.offset_flag)
}
inline std::string* ficc_Match_Rtn::mutable_offset_flag() {
  std::string* _s = _internal_mutable_offset_flag();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Match_Rtn.offset_flag)
  return _s;
}
inline const std::string& ficc_Match_Rtn::_internal_offset_flag() const {
  return offset_flag_.Get();
}
inline void ficc_Match_Rtn::_internal_set_offset_flag(const std::string& value) {
  
  offset_flag_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::_internal_mutable_offset_flag() {
  
  return offset_flag_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::release_offset_flag() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Match_Rtn.offset_flag)
  return offset_flag_.Release();
}
inline void ficc_Match_Rtn::set_allocated_offset_flag(std::string* offset_flag) {
  if (offset_flag != nullptr) {
    
  } else {
    
  }
  offset_flag_.SetAllocated(offset_flag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (offset_flag_.IsDefault()) {
    offset_flag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Match_Rtn.offset_flag)
}

// string hedge_flag = 13;
inline void ficc_Match_Rtn::clear_hedge_flag() {
  hedge_flag_.ClearToEmpty();
}
inline const std::string& ficc_Match_Rtn::hedge_flag() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.hedge_flag)
  return _internal_hedge_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Match_Rtn::set_hedge_flag(ArgT0&& arg0, ArgT... args) {
 
 hedge_flag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.hedge_flag)
}
inline std::string* ficc_Match_Rtn::mutable_hedge_flag() {
  std::string* _s = _internal_mutable_hedge_flag();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Match_Rtn.hedge_flag)
  return _s;
}
inline const std::string& ficc_Match_Rtn::_internal_hedge_flag() const {
  return hedge_flag_.Get();
}
inline void ficc_Match_Rtn::_internal_set_hedge_flag(const std::string& value) {
  
  hedge_flag_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::_internal_mutable_hedge_flag() {
  
  return hedge_flag_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::release_hedge_flag() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Match_Rtn.hedge_flag)
  return hedge_flag_.Release();
}
inline void ficc_Match_Rtn::set_allocated_hedge_flag(std::string* hedge_flag) {
  if (hedge_flag != nullptr) {
    
  } else {
    
  }
  hedge_flag_.SetAllocated(hedge_flag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hedge_flag_.IsDefault()) {
    hedge_flag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Match_Rtn.hedge_flag)
}

// float order_price = 14;
inline void ficc_Match_Rtn::clear_order_price() {
  order_price_ = 0;
}
inline float ficc_Match_Rtn::_internal_order_price() const {
  return order_price_;
}
inline float ficc_Match_Rtn::order_price() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.order_price)
  return _internal_order_price();
}
inline void ficc_Match_Rtn::_internal_set_order_price(float value) {
  
  order_price_ = value;
}
inline void ficc_Match_Rtn::set_order_price(float value) {
  _internal_set_order_price(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.order_price)
}

// float dirty_price = 15;
inline void ficc_Match_Rtn::clear_dirty_price() {
  dirty_price_ = 0;
}
inline float ficc_Match_Rtn::_internal_dirty_price() const {
  return dirty_price_;
}
inline float ficc_Match_Rtn::dirty_price() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.dirty_price)
  return _internal_dirty_price();
}
inline void ficc_Match_Rtn::_internal_set_dirty_price(float value) {
  
  dirty_price_ = value;
}
inline void ficc_Match_Rtn::set_dirty_price(float value) {
  _internal_set_dirty_price(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.dirty_price)
}

// float trade_price = 16;
inline void ficc_Match_Rtn::clear_trade_price() {
  trade_price_ = 0;
}
inline float ficc_Match_Rtn::_internal_trade_price() const {
  return trade_price_;
}
inline float ficc_Match_Rtn::trade_price() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.trade_price)
  return _internal_trade_price();
}
inline void ficc_Match_Rtn::_internal_set_trade_price(float value) {
  
  trade_price_ = value;
}
inline void ficc_Match_Rtn::set_trade_price(float value) {
  _internal_set_trade_price(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.trade_price)
}

// float ytm = 17;
inline void ficc_Match_Rtn::clear_ytm() {
  ytm_ = 0;
}
inline float ficc_Match_Rtn::_internal_ytm() const {
  return ytm_;
}
inline float ficc_Match_Rtn::ytm() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.ytm)
  return _internal_ytm();
}
inline void ficc_Match_Rtn::_internal_set_ytm(float value) {
  
  ytm_ = value;
}
inline void ficc_Match_Rtn::set_ytm(float value) {
  _internal_set_ytm(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.ytm)
}

// uint64 vol_traded = 18;
inline void ficc_Match_Rtn::clear_vol_traded() {
  vol_traded_ = uint64_t{0u};
}
inline uint64_t ficc_Match_Rtn::_internal_vol_traded() const {
  return vol_traded_;
}
inline uint64_t ficc_Match_Rtn::vol_traded() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.vol_traded)
  return _internal_vol_traded();
}
inline void ficc_Match_Rtn::_internal_set_vol_traded(uint64_t value) {
  
  vol_traded_ = value;
}
inline void ficc_Match_Rtn::set_vol_traded(uint64_t value) {
  _internal_set_vol_traded(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.vol_traded)
}

// string trade_date = 19;
inline void ficc_Match_Rtn::clear_trade_date() {
  trade_date_.ClearToEmpty();
}
inline const std::string& ficc_Match_Rtn::trade_date() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.trade_date)
  return _internal_trade_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Match_Rtn::set_trade_date(ArgT0&& arg0, ArgT... args) {
 
 trade_date_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.trade_date)
}
inline std::string* ficc_Match_Rtn::mutable_trade_date() {
  std::string* _s = _internal_mutable_trade_date();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Match_Rtn.trade_date)
  return _s;
}
inline const std::string& ficc_Match_Rtn::_internal_trade_date() const {
  return trade_date_.Get();
}
inline void ficc_Match_Rtn::_internal_set_trade_date(const std::string& value) {
  
  trade_date_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::_internal_mutable_trade_date() {
  
  return trade_date_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::release_trade_date() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Match_Rtn.trade_date)
  return trade_date_.Release();
}
inline void ficc_Match_Rtn::set_allocated_trade_date(std::string* trade_date) {
  if (trade_date != nullptr) {
    
  } else {
    
  }
  trade_date_.SetAllocated(trade_date, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trade_date_.IsDefault()) {
    trade_date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Match_Rtn.trade_date)
}

// string trade_time = 20;
inline void ficc_Match_Rtn::clear_trade_time() {
  trade_time_.ClearToEmpty();
}
inline const std::string& ficc_Match_Rtn::trade_time() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.trade_time)
  return _internal_trade_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Match_Rtn::set_trade_time(ArgT0&& arg0, ArgT... args) {
 
 trade_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.trade_time)
}
inline std::string* ficc_Match_Rtn::mutable_trade_time() {
  std::string* _s = _internal_mutable_trade_time();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Match_Rtn.trade_time)
  return _s;
}
inline const std::string& ficc_Match_Rtn::_internal_trade_time() const {
  return trade_time_.Get();
}
inline void ficc_Match_Rtn::_internal_set_trade_time(const std::string& value) {
  
  trade_time_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::_internal_mutable_trade_time() {
  
  return trade_time_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::release_trade_time() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Match_Rtn.trade_time)
  return trade_time_.Release();
}
inline void ficc_Match_Rtn::set_allocated_trade_time(std::string* trade_time) {
  if (trade_time != nullptr) {
    
  } else {
    
  }
  trade_time_.SetAllocated(trade_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trade_time_.IsDefault()) {
    trade_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Match_Rtn.trade_time)
}

// float trade_fee = 21;
inline void ficc_Match_Rtn::clear_trade_fee() {
  trade_fee_ = 0;
}
inline float ficc_Match_Rtn::_internal_trade_fee() const {
  return trade_fee_;
}
inline float ficc_Match_Rtn::trade_fee() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.trade_fee)
  return _internal_trade_fee();
}
inline void ficc_Match_Rtn::_internal_set_trade_fee(float value) {
  
  trade_fee_ = value;
}
inline void ficc_Match_Rtn::set_trade_fee(float value) {
  _internal_set_trade_fee(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.trade_fee)
}

// string currency = 22;
inline void ficc_Match_Rtn::clear_currency() {
  currency_.ClearToEmpty();
}
inline const std::string& ficc_Match_Rtn::currency() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.currency)
  return _internal_currency();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Match_Rtn::set_currency(ArgT0&& arg0, ArgT... args) {
 
 currency_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.currency)
}
inline std::string* ficc_Match_Rtn::mutable_currency() {
  std::string* _s = _internal_mutable_currency();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Match_Rtn.currency)
  return _s;
}
inline const std::string& ficc_Match_Rtn::_internal_currency() const {
  return currency_.Get();
}
inline void ficc_Match_Rtn::_internal_set_currency(const std::string& value) {
  
  currency_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::_internal_mutable_currency() {
  
  return currency_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::release_currency() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Match_Rtn.currency)
  return currency_.Release();
}
inline void ficc_Match_Rtn::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocated(currency, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (currency_.IsDefault()) {
    currency_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Match_Rtn.currency)
}

// string manual_fee = 23;
inline void ficc_Match_Rtn::clear_manual_fee() {
  manual_fee_.ClearToEmpty();
}
inline const std::string& ficc_Match_Rtn::manual_fee() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.manual_fee)
  return _internal_manual_fee();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Match_Rtn::set_manual_fee(ArgT0&& arg0, ArgT... args) {
 
 manual_fee_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.manual_fee)
}
inline std::string* ficc_Match_Rtn::mutable_manual_fee() {
  std::string* _s = _internal_mutable_manual_fee();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Match_Rtn.manual_fee)
  return _s;
}
inline const std::string& ficc_Match_Rtn::_internal_manual_fee() const {
  return manual_fee_.Get();
}
inline void ficc_Match_Rtn::_internal_set_manual_fee(const std::string& value) {
  
  manual_fee_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::_internal_mutable_manual_fee() {
  
  return manual_fee_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::release_manual_fee() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Match_Rtn.manual_fee)
  return manual_fee_.Release();
}
inline void ficc_Match_Rtn::set_allocated_manual_fee(std::string* manual_fee) {
  if (manual_fee != nullptr) {
    
  } else {
    
  }
  manual_fee_.SetAllocated(manual_fee, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (manual_fee_.IsDefault()) {
    manual_fee_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Match_Rtn.manual_fee)
}

// string deleted_flag = 24;
inline void ficc_Match_Rtn::clear_deleted_flag() {
  deleted_flag_.ClearToEmpty();
}
inline const std::string& ficc_Match_Rtn::deleted_flag() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.deleted_flag)
  return _internal_deleted_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Match_Rtn::set_deleted_flag(ArgT0&& arg0, ArgT... args) {
 
 deleted_flag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.deleted_flag)
}
inline std::string* ficc_Match_Rtn::mutable_deleted_flag() {
  std::string* _s = _internal_mutable_deleted_flag();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Match_Rtn.deleted_flag)
  return _s;
}
inline const std::string& ficc_Match_Rtn::_internal_deleted_flag() const {
  return deleted_flag_.Get();
}
inline void ficc_Match_Rtn::_internal_set_deleted_flag(const std::string& value) {
  
  deleted_flag_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::_internal_mutable_deleted_flag() {
  
  return deleted_flag_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::release_deleted_flag() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Match_Rtn.deleted_flag)
  return deleted_flag_.Release();
}
inline void ficc_Match_Rtn::set_allocated_deleted_flag(std::string* deleted_flag) {
  if (deleted_flag != nullptr) {
    
  } else {
    
  }
  deleted_flag_.SetAllocated(deleted_flag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (deleted_flag_.IsDefault()) {
    deleted_flag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Match_Rtn.deleted_flag)
}

// float cover_price = 25;
inline void ficc_Match_Rtn::clear_cover_price() {
  cover_price_ = 0;
}
inline float ficc_Match_Rtn::_internal_cover_price() const {
  return cover_price_;
}
inline float ficc_Match_Rtn::cover_price() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.cover_price)
  return _internal_cover_price();
}
inline void ficc_Match_Rtn::_internal_set_cover_price(float value) {
  
  cover_price_ = value;
}
inline void ficc_Match_Rtn::set_cover_price(float value) {
  _internal_set_cover_price(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.cover_price)
}

// string ex_inst_id = 26;
inline void ficc_Match_Rtn::clear_ex_inst_id() {
  ex_inst_id_.ClearToEmpty();
}
inline const std::string& ficc_Match_Rtn::ex_inst_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.ex_inst_id)
  return _internal_ex_inst_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Match_Rtn::set_ex_inst_id(ArgT0&& arg0, ArgT... args) {
 
 ex_inst_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.ex_inst_id)
}
inline std::string* ficc_Match_Rtn::mutable_ex_inst_id() {
  std::string* _s = _internal_mutable_ex_inst_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Match_Rtn.ex_inst_id)
  return _s;
}
inline const std::string& ficc_Match_Rtn::_internal_ex_inst_id() const {
  return ex_inst_id_.Get();
}
inline void ficc_Match_Rtn::_internal_set_ex_inst_id(const std::string& value) {
  
  ex_inst_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::_internal_mutable_ex_inst_id() {
  
  return ex_inst_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::release_ex_inst_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Match_Rtn.ex_inst_id)
  return ex_inst_id_.Release();
}
inline void ficc_Match_Rtn::set_allocated_ex_inst_id(std::string* ex_inst_id) {
  if (ex_inst_id != nullptr) {
    
  } else {
    
  }
  ex_inst_id_.SetAllocated(ex_inst_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ex_inst_id_.IsDefault()) {
    ex_inst_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Match_Rtn.ex_inst_id)
}

// string broker_id = 27;
inline void ficc_Match_Rtn::clear_broker_id() {
  broker_id_.ClearToEmpty();
}
inline const std::string& ficc_Match_Rtn::broker_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.broker_id)
  return _internal_broker_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Match_Rtn::set_broker_id(ArgT0&& arg0, ArgT... args) {
 
 broker_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.broker_id)
}
inline std::string* ficc_Match_Rtn::mutable_broker_id() {
  std::string* _s = _internal_mutable_broker_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Match_Rtn.broker_id)
  return _s;
}
inline const std::string& ficc_Match_Rtn::_internal_broker_id() const {
  return broker_id_.Get();
}
inline void ficc_Match_Rtn::_internal_set_broker_id(const std::string& value) {
  
  broker_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::_internal_mutable_broker_id() {
  
  return broker_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::release_broker_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Match_Rtn.broker_id)
  return broker_id_.Release();
}
inline void ficc_Match_Rtn::set_allocated_broker_id(std::string* broker_id) {
  if (broker_id != nullptr) {
    
  } else {
    
  }
  broker_id_.SetAllocated(broker_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (broker_id_.IsDefault()) {
    broker_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Match_Rtn.broker_id)
}

// string investor_id = 28;
inline void ficc_Match_Rtn::clear_investor_id() {
  investor_id_.ClearToEmpty();
}
inline const std::string& ficc_Match_Rtn::investor_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.investor_id)
  return _internal_investor_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Match_Rtn::set_investor_id(ArgT0&& arg0, ArgT... args) {
 
 investor_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.investor_id)
}
inline std::string* ficc_Match_Rtn::mutable_investor_id() {
  std::string* _s = _internal_mutable_investor_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Match_Rtn.investor_id)
  return _s;
}
inline const std::string& ficc_Match_Rtn::_internal_investor_id() const {
  return investor_id_.Get();
}
inline void ficc_Match_Rtn::_internal_set_investor_id(const std::string& value) {
  
  investor_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::_internal_mutable_investor_id() {
  
  return investor_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::release_investor_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Match_Rtn.investor_id)
  return investor_id_.Release();
}
inline void ficc_Match_Rtn::set_allocated_investor_id(std::string* investor_id) {
  if (investor_id != nullptr) {
    
  } else {
    
  }
  investor_id_.SetAllocated(investor_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (investor_id_.IsDefault()) {
    investor_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Match_Rtn.investor_id)
}

// string bilateral_id = 29;
inline void ficc_Match_Rtn::clear_bilateral_id() {
  bilateral_id_.ClearToEmpty();
}
inline const std::string& ficc_Match_Rtn::bilateral_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.bilateral_id)
  return _internal_bilateral_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Match_Rtn::set_bilateral_id(ArgT0&& arg0, ArgT... args) {
 
 bilateral_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.bilateral_id)
}
inline std::string* ficc_Match_Rtn::mutable_bilateral_id() {
  std::string* _s = _internal_mutable_bilateral_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Match_Rtn.bilateral_id)
  return _s;
}
inline const std::string& ficc_Match_Rtn::_internal_bilateral_id() const {
  return bilateral_id_.Get();
}
inline void ficc_Match_Rtn::_internal_set_bilateral_id(const std::string& value) {
  
  bilateral_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::_internal_mutable_bilateral_id() {
  
  return bilateral_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::release_bilateral_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Match_Rtn.bilateral_id)
  return bilateral_id_.Release();
}
inline void ficc_Match_Rtn::set_allocated_bilateral_id(std::string* bilateral_id) {
  if (bilateral_id != nullptr) {
    
  } else {
    
  }
  bilateral_id_.SetAllocated(bilateral_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bilateral_id_.IsDefault()) {
    bilateral_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Match_Rtn.bilateral_id)
}

// uint64 quote_type = 30;
inline void ficc_Match_Rtn::clear_quote_type() {
  quote_type_ = uint64_t{0u};
}
inline uint64_t ficc_Match_Rtn::_internal_quote_type() const {
  return quote_type_;
}
inline uint64_t ficc_Match_Rtn::quote_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.quote_type)
  return _internal_quote_type();
}
inline void ficc_Match_Rtn::_internal_set_quote_type(uint64_t value) {
  
  quote_type_ = value;
}
inline void ficc_Match_Rtn::set_quote_type(uint64_t value) {
  _internal_set_quote_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.quote_type)
}

// uint64 settle_type = 31;
inline void ficc_Match_Rtn::clear_settle_type() {
  settle_type_ = uint64_t{0u};
}
inline uint64_t ficc_Match_Rtn::_internal_settle_type() const {
  return settle_type_;
}
inline uint64_t ficc_Match_Rtn::settle_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.settle_type)
  return _internal_settle_type();
}
inline void ficc_Match_Rtn::_internal_set_settle_type(uint64_t value) {
  
  settle_type_ = value;
}
inline void ficc_Match_Rtn::set_settle_type(uint64_t value) {
  _internal_set_settle_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.settle_type)
}

// string counter_party_id = 32;
inline void ficc_Match_Rtn::clear_counter_party_id() {
  counter_party_id_.ClearToEmpty();
}
inline const std::string& ficc_Match_Rtn::counter_party_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.counter_party_id)
  return _internal_counter_party_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Match_Rtn::set_counter_party_id(ArgT0&& arg0, ArgT... args) {
 
 counter_party_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.counter_party_id)
}
inline std::string* ficc_Match_Rtn::mutable_counter_party_id() {
  std::string* _s = _internal_mutable_counter_party_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Match_Rtn.counter_party_id)
  return _s;
}
inline const std::string& ficc_Match_Rtn::_internal_counter_party_id() const {
  return counter_party_id_.Get();
}
inline void ficc_Match_Rtn::_internal_set_counter_party_id(const std::string& value) {
  
  counter_party_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::_internal_mutable_counter_party_id() {
  
  return counter_party_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::release_counter_party_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Match_Rtn.counter_party_id)
  return counter_party_id_.Release();
}
inline void ficc_Match_Rtn::set_allocated_counter_party_id(std::string* counter_party_id) {
  if (counter_party_id != nullptr) {
    
  } else {
    
  }
  counter_party_id_.SetAllocated(counter_party_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (counter_party_id_.IsDefault()) {
    counter_party_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Match_Rtn.counter_party_id)
}

// string counter_party_trader = 33;
inline void ficc_Match_Rtn::clear_counter_party_trader() {
  counter_party_trader_.ClearToEmpty();
}
inline const std::string& ficc_Match_Rtn::counter_party_trader() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.counter_party_trader)
  return _internal_counter_party_trader();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Match_Rtn::set_counter_party_trader(ArgT0&& arg0, ArgT... args) {
 
 counter_party_trader_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.counter_party_trader)
}
inline std::string* ficc_Match_Rtn::mutable_counter_party_trader() {
  std::string* _s = _internal_mutable_counter_party_trader();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Match_Rtn.counter_party_trader)
  return _s;
}
inline const std::string& ficc_Match_Rtn::_internal_counter_party_trader() const {
  return counter_party_trader_.Get();
}
inline void ficc_Match_Rtn::_internal_set_counter_party_trader(const std::string& value) {
  
  counter_party_trader_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::_internal_mutable_counter_party_trader() {
  
  return counter_party_trader_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Match_Rtn::release_counter_party_trader() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Match_Rtn.counter_party_trader)
  return counter_party_trader_.Release();
}
inline void ficc_Match_Rtn::set_allocated_counter_party_trader(std::string* counter_party_trader) {
  if (counter_party_trader != nullptr) {
    
  } else {
    
  }
  counter_party_trader_.SetAllocated(counter_party_trader, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (counter_party_trader_.IsDefault()) {
    counter_party_trader_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Match_Rtn.counter_party_trader)
}

// float accrued_interest_amt = 34;
inline void ficc_Match_Rtn::clear_accrued_interest_amt() {
  accrued_interest_amt_ = 0;
}
inline float ficc_Match_Rtn::_internal_accrued_interest_amt() const {
  return accrued_interest_amt_;
}
inline float ficc_Match_Rtn::accrued_interest_amt() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.accrued_interest_amt)
  return _internal_accrued_interest_amt();
}
inline void ficc_Match_Rtn::_internal_set_accrued_interest_amt(float value) {
  
  accrued_interest_amt_ = value;
}
inline void ficc_Match_Rtn::set_accrued_interest_amt(float value) {
  _internal_set_accrued_interest_amt(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.accrued_interest_amt)
}

// uint32 sequence_no = 35;
inline void ficc_Match_Rtn::clear_sequence_no() {
  sequence_no_ = 0u;
}
inline uint32_t ficc_Match_Rtn::_internal_sequence_no() const {
  return sequence_no_;
}
inline uint32_t ficc_Match_Rtn::sequence_no() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.sequence_no)
  return _internal_sequence_no();
}
inline void ficc_Match_Rtn::_internal_set_sequence_no(uint32_t value) {
  
  sequence_no_ = value;
}
inline void ficc_Match_Rtn::set_sequence_no(uint32_t value) {
  _internal_set_sequence_no(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.sequence_no)
}

// uint64 strategy_code = 36;
inline void ficc_Match_Rtn::clear_strategy_code() {
  strategy_code_ = uint64_t{0u};
}
inline uint64_t ficc_Match_Rtn::_internal_strategy_code() const {
  return strategy_code_;
}
inline uint64_t ficc_Match_Rtn::strategy_code() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Match_Rtn.strategy_code)
  return _internal_strategy_code();
}
inline void ficc_Match_Rtn::_internal_set_strategy_code(uint64_t value) {
  
  strategy_code_ = value;
}
inline void ficc_Match_Rtn::set_strategy_code(uint64_t value) {
  _internal_set_strategy_code(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Match_Rtn.strategy_code)
}

// -------------------------------------------------------------------

// ficc_Cfets_Makemarket_Status

// .message_head.head head = 1;
inline bool ficc_Cfets_Makemarket_Status::_internal_has_head() const {
  return this != internal_default_instance() && head_ != nullptr;
}
inline bool ficc_Cfets_Makemarket_Status::has_head() const {
  return _internal_has_head();
}
inline const ::message_head::head& ficc_Cfets_Makemarket_Status::_internal_head() const {
  const ::message_head::head* p = head_;
  return p != nullptr ? *p : reinterpret_cast<const ::message_head::head&>(
      ::message_head::_head_default_instance_);
}
inline const ::message_head::head& ficc_Cfets_Makemarket_Status::head() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Cfets_Makemarket_Status.head)
  return _internal_head();
}
inline void ficc_Cfets_Makemarket_Status::unsafe_arena_set_allocated_head(
    ::message_head::head* head) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ficc_message.ficc_Cfets_Makemarket_Status.head)
}
inline ::message_head::head* ficc_Cfets_Makemarket_Status::release_head() {
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message_head::head* ficc_Cfets_Makemarket_Status::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Cfets_Makemarket_Status.head)
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
  return temp;
}
inline ::message_head::head* ficc_Cfets_Makemarket_Status::_internal_mutable_head() {
  
  if (head_ == nullptr) {
    auto* p = CreateMaybeMessage<::message_head::head>(GetArenaForAllocation());
    head_ = p;
  }
  return head_;
}
inline ::message_head::head* ficc_Cfets_Makemarket_Status::mutable_head() {
  ::message_head::head* _msg = _internal_mutable_head();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Cfets_Makemarket_Status.head)
  return _msg;
}
inline void ficc_Cfets_Makemarket_Status::set_allocated_head(::message_head::head* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head));
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Cfets_Makemarket_Status.head)
}

// string secu_code = 2;
inline void ficc_Cfets_Makemarket_Status::clear_secu_code() {
  secu_code_.ClearToEmpty();
}
inline const std::string& ficc_Cfets_Makemarket_Status::secu_code() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Cfets_Makemarket_Status.secu_code)
  return _internal_secu_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Cfets_Makemarket_Status::set_secu_code(ArgT0&& arg0, ArgT... args) {
 
 secu_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Cfets_Makemarket_Status.secu_code)
}
inline std::string* ficc_Cfets_Makemarket_Status::mutable_secu_code() {
  std::string* _s = _internal_mutable_secu_code();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Cfets_Makemarket_Status.secu_code)
  return _s;
}
inline const std::string& ficc_Cfets_Makemarket_Status::_internal_secu_code() const {
  return secu_code_.Get();
}
inline void ficc_Cfets_Makemarket_Status::_internal_set_secu_code(const std::string& value) {
  
  secu_code_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Cfets_Makemarket_Status::_internal_mutable_secu_code() {
  
  return secu_code_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Cfets_Makemarket_Status::release_secu_code() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Cfets_Makemarket_Status.secu_code)
  return secu_code_.Release();
}
inline void ficc_Cfets_Makemarket_Status::set_allocated_secu_code(std::string* secu_code) {
  if (secu_code != nullptr) {
    
  } else {
    
  }
  secu_code_.SetAllocated(secu_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secu_code_.IsDefault()) {
    secu_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Cfets_Makemarket_Status.secu_code)
}

// string secu_type = 3;
inline void ficc_Cfets_Makemarket_Status::clear_secu_type() {
  secu_type_.ClearToEmpty();
}
inline const std::string& ficc_Cfets_Makemarket_Status::secu_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Cfets_Makemarket_Status.secu_type)
  return _internal_secu_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Cfets_Makemarket_Status::set_secu_type(ArgT0&& arg0, ArgT... args) {
 
 secu_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Cfets_Makemarket_Status.secu_type)
}
inline std::string* ficc_Cfets_Makemarket_Status::mutable_secu_type() {
  std::string* _s = _internal_mutable_secu_type();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Cfets_Makemarket_Status.secu_type)
  return _s;
}
inline const std::string& ficc_Cfets_Makemarket_Status::_internal_secu_type() const {
  return secu_type_.Get();
}
inline void ficc_Cfets_Makemarket_Status::_internal_set_secu_type(const std::string& value) {
  
  secu_type_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Cfets_Makemarket_Status::_internal_mutable_secu_type() {
  
  return secu_type_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Cfets_Makemarket_Status::release_secu_type() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Cfets_Makemarket_Status.secu_type)
  return secu_type_.Release();
}
inline void ficc_Cfets_Makemarket_Status::set_allocated_secu_type(std::string* secu_type) {
  if (secu_type != nullptr) {
    
  } else {
    
  }
  secu_type_.SetAllocated(secu_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secu_type_.IsDefault()) {
    secu_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Cfets_Makemarket_Status.secu_type)
}

// string secu_name = 4;
inline void ficc_Cfets_Makemarket_Status::clear_secu_name() {
  secu_name_.ClearToEmpty();
}
inline const std::string& ficc_Cfets_Makemarket_Status::secu_name() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Cfets_Makemarket_Status.secu_name)
  return _internal_secu_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Cfets_Makemarket_Status::set_secu_name(ArgT0&& arg0, ArgT... args) {
 
 secu_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Cfets_Makemarket_Status.secu_name)
}
inline std::string* ficc_Cfets_Makemarket_Status::mutable_secu_name() {
  std::string* _s = _internal_mutable_secu_name();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Cfets_Makemarket_Status.secu_name)
  return _s;
}
inline const std::string& ficc_Cfets_Makemarket_Status::_internal_secu_name() const {
  return secu_name_.Get();
}
inline void ficc_Cfets_Makemarket_Status::_internal_set_secu_name(const std::string& value) {
  
  secu_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Cfets_Makemarket_Status::_internal_mutable_secu_name() {
  
  return secu_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Cfets_Makemarket_Status::release_secu_name() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Cfets_Makemarket_Status.secu_name)
  return secu_name_.Release();
}
inline void ficc_Cfets_Makemarket_Status::set_allocated_secu_name(std::string* secu_name) {
  if (secu_name != nullptr) {
    
  } else {
    
  }
  secu_name_.SetAllocated(secu_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secu_name_.IsDefault()) {
    secu_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Cfets_Makemarket_Status.secu_name)
}

// uint32 quote_status = 5;
inline void ficc_Cfets_Makemarket_Status::clear_quote_status() {
  quote_status_ = 0u;
}
inline uint32_t ficc_Cfets_Makemarket_Status::_internal_quote_status() const {
  return quote_status_;
}
inline uint32_t ficc_Cfets_Makemarket_Status::quote_status() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Cfets_Makemarket_Status.quote_status)
  return _internal_quote_status();
}
inline void ficc_Cfets_Makemarket_Status::_internal_set_quote_status(uint32_t value) {
  
  quote_status_ = value;
}
inline void ficc_Cfets_Makemarket_Status::set_quote_status(uint32_t value) {
  _internal_set_quote_status(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Cfets_Makemarket_Status.quote_status)
}

// uint32 last_rec_time = 6;
inline void ficc_Cfets_Makemarket_Status::clear_last_rec_time() {
  last_rec_time_ = 0u;
}
inline uint32_t ficc_Cfets_Makemarket_Status::_internal_last_rec_time() const {
  return last_rec_time_;
}
inline uint32_t ficc_Cfets_Makemarket_Status::last_rec_time() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Cfets_Makemarket_Status.last_rec_time)
  return _internal_last_rec_time();
}
inline void ficc_Cfets_Makemarket_Status::_internal_set_last_rec_time(uint32_t value) {
  
  last_rec_time_ = value;
}
inline void ficc_Cfets_Makemarket_Status::set_last_rec_time(uint32_t value) {
  _internal_set_last_rec_time(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Cfets_Makemarket_Status.last_rec_time)
}

// uint32 market_time_day = 7;
inline void ficc_Cfets_Makemarket_Status::clear_market_time_day() {
  market_time_day_ = 0u;
}
inline uint32_t ficc_Cfets_Makemarket_Status::_internal_market_time_day() const {
  return market_time_day_;
}
inline uint32_t ficc_Cfets_Makemarket_Status::market_time_day() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Cfets_Makemarket_Status.market_time_day)
  return _internal_market_time_day();
}
inline void ficc_Cfets_Makemarket_Status::_internal_set_market_time_day(uint32_t value) {
  
  market_time_day_ = value;
}
inline void ficc_Cfets_Makemarket_Status::set_market_time_day(uint32_t value) {
  _internal_set_market_time_day(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Cfets_Makemarket_Status.market_time_day)
}

// uint64 trade_vol_day = 8;
inline void ficc_Cfets_Makemarket_Status::clear_trade_vol_day() {
  trade_vol_day_ = uint64_t{0u};
}
inline uint64_t ficc_Cfets_Makemarket_Status::_internal_trade_vol_day() const {
  return trade_vol_day_;
}
inline uint64_t ficc_Cfets_Makemarket_Status::trade_vol_day() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Cfets_Makemarket_Status.trade_vol_day)
  return _internal_trade_vol_day();
}
inline void ficc_Cfets_Makemarket_Status::_internal_set_trade_vol_day(uint64_t value) {
  
  trade_vol_day_ = value;
}
inline void ficc_Cfets_Makemarket_Status::set_trade_vol_day(uint64_t value) {
  _internal_set_trade_vol_day(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Cfets_Makemarket_Status.trade_vol_day)
}

// string last_update = 9;
inline void ficc_Cfets_Makemarket_Status::clear_last_update() {
  last_update_.ClearToEmpty();
}
inline const std::string& ficc_Cfets_Makemarket_Status::last_update() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Cfets_Makemarket_Status.last_update)
  return _internal_last_update();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Cfets_Makemarket_Status::set_last_update(ArgT0&& arg0, ArgT... args) {
 
 last_update_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Cfets_Makemarket_Status.last_update)
}
inline std::string* ficc_Cfets_Makemarket_Status::mutable_last_update() {
  std::string* _s = _internal_mutable_last_update();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Cfets_Makemarket_Status.last_update)
  return _s;
}
inline const std::string& ficc_Cfets_Makemarket_Status::_internal_last_update() const {
  return last_update_.Get();
}
inline void ficc_Cfets_Makemarket_Status::_internal_set_last_update(const std::string& value) {
  
  last_update_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Cfets_Makemarket_Status::_internal_mutable_last_update() {
  
  return last_update_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Cfets_Makemarket_Status::release_last_update() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Cfets_Makemarket_Status.last_update)
  return last_update_.Release();
}
inline void ficc_Cfets_Makemarket_Status::set_allocated_last_update(std::string* last_update) {
  if (last_update != nullptr) {
    
  } else {
    
  }
  last_update_.SetAllocated(last_update, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (last_update_.IsDefault()) {
    last_update_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Cfets_Makemarket_Status.last_update)
}

// float max_ytm_spread = 10;
inline void ficc_Cfets_Makemarket_Status::clear_max_ytm_spread() {
  max_ytm_spread_ = 0;
}
inline float ficc_Cfets_Makemarket_Status::_internal_max_ytm_spread() const {
  return max_ytm_spread_;
}
inline float ficc_Cfets_Makemarket_Status::max_ytm_spread() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Cfets_Makemarket_Status.max_ytm_spread)
  return _internal_max_ytm_spread();
}
inline void ficc_Cfets_Makemarket_Status::_internal_set_max_ytm_spread(float value) {
  
  max_ytm_spread_ = value;
}
inline void ficc_Cfets_Makemarket_Status::set_max_ytm_spread(float value) {
  _internal_set_max_ytm_spread(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Cfets_Makemarket_Status.max_ytm_spread)
}

// uint64 min_vol = 11;
inline void ficc_Cfets_Makemarket_Status::clear_min_vol() {
  min_vol_ = uint64_t{0u};
}
inline uint64_t ficc_Cfets_Makemarket_Status::_internal_min_vol() const {
  return min_vol_;
}
inline uint64_t ficc_Cfets_Makemarket_Status::min_vol() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Cfets_Makemarket_Status.min_vol)
  return _internal_min_vol();
}
inline void ficc_Cfets_Makemarket_Status::_internal_set_min_vol(uint64_t value) {
  
  min_vol_ = value;
}
inline void ficc_Cfets_Makemarket_Status::set_min_vol(uint64_t value) {
  _internal_set_min_vol(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Cfets_Makemarket_Status.min_vol)
}

// uint32 notify_out = 12;
inline void ficc_Cfets_Makemarket_Status::clear_notify_out() {
  notify_out_ = 0u;
}
inline uint32_t ficc_Cfets_Makemarket_Status::_internal_notify_out() const {
  return notify_out_;
}
inline uint32_t ficc_Cfets_Makemarket_Status::notify_out() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Cfets_Makemarket_Status.notify_out)
  return _internal_notify_out();
}
inline void ficc_Cfets_Makemarket_Status::_internal_set_notify_out(uint32_t value) {
  
  notify_out_ = value;
}
inline void ficc_Cfets_Makemarket_Status::set_notify_out(uint32_t value) {
  _internal_set_notify_out(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Cfets_Makemarket_Status.notify_out)
}

// -------------------------------------------------------------------

// ficc_fund

// .message_head.head head = 1;
inline bool ficc_fund::_internal_has_head() const {
  return this != internal_default_instance() && head_ != nullptr;
}
inline bool ficc_fund::has_head() const {
  return _internal_has_head();
}
inline const ::message_head::head& ficc_fund::_internal_head() const {
  const ::message_head::head* p = head_;
  return p != nullptr ? *p : reinterpret_cast<const ::message_head::head&>(
      ::message_head::_head_default_instance_);
}
inline const ::message_head::head& ficc_fund::head() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_fund.head)
  return _internal_head();
}
inline void ficc_fund::unsafe_arena_set_allocated_head(
    ::message_head::head* head) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ficc_message.ficc_fund.head)
}
inline ::message_head::head* ficc_fund::release_head() {
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message_head::head* ficc_fund::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_fund.head)
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
  return temp;
}
inline ::message_head::head* ficc_fund::_internal_mutable_head() {
  
  if (head_ == nullptr) {
    auto* p = CreateMaybeMessage<::message_head::head>(GetArenaForAllocation());
    head_ = p;
  }
  return head_;
}
inline ::message_head::head* ficc_fund::mutable_head() {
  ::message_head::head* _msg = _internal_mutable_head();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_fund.head)
  return _msg;
}
inline void ficc_fund::set_allocated_head(::message_head::head* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head));
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_fund.head)
}

// string trade_acct = 2;
inline void ficc_fund::clear_trade_acct() {
  trade_acct_.ClearToEmpty();
}
inline const std::string& ficc_fund::trade_acct() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_fund.trade_acct)
  return _internal_trade_acct();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_fund::set_trade_acct(ArgT0&& arg0, ArgT... args) {
 
 trade_acct_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_fund.trade_acct)
}
inline std::string* ficc_fund::mutable_trade_acct() {
  std::string* _s = _internal_mutable_trade_acct();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_fund.trade_acct)
  return _s;
}
inline const std::string& ficc_fund::_internal_trade_acct() const {
  return trade_acct_.Get();
}
inline void ficc_fund::_internal_set_trade_acct(const std::string& value) {
  
  trade_acct_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_fund::_internal_mutable_trade_acct() {
  
  return trade_acct_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_fund::release_trade_acct() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_fund.trade_acct)
  return trade_acct_.Release();
}
inline void ficc_fund::set_allocated_trade_acct(std::string* trade_acct) {
  if (trade_acct != nullptr) {
    
  } else {
    
  }
  trade_acct_.SetAllocated(trade_acct, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trade_acct_.IsDefault()) {
    trade_acct_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_fund.trade_acct)
}

// string currency = 3;
inline void ficc_fund::clear_currency() {
  currency_.ClearToEmpty();
}
inline const std::string& ficc_fund::currency() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_fund.currency)
  return _internal_currency();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_fund::set_currency(ArgT0&& arg0, ArgT... args) {
 
 currency_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_fund.currency)
}
inline std::string* ficc_fund::mutable_currency() {
  std::string* _s = _internal_mutable_currency();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_fund.currency)
  return _s;
}
inline const std::string& ficc_fund::_internal_currency() const {
  return currency_.Get();
}
inline void ficc_fund::_internal_set_currency(const std::string& value) {
  
  currency_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_fund::_internal_mutable_currency() {
  
  return currency_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_fund::release_currency() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_fund.currency)
  return currency_.Release();
}
inline void ficc_fund::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocated(currency, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (currency_.IsDefault()) {
    currency_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_fund.currency)
}

// string fund_acct = 4;
inline void ficc_fund::clear_fund_acct() {
  fund_acct_.ClearToEmpty();
}
inline const std::string& ficc_fund::fund_acct() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_fund.fund_acct)
  return _internal_fund_acct();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_fund::set_fund_acct(ArgT0&& arg0, ArgT... args) {
 
 fund_acct_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_fund.fund_acct)
}
inline std::string* ficc_fund::mutable_fund_acct() {
  std::string* _s = _internal_mutable_fund_acct();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_fund.fund_acct)
  return _s;
}
inline const std::string& ficc_fund::_internal_fund_acct() const {
  return fund_acct_.Get();
}
inline void ficc_fund::_internal_set_fund_acct(const std::string& value) {
  
  fund_acct_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_fund::_internal_mutable_fund_acct() {
  
  return fund_acct_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_fund::release_fund_acct() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_fund.fund_acct)
  return fund_acct_.Release();
}
inline void ficc_fund::set_allocated_fund_acct(std::string* fund_acct) {
  if (fund_acct != nullptr) {
    
  } else {
    
  }
  fund_acct_.SetAllocated(fund_acct, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fund_acct_.IsDefault()) {
    fund_acct_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_fund.fund_acct)
}

// float last_bal = 5;
inline void ficc_fund::clear_last_bal() {
  last_bal_ = 0;
}
inline float ficc_fund::_internal_last_bal() const {
  return last_bal_;
}
inline float ficc_fund::last_bal() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_fund.last_bal)
  return _internal_last_bal();
}
inline void ficc_fund::_internal_set_last_bal(float value) {
  
  last_bal_ = value;
}
inline void ficc_fund::set_last_bal(float value) {
  _internal_set_last_bal(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_fund.last_bal)
}

// float balance = 6;
inline void ficc_fund::clear_balance() {
  balance_ = 0;
}
inline float ficc_fund::_internal_balance() const {
  return balance_;
}
inline float ficc_fund::balance() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_fund.balance)
  return _internal_balance();
}
inline void ficc_fund::_internal_set_balance(float value) {
  
  balance_ = value;
}
inline void ficc_fund::set_balance(float value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_fund.balance)
}

// float avail_fund = 7;
inline void ficc_fund::clear_avail_fund() {
  avail_fund_ = 0;
}
inline float ficc_fund::_internal_avail_fund() const {
  return avail_fund_;
}
inline float ficc_fund::avail_fund() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_fund.avail_fund)
  return _internal_avail_fund();
}
inline void ficc_fund::_internal_set_avail_fund(float value) {
  
  avail_fund_ = value;
}
inline void ficc_fund::set_avail_fund(float value) {
  _internal_set_avail_fund(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_fund.avail_fund)
}

// float get_fund = 8;
inline void ficc_fund::clear_get_fund() {
  get_fund_ = 0;
}
inline float ficc_fund::_internal_get_fund() const {
  return get_fund_;
}
inline float ficc_fund::get_fund() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_fund.get_fund)
  return _internal_get_fund();
}
inline void ficc_fund::_internal_set_get_fund(float value) {
  
  get_fund_ = value;
}
inline void ficc_fund::set_get_fund(float value) {
  _internal_set_get_fund(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_fund.get_fund)
}

// float base_margin = 9;
inline void ficc_fund::clear_base_margin() {
  base_margin_ = 0;
}
inline float ficc_fund::_internal_base_margin() const {
  return base_margin_;
}
inline float ficc_fund::base_margin() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_fund.base_margin)
  return _internal_base_margin();
}
inline void ficc_fund::_internal_set_base_margin(float value) {
  
  base_margin_ = value;
}
inline void ficc_fund::set_base_margin(float value) {
  _internal_set_base_margin(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_fund.base_margin)
}

// float income_expense = 10;
inline void ficc_fund::clear_income_expense() {
  income_expense_ = 0;
}
inline float ficc_fund::_internal_income_expense() const {
  return income_expense_;
}
inline float ficc_fund::income_expense() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_fund.income_expense)
  return _internal_income_expense();
}
inline void ficc_fund::_internal_set_income_expense(float value) {
  
  income_expense_ = value;
}
inline void ficc_fund::set_income_expense(float value) {
  _internal_set_income_expense(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_fund.income_expense)
}

// float froze_fund = 11;
inline void ficc_fund::clear_froze_fund() {
  froze_fund_ = 0;
}
inline float ficc_fund::_internal_froze_fund() const {
  return froze_fund_;
}
inline float ficc_fund::froze_fund() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_fund.froze_fund)
  return _internal_froze_fund();
}
inline void ficc_fund::_internal_set_froze_fund(float value) {
  
  froze_fund_ = value;
}
inline void ficc_fund::set_froze_fund(float value) {
  _internal_set_froze_fund(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_fund.froze_fund)
}

// float margin = 12;
inline void ficc_fund::clear_margin() {
  margin_ = 0;
}
inline float ficc_fund::_internal_margin() const {
  return margin_;
}
inline float ficc_fund::margin() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_fund.margin)
  return _internal_margin();
}
inline void ficc_fund::_internal_set_margin(float value) {
  
  margin_ = value;
}
inline void ficc_fund::set_margin(float value) {
  _internal_set_margin(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_fund.margin)
}

// float fee = 13;
inline void ficc_fund::clear_fee() {
  fee_ = 0;
}
inline float ficc_fund::_internal_fee() const {
  return fee_;
}
inline float ficc_fund::fee() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_fund.fee)
  return _internal_fee();
}
inline void ficc_fund::_internal_set_fee(float value) {
  
  fee_ = value;
}
inline void ficc_fund::set_fee(float value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_fund.fee)
}

// float reserve = 14;
inline void ficc_fund::clear_reserve() {
  reserve_ = 0;
}
inline float ficc_fund::_internal_reserve() const {
  return reserve_;
}
inline float ficc_fund::reserve() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_fund.reserve)
  return _internal_reserve();
}
inline void ficc_fund::_internal_set_reserve(float value) {
  
  reserve_ = value;
}
inline void ficc_fund::set_reserve(float value) {
  _internal_set_reserve(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_fund.reserve)
}

// float surplus = 15;
inline void ficc_fund::clear_surplus() {
  surplus_ = 0;
}
inline float ficc_fund::_internal_surplus() const {
  return surplus_;
}
inline float ficc_fund::surplus() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_fund.surplus)
  return _internal_surplus();
}
inline void ficc_fund::_internal_set_surplus(float value) {
  
  surplus_ = value;
}
inline void ficc_fund::set_surplus(float value) {
  _internal_set_surplus(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_fund.surplus)
}

// float float_surplus = 16;
inline void ficc_fund::clear_float_surplus() {
  float_surplus_ = 0;
}
inline float ficc_fund::_internal_float_surplus() const {
  return float_surplus_;
}
inline float ficc_fund::float_surplus() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_fund.float_surplus)
  return _internal_float_surplus();
}
inline void ficc_fund::_internal_set_float_surplus(float value) {
  
  float_surplus_ = value;
}
inline void ficc_fund::set_float_surplus(float value) {
  _internal_set_float_surplus(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_fund.float_surplus)
}

// float inte_integral = 17;
inline void ficc_fund::clear_inte_integral() {
  inte_integral_ = 0;
}
inline float ficc_fund::_internal_inte_integral() const {
  return inte_integral_;
}
inline float ficc_fund::inte_integral() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_fund.inte_integral)
  return _internal_inte_integral();
}
inline void ficc_fund::_internal_set_inte_integral(float value) {
  
  inte_integral_ = value;
}
inline void ficc_fund::set_inte_integral(float value) {
  _internal_set_inte_integral(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_fund.inte_integral)
}

// float puni_integral = 18;
inline void ficc_fund::clear_puni_integral() {
  puni_integral_ = 0;
}
inline float ficc_fund::_internal_puni_integral() const {
  return puni_integral_;
}
inline float ficc_fund::puni_integral() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_fund.puni_integral)
  return _internal_puni_integral();
}
inline void ficc_fund::_internal_set_puni_integral(float value) {
  
  puni_integral_ = value;
}
inline void ficc_fund::set_puni_integral(float value) {
  _internal_set_puni_integral(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_fund.puni_integral)
}

// float incr_inte = 19;
inline void ficc_fund::clear_incr_inte() {
  incr_inte_ = 0;
}
inline float ficc_fund::_internal_incr_inte() const {
  return incr_inte_;
}
inline float ficc_fund::incr_inte() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_fund.incr_inte)
  return _internal_incr_inte();
}
inline void ficc_fund::_internal_set_incr_inte(float value) {
  
  incr_inte_ = value;
}
inline void ficc_fund::set_incr_inte(float value) {
  _internal_set_incr_inte(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_fund.incr_inte)
}

// float arap = 20;
inline void ficc_fund::clear_arap() {
  arap_ = 0;
}
inline float ficc_fund::_internal_arap() const {
  return arap_;
}
inline float ficc_fund::arap() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_fund.arap)
  return _internal_arap();
}
inline void ficc_fund::_internal_set_arap(float value) {
  
  arap_ = value;
}
inline void ficc_fund::set_arap(float value) {
  _internal_set_arap(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_fund.arap)
}

// uint32 risk_level = 21;
inline void ficc_fund::clear_risk_level() {
  risk_level_ = 0u;
}
inline uint32_t ficc_fund::_internal_risk_level() const {
  return risk_level_;
}
inline uint32_t ficc_fund::risk_level() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_fund.risk_level)
  return _internal_risk_level();
}
inline void ficc_fund::_internal_set_risk_level(uint32_t value) {
  
  risk_level_ = value;
}
inline void ficc_fund::set_risk_level(uint32_t value) {
  _internal_set_risk_level(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_fund.risk_level)
}

// float risk = 22;
inline void ficc_fund::clear_risk() {
  risk_ = 0;
}
inline float ficc_fund::_internal_risk() const {
  return risk_;
}
inline float ficc_fund::risk() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_fund.risk)
  return _internal_risk();
}
inline void ficc_fund::_internal_set_risk(float value) {
  
  risk_ = value;
}
inline void ficc_fund::set_risk(float value) {
  _internal_set_risk(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_fund.risk)
}

// string trade_day = 23;
inline void ficc_fund::clear_trade_day() {
  trade_day_.ClearToEmpty();
}
inline const std::string& ficc_fund::trade_day() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_fund.trade_day)
  return _internal_trade_day();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_fund::set_trade_day(ArgT0&& arg0, ArgT... args) {
 
 trade_day_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_fund.trade_day)
}
inline std::string* ficc_fund::mutable_trade_day() {
  std::string* _s = _internal_mutable_trade_day();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_fund.trade_day)
  return _s;
}
inline const std::string& ficc_fund::_internal_trade_day() const {
  return trade_day_.Get();
}
inline void ficc_fund::_internal_set_trade_day(const std::string& value) {
  
  trade_day_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_fund::_internal_mutable_trade_day() {
  
  return trade_day_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_fund::release_trade_day() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_fund.trade_day)
  return trade_day_.Release();
}
inline void ficc_fund::set_allocated_trade_day(std::string* trade_day) {
  if (trade_day != nullptr) {
    
  } else {
    
  }
  trade_day_.SetAllocated(trade_day, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trade_day_.IsDefault()) {
    trade_day_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_fund.trade_day)
}

// -------------------------------------------------------------------

// ficc_position

// .message_head.head head = 1;
inline bool ficc_position::_internal_has_head() const {
  return this != internal_default_instance() && head_ != nullptr;
}
inline bool ficc_position::has_head() const {
  return _internal_has_head();
}
inline const ::message_head::head& ficc_position::_internal_head() const {
  const ::message_head::head* p = head_;
  return p != nullptr ? *p : reinterpret_cast<const ::message_head::head&>(
      ::message_head::_head_default_instance_);
}
inline const ::message_head::head& ficc_position::head() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.head)
  return _internal_head();
}
inline void ficc_position::unsafe_arena_set_allocated_head(
    ::message_head::head* head) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ficc_message.ficc_position.head)
}
inline ::message_head::head* ficc_position::release_head() {
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message_head::head* ficc_position::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_position.head)
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
  return temp;
}
inline ::message_head::head* ficc_position::_internal_mutable_head() {
  
  if (head_ == nullptr) {
    auto* p = CreateMaybeMessage<::message_head::head>(GetArenaForAllocation());
    head_ = p;
  }
  return head_;
}
inline ::message_head::head* ficc_position::mutable_head() {
  ::message_head::head* _msg = _internal_mutable_head();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_position.head)
  return _msg;
}
inline void ficc_position::set_allocated_head(::message_head::head* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head));
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_position.head)
}

// string trading_day = 2;
inline void ficc_position::clear_trading_day() {
  trading_day_.ClearToEmpty();
}
inline const std::string& ficc_position::trading_day() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.trading_day)
  return _internal_trading_day();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_position::set_trading_day(ArgT0&& arg0, ArgT... args) {
 
 trading_day_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.trading_day)
}
inline std::string* ficc_position::mutable_trading_day() {
  std::string* _s = _internal_mutable_trading_day();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_position.trading_day)
  return _s;
}
inline const std::string& ficc_position::_internal_trading_day() const {
  return trading_day_.Get();
}
inline void ficc_position::_internal_set_trading_day(const std::string& value) {
  
  trading_day_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_position::_internal_mutable_trading_day() {
  
  return trading_day_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_position::release_trading_day() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_position.trading_day)
  return trading_day_.Release();
}
inline void ficc_position::set_allocated_trading_day(std::string* trading_day) {
  if (trading_day != nullptr) {
    
  } else {
    
  }
  trading_day_.SetAllocated(trading_day, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trading_day_.IsDefault()) {
    trading_day_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_position.trading_day)
}

// string trade_acct = 3;
inline void ficc_position::clear_trade_acct() {
  trade_acct_.ClearToEmpty();
}
inline const std::string& ficc_position::trade_acct() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.trade_acct)
  return _internal_trade_acct();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_position::set_trade_acct(ArgT0&& arg0, ArgT... args) {
 
 trade_acct_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.trade_acct)
}
inline std::string* ficc_position::mutable_trade_acct() {
  std::string* _s = _internal_mutable_trade_acct();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_position.trade_acct)
  return _s;
}
inline const std::string& ficc_position::_internal_trade_acct() const {
  return trade_acct_.Get();
}
inline void ficc_position::_internal_set_trade_acct(const std::string& value) {
  
  trade_acct_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_position::_internal_mutable_trade_acct() {
  
  return trade_acct_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_position::release_trade_acct() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_position.trade_acct)
  return trade_acct_.Release();
}
inline void ficc_position::set_allocated_trade_acct(std::string* trade_acct) {
  if (trade_acct != nullptr) {
    
  } else {
    
  }
  trade_acct_.SetAllocated(trade_acct, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trade_acct_.IsDefault()) {
    trade_acct_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_position.trade_acct)
}

// string secu_code = 4;
inline void ficc_position::clear_secu_code() {
  secu_code_.ClearToEmpty();
}
inline const std::string& ficc_position::secu_code() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.secu_code)
  return _internal_secu_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_position::set_secu_code(ArgT0&& arg0, ArgT... args) {
 
 secu_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.secu_code)
}
inline std::string* ficc_position::mutable_secu_code() {
  std::string* _s = _internal_mutable_secu_code();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_position.secu_code)
  return _s;
}
inline const std::string& ficc_position::_internal_secu_code() const {
  return secu_code_.Get();
}
inline void ficc_position::_internal_set_secu_code(const std::string& value) {
  
  secu_code_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_position::_internal_mutable_secu_code() {
  
  return secu_code_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_position::release_secu_code() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_position.secu_code)
  return secu_code_.Release();
}
inline void ficc_position::set_allocated_secu_code(std::string* secu_code) {
  if (secu_code != nullptr) {
    
  } else {
    
  }
  secu_code_.SetAllocated(secu_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secu_code_.IsDefault()) {
    secu_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_position.secu_code)
}

// string posi_direction = 5;
inline void ficc_position::clear_posi_direction() {
  posi_direction_.ClearToEmpty();
}
inline const std::string& ficc_position::posi_direction() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.posi_direction)
  return _internal_posi_direction();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_position::set_posi_direction(ArgT0&& arg0, ArgT... args) {
 
 posi_direction_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.posi_direction)
}
inline std::string* ficc_position::mutable_posi_direction() {
  std::string* _s = _internal_mutable_posi_direction();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_position.posi_direction)
  return _s;
}
inline const std::string& ficc_position::_internal_posi_direction() const {
  return posi_direction_.Get();
}
inline void ficc_position::_internal_set_posi_direction(const std::string& value) {
  
  posi_direction_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_position::_internal_mutable_posi_direction() {
  
  return posi_direction_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_position::release_posi_direction() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_position.posi_direction)
  return posi_direction_.Release();
}
inline void ficc_position::set_allocated_posi_direction(std::string* posi_direction) {
  if (posi_direction != nullptr) {
    
  } else {
    
  }
  posi_direction_.SetAllocated(posi_direction, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (posi_direction_.IsDefault()) {
    posi_direction_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_position.posi_direction)
}

// string hedge_flag = 6;
inline void ficc_position::clear_hedge_flag() {
  hedge_flag_.ClearToEmpty();
}
inline const std::string& ficc_position::hedge_flag() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.hedge_flag)
  return _internal_hedge_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_position::set_hedge_flag(ArgT0&& arg0, ArgT... args) {
 
 hedge_flag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.hedge_flag)
}
inline std::string* ficc_position::mutable_hedge_flag() {
  std::string* _s = _internal_mutable_hedge_flag();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_position.hedge_flag)
  return _s;
}
inline const std::string& ficc_position::_internal_hedge_flag() const {
  return hedge_flag_.Get();
}
inline void ficc_position::_internal_set_hedge_flag(const std::string& value) {
  
  hedge_flag_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_position::_internal_mutable_hedge_flag() {
  
  return hedge_flag_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_position::release_hedge_flag() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_position.hedge_flag)
  return hedge_flag_.Release();
}
inline void ficc_position::set_allocated_hedge_flag(std::string* hedge_flag) {
  if (hedge_flag != nullptr) {
    
  } else {
    
  }
  hedge_flag_.SetAllocated(hedge_flag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hedge_flag_.IsDefault()) {
    hedge_flag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_position.hedge_flag)
}

// string posi_date_type = 7;
inline void ficc_position::clear_posi_date_type() {
  posi_date_type_.ClearToEmpty();
}
inline const std::string& ficc_position::posi_date_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.posi_date_type)
  return _internal_posi_date_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_position::set_posi_date_type(ArgT0&& arg0, ArgT... args) {
 
 posi_date_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.posi_date_type)
}
inline std::string* ficc_position::mutable_posi_date_type() {
  std::string* _s = _internal_mutable_posi_date_type();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_position.posi_date_type)
  return _s;
}
inline const std::string& ficc_position::_internal_posi_date_type() const {
  return posi_date_type_.Get();
}
inline void ficc_position::_internal_set_posi_date_type(const std::string& value) {
  
  posi_date_type_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_position::_internal_mutable_posi_date_type() {
  
  return posi_date_type_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_position::release_posi_date_type() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_position.posi_date_type)
  return posi_date_type_.Release();
}
inline void ficc_position::set_allocated_posi_date_type(std::string* posi_date_type) {
  if (posi_date_type != nullptr) {
    
  } else {
    
  }
  posi_date_type_.SetAllocated(posi_date_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (posi_date_type_.IsDefault()) {
    posi_date_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_position.posi_date_type)
}

// string fund_acct = 8;
inline void ficc_position::clear_fund_acct() {
  fund_acct_.ClearToEmpty();
}
inline const std::string& ficc_position::fund_acct() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.fund_acct)
  return _internal_fund_acct();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_position::set_fund_acct(ArgT0&& arg0, ArgT... args) {
 
 fund_acct_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.fund_acct)
}
inline std::string* ficc_position::mutable_fund_acct() {
  std::string* _s = _internal_mutable_fund_acct();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_position.fund_acct)
  return _s;
}
inline const std::string& ficc_position::_internal_fund_acct() const {
  return fund_acct_.Get();
}
inline void ficc_position::_internal_set_fund_acct(const std::string& value) {
  
  fund_acct_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_position::_internal_mutable_fund_acct() {
  
  return fund_acct_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_position::release_fund_acct() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_position.fund_acct)
  return fund_acct_.Release();
}
inline void ficc_position::set_allocated_fund_acct(std::string* fund_acct) {
  if (fund_acct != nullptr) {
    
  } else {
    
  }
  fund_acct_.SetAllocated(fund_acct, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fund_acct_.IsDefault()) {
    fund_acct_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_position.fund_acct)
}

// string ex_code = 9;
inline void ficc_position::clear_ex_code() {
  ex_code_.ClearToEmpty();
}
inline const std::string& ficc_position::ex_code() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.ex_code)
  return _internal_ex_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_position::set_ex_code(ArgT0&& arg0, ArgT... args) {
 
 ex_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.ex_code)
}
inline std::string* ficc_position::mutable_ex_code() {
  std::string* _s = _internal_mutable_ex_code();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_position.ex_code)
  return _s;
}
inline const std::string& ficc_position::_internal_ex_code() const {
  return ex_code_.Get();
}
inline void ficc_position::_internal_set_ex_code(const std::string& value) {
  
  ex_code_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_position::_internal_mutable_ex_code() {
  
  return ex_code_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_position::release_ex_code() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_position.ex_code)
  return ex_code_.Release();
}
inline void ficc_position::set_allocated_ex_code(std::string* ex_code) {
  if (ex_code != nullptr) {
    
  } else {
    
  }
  ex_code_.SetAllocated(ex_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ex_code_.IsDefault()) {
    ex_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_position.ex_code)
}

// float posi_profit_by_date = 10;
inline void ficc_position::clear_posi_profit_by_date() {
  posi_profit_by_date_ = 0;
}
inline float ficc_position::_internal_posi_profit_by_date() const {
  return posi_profit_by_date_;
}
inline float ficc_position::posi_profit_by_date() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.posi_profit_by_date)
  return _internal_posi_profit_by_date();
}
inline void ficc_position::_internal_set_posi_profit_by_date(float value) {
  
  posi_profit_by_date_ = value;
}
inline void ficc_position::set_posi_profit_by_date(float value) {
  _internal_set_posi_profit_by_date(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.posi_profit_by_date)
}

// float posi_profit_by_trade = 11;
inline void ficc_position::clear_posi_profit_by_trade() {
  posi_profit_by_trade_ = 0;
}
inline float ficc_position::_internal_posi_profit_by_trade() const {
  return posi_profit_by_trade_;
}
inline float ficc_position::posi_profit_by_trade() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.posi_profit_by_trade)
  return _internal_posi_profit_by_trade();
}
inline void ficc_position::_internal_set_posi_profit_by_trade(float value) {
  
  posi_profit_by_trade_ = value;
}
inline void ficc_position::set_posi_profit_by_trade(float value) {
  _internal_set_posi_profit_by_trade(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.posi_profit_by_trade)
}

// float close_profit_by_date = 12;
inline void ficc_position::clear_close_profit_by_date() {
  close_profit_by_date_ = 0;
}
inline float ficc_position::_internal_close_profit_by_date() const {
  return close_profit_by_date_;
}
inline float ficc_position::close_profit_by_date() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.close_profit_by_date)
  return _internal_close_profit_by_date();
}
inline void ficc_position::_internal_set_close_profit_by_date(float value) {
  
  close_profit_by_date_ = value;
}
inline void ficc_position::set_close_profit_by_date(float value) {
  _internal_set_close_profit_by_date(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.close_profit_by_date)
}

// float close_profit_by_trade = 13;
inline void ficc_position::clear_close_profit_by_trade() {
  close_profit_by_trade_ = 0;
}
inline float ficc_position::_internal_close_profit_by_trade() const {
  return close_profit_by_trade_;
}
inline float ficc_position::close_profit_by_trade() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.close_profit_by_trade)
  return _internal_close_profit_by_trade();
}
inline void ficc_position::_internal_set_close_profit_by_trade(float value) {
  
  close_profit_by_trade_ = value;
}
inline void ficc_position::set_close_profit_by_trade(float value) {
  _internal_set_close_profit_by_trade(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.close_profit_by_trade)
}

// uint64 last_position = 14;
inline void ficc_position::clear_last_position() {
  last_position_ = uint64_t{0u};
}
inline uint64_t ficc_position::_internal_last_position() const {
  return last_position_;
}
inline uint64_t ficc_position::last_position() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.last_position)
  return _internal_last_position();
}
inline void ficc_position::_internal_set_last_position(uint64_t value) {
  
  last_position_ = value;
}
inline void ficc_position::set_last_position(uint64_t value) {
  _internal_set_last_position(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.last_position)
}

// uint64 posi_vol = 15;
inline void ficc_position::clear_posi_vol() {
  posi_vol_ = uint64_t{0u};
}
inline uint64_t ficc_position::_internal_posi_vol() const {
  return posi_vol_;
}
inline uint64_t ficc_position::posi_vol() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.posi_vol)
  return _internal_posi_vol();
}
inline void ficc_position::_internal_set_posi_vol(uint64_t value) {
  
  posi_vol_ = value;
}
inline void ficc_position::set_posi_vol(uint64_t value) {
  _internal_set_posi_vol(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.posi_vol)
}

// uint64 today_position = 16;
inline void ficc_position::clear_today_position() {
  today_position_ = uint64_t{0u};
}
inline uint64_t ficc_position::_internal_today_position() const {
  return today_position_;
}
inline uint64_t ficc_position::today_position() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.today_position)
  return _internal_today_position();
}
inline void ficc_position::_internal_set_today_position(uint64_t value) {
  
  today_position_ = value;
}
inline void ficc_position::set_today_position(uint64_t value) {
  _internal_set_today_position(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.today_position)
}

// uint64 frozen_position = 17;
inline void ficc_position::clear_frozen_position() {
  frozen_position_ = uint64_t{0u};
}
inline uint64_t ficc_position::_internal_frozen_position() const {
  return frozen_position_;
}
inline uint64_t ficc_position::frozen_position() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.frozen_position)
  return _internal_frozen_position();
}
inline void ficc_position::_internal_set_frozen_position(uint64_t value) {
  
  frozen_position_ = value;
}
inline void ficc_position::set_frozen_position(uint64_t value) {
  _internal_set_frozen_position(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.frozen_position)
}

// float frozen_amount = 18;
inline void ficc_position::clear_frozen_amount() {
  frozen_amount_ = 0;
}
inline float ficc_position::_internal_frozen_amount() const {
  return frozen_amount_;
}
inline float ficc_position::frozen_amount() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.frozen_amount)
  return _internal_frozen_amount();
}
inline void ficc_position::_internal_set_frozen_amount(float value) {
  
  frozen_amount_ = value;
}
inline void ficc_position::set_frozen_amount(float value) {
  _internal_set_frozen_amount(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.frozen_amount)
}

// uint64 open_vol = 19;
inline void ficc_position::clear_open_vol() {
  open_vol_ = uint64_t{0u};
}
inline uint64_t ficc_position::_internal_open_vol() const {
  return open_vol_;
}
inline uint64_t ficc_position::open_vol() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.open_vol)
  return _internal_open_vol();
}
inline void ficc_position::_internal_set_open_vol(uint64_t value) {
  
  open_vol_ = value;
}
inline void ficc_position::set_open_vol(uint64_t value) {
  _internal_set_open_vol(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.open_vol)
}

// uint64 close_vol = 20;
inline void ficc_position::clear_close_vol() {
  close_vol_ = uint64_t{0u};
}
inline uint64_t ficc_position::_internal_close_vol() const {
  return close_vol_;
}
inline uint64_t ficc_position::close_vol() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.close_vol)
  return _internal_close_vol();
}
inline void ficc_position::_internal_set_close_vol(uint64_t value) {
  
  close_vol_ = value;
}
inline void ficc_position::set_close_vol(uint64_t value) {
  _internal_set_close_vol(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.close_vol)
}

// float open_amount = 21;
inline void ficc_position::clear_open_amount() {
  open_amount_ = 0;
}
inline float ficc_position::_internal_open_amount() const {
  return open_amount_;
}
inline float ficc_position::open_amount() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.open_amount)
  return _internal_open_amount();
}
inline void ficc_position::_internal_set_open_amount(float value) {
  
  open_amount_ = value;
}
inline void ficc_position::set_open_amount(float value) {
  _internal_set_open_amount(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.open_amount)
}

// float close_amount = 22;
inline void ficc_position::clear_close_amount() {
  close_amount_ = 0;
}
inline float ficc_position::_internal_close_amount() const {
  return close_amount_;
}
inline float ficc_position::close_amount() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.close_amount)
  return _internal_close_amount();
}
inline void ficc_position::_internal_set_close_amount(float value) {
  
  close_amount_ = value;
}
inline void ficc_position::set_close_amount(float value) {
  _internal_set_close_amount(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.close_amount)
}

// float posi_cost = 23;
inline void ficc_position::clear_posi_cost() {
  posi_cost_ = 0;
}
inline float ficc_position::_internal_posi_cost() const {
  return posi_cost_;
}
inline float ficc_position::posi_cost() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.posi_cost)
  return _internal_posi_cost();
}
inline void ficc_position::_internal_set_posi_cost(float value) {
  
  posi_cost_ = value;
}
inline void ficc_position::set_posi_cost(float value) {
  _internal_set_posi_cost(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.posi_cost)
}

// float open_cost = 24;
inline void ficc_position::clear_open_cost() {
  open_cost_ = 0;
}
inline float ficc_position::_internal_open_cost() const {
  return open_cost_;
}
inline float ficc_position::open_cost() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.open_cost)
  return _internal_open_cost();
}
inline void ficc_position::_internal_set_open_cost(float value) {
  
  open_cost_ = value;
}
inline void ficc_position::set_open_cost(float value) {
  _internal_set_open_cost(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.open_cost)
}

// float pre_margin = 25;
inline void ficc_position::clear_pre_margin() {
  pre_margin_ = 0;
}
inline float ficc_position::_internal_pre_margin() const {
  return pre_margin_;
}
inline float ficc_position::pre_margin() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.pre_margin)
  return _internal_pre_margin();
}
inline void ficc_position::_internal_set_pre_margin(float value) {
  
  pre_margin_ = value;
}
inline void ficc_position::set_pre_margin(float value) {
  _internal_set_pre_margin(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.pre_margin)
}

// float use_margin = 26;
inline void ficc_position::clear_use_margin() {
  use_margin_ = 0;
}
inline float ficc_position::_internal_use_margin() const {
  return use_margin_;
}
inline float ficc_position::use_margin() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.use_margin)
  return _internal_use_margin();
}
inline void ficc_position::_internal_set_use_margin(float value) {
  
  use_margin_ = value;
}
inline void ficc_position::set_use_margin(float value) {
  _internal_set_use_margin(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.use_margin)
}

// float frozen_margin = 27;
inline void ficc_position::clear_frozen_margin() {
  frozen_margin_ = 0;
}
inline float ficc_position::_internal_frozen_margin() const {
  return frozen_margin_;
}
inline float ficc_position::frozen_margin() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.frozen_margin)
  return _internal_frozen_margin();
}
inline void ficc_position::_internal_set_frozen_margin(float value) {
  
  frozen_margin_ = value;
}
inline void ficc_position::set_frozen_margin(float value) {
  _internal_set_frozen_margin(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.frozen_margin)
}

// float frozen_cash = 28;
inline void ficc_position::clear_frozen_cash() {
  frozen_cash_ = 0;
}
inline float ficc_position::_internal_frozen_cash() const {
  return frozen_cash_;
}
inline float ficc_position::frozen_cash() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.frozen_cash)
  return _internal_frozen_cash();
}
inline void ficc_position::_internal_set_frozen_cash(float value) {
  
  frozen_cash_ = value;
}
inline void ficc_position::set_frozen_cash(float value) {
  _internal_set_frozen_cash(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.frozen_cash)
}

// float frozen_fee = 29;
inline void ficc_position::clear_frozen_fee() {
  frozen_fee_ = 0;
}
inline float ficc_position::_internal_frozen_fee() const {
  return frozen_fee_;
}
inline float ficc_position::frozen_fee() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.frozen_fee)
  return _internal_frozen_fee();
}
inline void ficc_position::_internal_set_frozen_fee(float value) {
  
  frozen_fee_ = value;
}
inline void ficc_position::set_frozen_fee(float value) {
  _internal_set_frozen_fee(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.frozen_fee)
}

// float adjust = 30;
inline void ficc_position::clear_adjust() {
  adjust_ = 0;
}
inline float ficc_position::_internal_adjust() const {
  return adjust_;
}
inline float ficc_position::adjust() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.adjust)
  return _internal_adjust();
}
inline void ficc_position::_internal_set_adjust(float value) {
  
  adjust_ = value;
}
inline void ficc_position::set_adjust(float value) {
  _internal_set_adjust(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.adjust)
}

// float trade_fee = 31;
inline void ficc_position::clear_trade_fee() {
  trade_fee_ = 0;
}
inline float ficc_position::_internal_trade_fee() const {
  return trade_fee_;
}
inline float ficc_position::trade_fee() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.trade_fee)
  return _internal_trade_fee();
}
inline void ficc_position::_internal_set_trade_fee(float value) {
  
  trade_fee_ = value;
}
inline void ficc_position::set_trade_fee(float value) {
  _internal_set_trade_fee(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.trade_fee)
}

// float pre_settlement_price = 32;
inline void ficc_position::clear_pre_settlement_price() {
  pre_settlement_price_ = 0;
}
inline float ficc_position::_internal_pre_settlement_price() const {
  return pre_settlement_price_;
}
inline float ficc_position::pre_settlement_price() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.pre_settlement_price)
  return _internal_pre_settlement_price();
}
inline void ficc_position::_internal_set_pre_settlement_price(float value) {
  
  pre_settlement_price_ = value;
}
inline void ficc_position::set_pre_settlement_price(float value) {
  _internal_set_pre_settlement_price(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.pre_settlement_price)
}

// uint64 long_frozen = 33;
inline void ficc_position::clear_long_frozen() {
  long_frozen_ = uint64_t{0u};
}
inline uint64_t ficc_position::_internal_long_frozen() const {
  return long_frozen_;
}
inline uint64_t ficc_position::long_frozen() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.long_frozen)
  return _internal_long_frozen();
}
inline void ficc_position::_internal_set_long_frozen(uint64_t value) {
  
  long_frozen_ = value;
}
inline void ficc_position::set_long_frozen(uint64_t value) {
  _internal_set_long_frozen(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.long_frozen)
}

// uint64 short_frozen = 34;
inline void ficc_position::clear_short_frozen() {
  short_frozen_ = uint64_t{0u};
}
inline uint64_t ficc_position::_internal_short_frozen() const {
  return short_frozen_;
}
inline uint64_t ficc_position::short_frozen() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.short_frozen)
  return _internal_short_frozen();
}
inline void ficc_position::_internal_set_short_frozen(uint64_t value) {
  
  short_frozen_ = value;
}
inline void ficc_position::set_short_frozen(uint64_t value) {
  _internal_set_short_frozen(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.short_frozen)
}

// float long_frozen_amount = 35;
inline void ficc_position::clear_long_frozen_amount() {
  long_frozen_amount_ = 0;
}
inline float ficc_position::_internal_long_frozen_amount() const {
  return long_frozen_amount_;
}
inline float ficc_position::long_frozen_amount() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.long_frozen_amount)
  return _internal_long_frozen_amount();
}
inline void ficc_position::_internal_set_long_frozen_amount(float value) {
  
  long_frozen_amount_ = value;
}
inline void ficc_position::set_long_frozen_amount(float value) {
  _internal_set_long_frozen_amount(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.long_frozen_amount)
}

// float short_frozen_amount = 36;
inline void ficc_position::clear_short_frozen_amount() {
  short_frozen_amount_ = 0;
}
inline float ficc_position::_internal_short_frozen_amount() const {
  return short_frozen_amount_;
}
inline float ficc_position::short_frozen_amount() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.short_frozen_amount)
  return _internal_short_frozen_amount();
}
inline void ficc_position::_internal_set_short_frozen_amount(float value) {
  
  short_frozen_amount_ = value;
}
inline void ficc_position::set_short_frozen_amount(float value) {
  _internal_set_short_frozen_amount(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.short_frozen_amount)
}

// float margin_rate_by_vol = 37;
inline void ficc_position::clear_margin_rate_by_vol() {
  margin_rate_by_vol_ = 0;
}
inline float ficc_position::_internal_margin_rate_by_vol() const {
  return margin_rate_by_vol_;
}
inline float ficc_position::margin_rate_by_vol() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.margin_rate_by_vol)
  return _internal_margin_rate_by_vol();
}
inline void ficc_position::_internal_set_margin_rate_by_vol(float value) {
  
  margin_rate_by_vol_ = value;
}
inline void ficc_position::set_margin_rate_by_vol(float value) {
  _internal_set_margin_rate_by_vol(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.margin_rate_by_vol)
}

// float margin_rate_by_money = 38;
inline void ficc_position::clear_margin_rate_by_money() {
  margin_rate_by_money_ = 0;
}
inline float ficc_position::_internal_margin_rate_by_money() const {
  return margin_rate_by_money_;
}
inline float ficc_position::margin_rate_by_money() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_position.margin_rate_by_money)
  return _internal_margin_rate_by_money();
}
inline void ficc_position::_internal_set_margin_rate_by_money(float value) {
  
  margin_rate_by_money_ = value;
}
inline void ficc_position::set_margin_rate_by_money(float value) {
  _internal_set_margin_rate_by_money(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_position.margin_rate_by_money)
}

// -------------------------------------------------------------------

// ficc_Exch_BilateralOrder_Req

// .message_head.head head = 1;
inline bool ficc_Exch_BilateralOrder_Req::_internal_has_head() const {
  return this != internal_default_instance() && head_ != nullptr;
}
inline bool ficc_Exch_BilateralOrder_Req::has_head() const {
  return _internal_has_head();
}
inline const ::message_head::head& ficc_Exch_BilateralOrder_Req::_internal_head() const {
  const ::message_head::head* p = head_;
  return p != nullptr ? *p : reinterpret_cast<const ::message_head::head&>(
      ::message_head::_head_default_instance_);
}
inline const ::message_head::head& ficc_Exch_BilateralOrder_Req::head() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.head)
  return _internal_head();
}
inline void ficc_Exch_BilateralOrder_Req::unsafe_arena_set_allocated_head(
    ::message_head::head* head) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Req.head)
}
inline ::message_head::head* ficc_Exch_BilateralOrder_Req::release_head() {
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message_head::head* ficc_Exch_BilateralOrder_Req::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_BilateralOrder_Req.head)
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
  return temp;
}
inline ::message_head::head* ficc_Exch_BilateralOrder_Req::_internal_mutable_head() {
  
  if (head_ == nullptr) {
    auto* p = CreateMaybeMessage<::message_head::head>(GetArenaForAllocation());
    head_ = p;
  }
  return head_;
}
inline ::message_head::head* ficc_Exch_BilateralOrder_Req::mutable_head() {
  ::message_head::head* _msg = _internal_mutable_head();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_BilateralOrder_Req.head)
  return _msg;
}
inline void ficc_Exch_BilateralOrder_Req::set_allocated_head(::message_head::head* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head));
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Req.head)
}

// string trade_acct = 2;
inline void ficc_Exch_BilateralOrder_Req::clear_trade_acct() {
  trade_acct_.ClearToEmpty();
}
inline const std::string& ficc_Exch_BilateralOrder_Req::trade_acct() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.trade_acct)
  return _internal_trade_acct();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_BilateralOrder_Req::set_trade_acct(ArgT0&& arg0, ArgT... args) {
 
 trade_acct_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.trade_acct)
}
inline std::string* ficc_Exch_BilateralOrder_Req::mutable_trade_acct() {
  std::string* _s = _internal_mutable_trade_acct();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_BilateralOrder_Req.trade_acct)
  return _s;
}
inline const std::string& ficc_Exch_BilateralOrder_Req::_internal_trade_acct() const {
  return trade_acct_.Get();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_trade_acct(const std::string& value) {
  
  trade_acct_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::_internal_mutable_trade_acct() {
  
  return trade_acct_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::release_trade_acct() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_BilateralOrder_Req.trade_acct)
  return trade_acct_.Release();
}
inline void ficc_Exch_BilateralOrder_Req::set_allocated_trade_acct(std::string* trade_acct) {
  if (trade_acct != nullptr) {
    
  } else {
    
  }
  trade_acct_.SetAllocated(trade_acct, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trade_acct_.IsDefault()) {
    trade_acct_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Req.trade_acct)
}

// string fund_acct = 3;
inline void ficc_Exch_BilateralOrder_Req::clear_fund_acct() {
  fund_acct_.ClearToEmpty();
}
inline const std::string& ficc_Exch_BilateralOrder_Req::fund_acct() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.fund_acct)
  return _internal_fund_acct();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_BilateralOrder_Req::set_fund_acct(ArgT0&& arg0, ArgT... args) {
 
 fund_acct_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.fund_acct)
}
inline std::string* ficc_Exch_BilateralOrder_Req::mutable_fund_acct() {
  std::string* _s = _internal_mutable_fund_acct();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_BilateralOrder_Req.fund_acct)
  return _s;
}
inline const std::string& ficc_Exch_BilateralOrder_Req::_internal_fund_acct() const {
  return fund_acct_.Get();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_fund_acct(const std::string& value) {
  
  fund_acct_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::_internal_mutable_fund_acct() {
  
  return fund_acct_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::release_fund_acct() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_BilateralOrder_Req.fund_acct)
  return fund_acct_.Release();
}
inline void ficc_Exch_BilateralOrder_Req::set_allocated_fund_acct(std::string* fund_acct) {
  if (fund_acct != nullptr) {
    
  } else {
    
  }
  fund_acct_.SetAllocated(fund_acct, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fund_acct_.IsDefault()) {
    fund_acct_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Req.fund_acct)
}

// string combino = 4;
inline void ficc_Exch_BilateralOrder_Req::clear_combino() {
  combino_.ClearToEmpty();
}
inline const std::string& ficc_Exch_BilateralOrder_Req::combino() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.combino)
  return _internal_combino();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_BilateralOrder_Req::set_combino(ArgT0&& arg0, ArgT... args) {
 
 combino_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.combino)
}
inline std::string* ficc_Exch_BilateralOrder_Req::mutable_combino() {
  std::string* _s = _internal_mutable_combino();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_BilateralOrder_Req.combino)
  return _s;
}
inline const std::string& ficc_Exch_BilateralOrder_Req::_internal_combino() const {
  return combino_.Get();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_combino(const std::string& value) {
  
  combino_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::_internal_mutable_combino() {
  
  return combino_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::release_combino() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_BilateralOrder_Req.combino)
  return combino_.Release();
}
inline void ficc_Exch_BilateralOrder_Req::set_allocated_combino(std::string* combino) {
  if (combino != nullptr) {
    
  } else {
    
  }
  combino_.SetAllocated(combino, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (combino_.IsDefault()) {
    combino_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Req.combino)
}

// uint32 user_id = 5;
inline void ficc_Exch_BilateralOrder_Req::clear_user_id() {
  user_id_ = 0u;
}
inline uint32_t ficc_Exch_BilateralOrder_Req::_internal_user_id() const {
  return user_id_;
}
inline uint32_t ficc_Exch_BilateralOrder_Req::user_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.user_id)
  return _internal_user_id();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_user_id(uint32_t value) {
  
  user_id_ = value;
}
inline void ficc_Exch_BilateralOrder_Req::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.user_id)
}

// string ex_code = 6;
inline void ficc_Exch_BilateralOrder_Req::clear_ex_code() {
  ex_code_.ClearToEmpty();
}
inline const std::string& ficc_Exch_BilateralOrder_Req::ex_code() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.ex_code)
  return _internal_ex_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_BilateralOrder_Req::set_ex_code(ArgT0&& arg0, ArgT... args) {
 
 ex_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.ex_code)
}
inline std::string* ficc_Exch_BilateralOrder_Req::mutable_ex_code() {
  std::string* _s = _internal_mutable_ex_code();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_BilateralOrder_Req.ex_code)
  return _s;
}
inline const std::string& ficc_Exch_BilateralOrder_Req::_internal_ex_code() const {
  return ex_code_.Get();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_ex_code(const std::string& value) {
  
  ex_code_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::_internal_mutable_ex_code() {
  
  return ex_code_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::release_ex_code() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_BilateralOrder_Req.ex_code)
  return ex_code_.Release();
}
inline void ficc_Exch_BilateralOrder_Req::set_allocated_ex_code(std::string* ex_code) {
  if (ex_code != nullptr) {
    
  } else {
    
  }
  ex_code_.SetAllocated(ex_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ex_code_.IsDefault()) {
    ex_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Req.ex_code)
}

// string commodity_type = 7;
inline void ficc_Exch_BilateralOrder_Req::clear_commodity_type() {
  commodity_type_.ClearToEmpty();
}
inline const std::string& ficc_Exch_BilateralOrder_Req::commodity_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.commodity_type)
  return _internal_commodity_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_BilateralOrder_Req::set_commodity_type(ArgT0&& arg0, ArgT... args) {
 
 commodity_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.commodity_type)
}
inline std::string* ficc_Exch_BilateralOrder_Req::mutable_commodity_type() {
  std::string* _s = _internal_mutable_commodity_type();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_BilateralOrder_Req.commodity_type)
  return _s;
}
inline const std::string& ficc_Exch_BilateralOrder_Req::_internal_commodity_type() const {
  return commodity_type_.Get();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_commodity_type(const std::string& value) {
  
  commodity_type_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::_internal_mutable_commodity_type() {
  
  return commodity_type_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::release_commodity_type() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_BilateralOrder_Req.commodity_type)
  return commodity_type_.Release();
}
inline void ficc_Exch_BilateralOrder_Req::set_allocated_commodity_type(std::string* commodity_type) {
  if (commodity_type != nullptr) {
    
  } else {
    
  }
  commodity_type_.SetAllocated(commodity_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (commodity_type_.IsDefault()) {
    commodity_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Req.commodity_type)
}

// string secu_code = 8;
inline void ficc_Exch_BilateralOrder_Req::clear_secu_code() {
  secu_code_.ClearToEmpty();
}
inline const std::string& ficc_Exch_BilateralOrder_Req::secu_code() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.secu_code)
  return _internal_secu_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_BilateralOrder_Req::set_secu_code(ArgT0&& arg0, ArgT... args) {
 
 secu_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.secu_code)
}
inline std::string* ficc_Exch_BilateralOrder_Req::mutable_secu_code() {
  std::string* _s = _internal_mutable_secu_code();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_BilateralOrder_Req.secu_code)
  return _s;
}
inline const std::string& ficc_Exch_BilateralOrder_Req::_internal_secu_code() const {
  return secu_code_.Get();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_secu_code(const std::string& value) {
  
  secu_code_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::_internal_mutable_secu_code() {
  
  return secu_code_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::release_secu_code() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_BilateralOrder_Req.secu_code)
  return secu_code_.Release();
}
inline void ficc_Exch_BilateralOrder_Req::set_allocated_secu_code(std::string* secu_code) {
  if (secu_code != nullptr) {
    
  } else {
    
  }
  secu_code_.SetAllocated(secu_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secu_code_.IsDefault()) {
    secu_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Req.secu_code)
}

// string secu_name = 9;
inline void ficc_Exch_BilateralOrder_Req::clear_secu_name() {
  secu_name_.ClearToEmpty();
}
inline const std::string& ficc_Exch_BilateralOrder_Req::secu_name() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.secu_name)
  return _internal_secu_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_BilateralOrder_Req::set_secu_name(ArgT0&& arg0, ArgT... args) {
 
 secu_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.secu_name)
}
inline std::string* ficc_Exch_BilateralOrder_Req::mutable_secu_name() {
  std::string* _s = _internal_mutable_secu_name();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_BilateralOrder_Req.secu_name)
  return _s;
}
inline const std::string& ficc_Exch_BilateralOrder_Req::_internal_secu_name() const {
  return secu_name_.Get();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_secu_name(const std::string& value) {
  
  secu_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::_internal_mutable_secu_name() {
  
  return secu_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::release_secu_name() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_BilateralOrder_Req.secu_name)
  return secu_name_.Release();
}
inline void ficc_Exch_BilateralOrder_Req::set_allocated_secu_name(std::string* secu_name) {
  if (secu_name != nullptr) {
    
  } else {
    
  }
  secu_name_.SetAllocated(secu_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secu_name_.IsDefault()) {
    secu_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Req.secu_name)
}

// string order_price_type = 10;
inline void ficc_Exch_BilateralOrder_Req::clear_order_price_type() {
  order_price_type_.ClearToEmpty();
}
inline const std::string& ficc_Exch_BilateralOrder_Req::order_price_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.order_price_type)
  return _internal_order_price_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_BilateralOrder_Req::set_order_price_type(ArgT0&& arg0, ArgT... args) {
 
 order_price_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.order_price_type)
}
inline std::string* ficc_Exch_BilateralOrder_Req::mutable_order_price_type() {
  std::string* _s = _internal_mutable_order_price_type();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_BilateralOrder_Req.order_price_type)
  return _s;
}
inline const std::string& ficc_Exch_BilateralOrder_Req::_internal_order_price_type() const {
  return order_price_type_.Get();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_order_price_type(const std::string& value) {
  
  order_price_type_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::_internal_mutable_order_price_type() {
  
  return order_price_type_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::release_order_price_type() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_BilateralOrder_Req.order_price_type)
  return order_price_type_.Release();
}
inline void ficc_Exch_BilateralOrder_Req::set_allocated_order_price_type(std::string* order_price_type) {
  if (order_price_type != nullptr) {
    
  } else {
    
  }
  order_price_type_.SetAllocated(order_price_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_price_type_.IsDefault()) {
    order_price_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Req.order_price_type)
}

// string offset_flag = 11;
inline void ficc_Exch_BilateralOrder_Req::clear_offset_flag() {
  offset_flag_.ClearToEmpty();
}
inline const std::string& ficc_Exch_BilateralOrder_Req::offset_flag() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.offset_flag)
  return _internal_offset_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_BilateralOrder_Req::set_offset_flag(ArgT0&& arg0, ArgT... args) {
 
 offset_flag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.offset_flag)
}
inline std::string* ficc_Exch_BilateralOrder_Req::mutable_offset_flag() {
  std::string* _s = _internal_mutable_offset_flag();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_BilateralOrder_Req.offset_flag)
  return _s;
}
inline const std::string& ficc_Exch_BilateralOrder_Req::_internal_offset_flag() const {
  return offset_flag_.Get();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_offset_flag(const std::string& value) {
  
  offset_flag_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::_internal_mutable_offset_flag() {
  
  return offset_flag_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::release_offset_flag() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_BilateralOrder_Req.offset_flag)
  return offset_flag_.Release();
}
inline void ficc_Exch_BilateralOrder_Req::set_allocated_offset_flag(std::string* offset_flag) {
  if (offset_flag != nullptr) {
    
  } else {
    
  }
  offset_flag_.SetAllocated(offset_flag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (offset_flag_.IsDefault()) {
    offset_flag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Req.offset_flag)
}

// string hedge_flag = 12;
inline void ficc_Exch_BilateralOrder_Req::clear_hedge_flag() {
  hedge_flag_.ClearToEmpty();
}
inline const std::string& ficc_Exch_BilateralOrder_Req::hedge_flag() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.hedge_flag)
  return _internal_hedge_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_BilateralOrder_Req::set_hedge_flag(ArgT0&& arg0, ArgT... args) {
 
 hedge_flag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.hedge_flag)
}
inline std::string* ficc_Exch_BilateralOrder_Req::mutable_hedge_flag() {
  std::string* _s = _internal_mutable_hedge_flag();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_BilateralOrder_Req.hedge_flag)
  return _s;
}
inline const std::string& ficc_Exch_BilateralOrder_Req::_internal_hedge_flag() const {
  return hedge_flag_.Get();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_hedge_flag(const std::string& value) {
  
  hedge_flag_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::_internal_mutable_hedge_flag() {
  
  return hedge_flag_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::release_hedge_flag() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_BilateralOrder_Req.hedge_flag)
  return hedge_flag_.Release();
}
inline void ficc_Exch_BilateralOrder_Req::set_allocated_hedge_flag(std::string* hedge_flag) {
  if (hedge_flag != nullptr) {
    
  } else {
    
  }
  hedge_flag_.SetAllocated(hedge_flag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hedge_flag_.IsDefault()) {
    hedge_flag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Req.hedge_flag)
}

// string seat_order_id = 13;
inline void ficc_Exch_BilateralOrder_Req::clear_seat_order_id() {
  seat_order_id_.ClearToEmpty();
}
inline const std::string& ficc_Exch_BilateralOrder_Req::seat_order_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.seat_order_id)
  return _internal_seat_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_BilateralOrder_Req::set_seat_order_id(ArgT0&& arg0, ArgT... args) {
 
 seat_order_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.seat_order_id)
}
inline std::string* ficc_Exch_BilateralOrder_Req::mutable_seat_order_id() {
  std::string* _s = _internal_mutable_seat_order_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_BilateralOrder_Req.seat_order_id)
  return _s;
}
inline const std::string& ficc_Exch_BilateralOrder_Req::_internal_seat_order_id() const {
  return seat_order_id_.Get();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_seat_order_id(const std::string& value) {
  
  seat_order_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::_internal_mutable_seat_order_id() {
  
  return seat_order_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::release_seat_order_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_BilateralOrder_Req.seat_order_id)
  return seat_order_id_.Release();
}
inline void ficc_Exch_BilateralOrder_Req::set_allocated_seat_order_id(std::string* seat_order_id) {
  if (seat_order_id != nullptr) {
    
  } else {
    
  }
  seat_order_id_.SetAllocated(seat_order_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (seat_order_id_.IsDefault()) {
    seat_order_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Req.seat_order_id)
}

// float bid_price = 14;
inline void ficc_Exch_BilateralOrder_Req::clear_bid_price() {
  bid_price_ = 0;
}
inline float ficc_Exch_BilateralOrder_Req::_internal_bid_price() const {
  return bid_price_;
}
inline float ficc_Exch_BilateralOrder_Req::bid_price() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.bid_price)
  return _internal_bid_price();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_bid_price(float value) {
  
  bid_price_ = value;
}
inline void ficc_Exch_BilateralOrder_Req::set_bid_price(float value) {
  _internal_set_bid_price(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.bid_price)
}

// uint64 bid_vol = 15;
inline void ficc_Exch_BilateralOrder_Req::clear_bid_vol() {
  bid_vol_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_BilateralOrder_Req::_internal_bid_vol() const {
  return bid_vol_;
}
inline uint64_t ficc_Exch_BilateralOrder_Req::bid_vol() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.bid_vol)
  return _internal_bid_vol();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_bid_vol(uint64_t value) {
  
  bid_vol_ = value;
}
inline void ficc_Exch_BilateralOrder_Req::set_bid_vol(uint64_t value) {
  _internal_set_bid_vol(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.bid_vol)
}

// float ask_price = 16;
inline void ficc_Exch_BilateralOrder_Req::clear_ask_price() {
  ask_price_ = 0;
}
inline float ficc_Exch_BilateralOrder_Req::_internal_ask_price() const {
  return ask_price_;
}
inline float ficc_Exch_BilateralOrder_Req::ask_price() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.ask_price)
  return _internal_ask_price();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_ask_price(float value) {
  
  ask_price_ = value;
}
inline void ficc_Exch_BilateralOrder_Req::set_ask_price(float value) {
  _internal_set_ask_price(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.ask_price)
}

// uint64 ask_vol = 17;
inline void ficc_Exch_BilateralOrder_Req::clear_ask_vol() {
  ask_vol_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_BilateralOrder_Req::_internal_ask_vol() const {
  return ask_vol_;
}
inline uint64_t ficc_Exch_BilateralOrder_Req::ask_vol() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.ask_vol)
  return _internal_ask_vol();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_ask_vol(uint64_t value) {
  
  ask_vol_ = value;
}
inline void ficc_Exch_BilateralOrder_Req::set_ask_vol(uint64_t value) {
  _internal_set_ask_vol(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.ask_vol)
}

// string time_cond = 18;
inline void ficc_Exch_BilateralOrder_Req::clear_time_cond() {
  time_cond_.ClearToEmpty();
}
inline const std::string& ficc_Exch_BilateralOrder_Req::time_cond() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.time_cond)
  return _internal_time_cond();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_BilateralOrder_Req::set_time_cond(ArgT0&& arg0, ArgT... args) {
 
 time_cond_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.time_cond)
}
inline std::string* ficc_Exch_BilateralOrder_Req::mutable_time_cond() {
  std::string* _s = _internal_mutable_time_cond();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_BilateralOrder_Req.time_cond)
  return _s;
}
inline const std::string& ficc_Exch_BilateralOrder_Req::_internal_time_cond() const {
  return time_cond_.Get();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_time_cond(const std::string& value) {
  
  time_cond_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::_internal_mutable_time_cond() {
  
  return time_cond_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::release_time_cond() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_BilateralOrder_Req.time_cond)
  return time_cond_.Release();
}
inline void ficc_Exch_BilateralOrder_Req::set_allocated_time_cond(std::string* time_cond) {
  if (time_cond != nullptr) {
    
  } else {
    
  }
  time_cond_.SetAllocated(time_cond, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (time_cond_.IsDefault()) {
    time_cond_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Req.time_cond)
}

// uint64 strategy_code = 19;
inline void ficc_Exch_BilateralOrder_Req::clear_strategy_code() {
  strategy_code_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_BilateralOrder_Req::_internal_strategy_code() const {
  return strategy_code_;
}
inline uint64_t ficc_Exch_BilateralOrder_Req::strategy_code() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.strategy_code)
  return _internal_strategy_code();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_strategy_code(uint64_t value) {
  
  strategy_code_ = value;
}
inline void ficc_Exch_BilateralOrder_Req::set_strategy_code(uint64_t value) {
  _internal_set_strategy_code(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.strategy_code)
}

// string text = 20;
inline void ficc_Exch_BilateralOrder_Req::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& ficc_Exch_BilateralOrder_Req::text() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_BilateralOrder_Req::set_text(ArgT0&& arg0, ArgT... args) {
 
 text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.text)
}
inline std::string* ficc_Exch_BilateralOrder_Req::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_BilateralOrder_Req.text)
  return _s;
}
inline const std::string& ficc_Exch_BilateralOrder_Req::_internal_text() const {
  return text_.Get();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_text(const std::string& value) {
  
  text_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::_internal_mutable_text() {
  
  return text_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::release_text() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_BilateralOrder_Req.text)
  return text_.Release();
}
inline void ficc_Exch_BilateralOrder_Req::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault()) {
    text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Req.text)
}

// string order_sys_id = 21;
inline void ficc_Exch_BilateralOrder_Req::clear_order_sys_id() {
  order_sys_id_.ClearToEmpty();
}
inline const std::string& ficc_Exch_BilateralOrder_Req::order_sys_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.order_sys_id)
  return _internal_order_sys_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_BilateralOrder_Req::set_order_sys_id(ArgT0&& arg0, ArgT... args) {
 
 order_sys_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.order_sys_id)
}
inline std::string* ficc_Exch_BilateralOrder_Req::mutable_order_sys_id() {
  std::string* _s = _internal_mutable_order_sys_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_BilateralOrder_Req.order_sys_id)
  return _s;
}
inline const std::string& ficc_Exch_BilateralOrder_Req::_internal_order_sys_id() const {
  return order_sys_id_.Get();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_order_sys_id(const std::string& value) {
  
  order_sys_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::_internal_mutable_order_sys_id() {
  
  return order_sys_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::release_order_sys_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_BilateralOrder_Req.order_sys_id)
  return order_sys_id_.Release();
}
inline void ficc_Exch_BilateralOrder_Req::set_allocated_order_sys_id(std::string* order_sys_id) {
  if (order_sys_id != nullptr) {
    
  } else {
    
  }
  order_sys_id_.SetAllocated(order_sys_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_sys_id_.IsDefault()) {
    order_sys_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Req.order_sys_id)
}

// string trade_date = 22;
inline void ficc_Exch_BilateralOrder_Req::clear_trade_date() {
  trade_date_.ClearToEmpty();
}
inline const std::string& ficc_Exch_BilateralOrder_Req::trade_date() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.trade_date)
  return _internal_trade_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_BilateralOrder_Req::set_trade_date(ArgT0&& arg0, ArgT... args) {
 
 trade_date_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.trade_date)
}
inline std::string* ficc_Exch_BilateralOrder_Req::mutable_trade_date() {
  std::string* _s = _internal_mutable_trade_date();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_BilateralOrder_Req.trade_date)
  return _s;
}
inline const std::string& ficc_Exch_BilateralOrder_Req::_internal_trade_date() const {
  return trade_date_.Get();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_trade_date(const std::string& value) {
  
  trade_date_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::_internal_mutable_trade_date() {
  
  return trade_date_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::release_trade_date() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_BilateralOrder_Req.trade_date)
  return trade_date_.Release();
}
inline void ficc_Exch_BilateralOrder_Req::set_allocated_trade_date(std::string* trade_date) {
  if (trade_date != nullptr) {
    
  } else {
    
  }
  trade_date_.SetAllocated(trade_date, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trade_date_.IsDefault()) {
    trade_date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Req.trade_date)
}

// string insert_time = 23;
inline void ficc_Exch_BilateralOrder_Req::clear_insert_time() {
  insert_time_.ClearToEmpty();
}
inline const std::string& ficc_Exch_BilateralOrder_Req::insert_time() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.insert_time)
  return _internal_insert_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_BilateralOrder_Req::set_insert_time(ArgT0&& arg0, ArgT... args) {
 
 insert_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.insert_time)
}
inline std::string* ficc_Exch_BilateralOrder_Req::mutable_insert_time() {
  std::string* _s = _internal_mutable_insert_time();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_BilateralOrder_Req.insert_time)
  return _s;
}
inline const std::string& ficc_Exch_BilateralOrder_Req::_internal_insert_time() const {
  return insert_time_.Get();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_insert_time(const std::string& value) {
  
  insert_time_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::_internal_mutable_insert_time() {
  
  return insert_time_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::release_insert_time() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_BilateralOrder_Req.insert_time)
  return insert_time_.Release();
}
inline void ficc_Exch_BilateralOrder_Req::set_allocated_insert_time(std::string* insert_time) {
  if (insert_time != nullptr) {
    
  } else {
    
  }
  insert_time_.SetAllocated(insert_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (insert_time_.IsDefault()) {
    insert_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Req.insert_time)
}

// float bid_ytm = 24;
inline void ficc_Exch_BilateralOrder_Req::clear_bid_ytm() {
  bid_ytm_ = 0;
}
inline float ficc_Exch_BilateralOrder_Req::_internal_bid_ytm() const {
  return bid_ytm_;
}
inline float ficc_Exch_BilateralOrder_Req::bid_ytm() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.bid_ytm)
  return _internal_bid_ytm();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_bid_ytm(float value) {
  
  bid_ytm_ = value;
}
inline void ficc_Exch_BilateralOrder_Req::set_bid_ytm(float value) {
  _internal_set_bid_ytm(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.bid_ytm)
}

// float bid_strike_yeild = 25;
inline void ficc_Exch_BilateralOrder_Req::clear_bid_strike_yeild() {
  bid_strike_yeild_ = 0;
}
inline float ficc_Exch_BilateralOrder_Req::_internal_bid_strike_yeild() const {
  return bid_strike_yeild_;
}
inline float ficc_Exch_BilateralOrder_Req::bid_strike_yeild() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.bid_strike_yeild)
  return _internal_bid_strike_yeild();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_bid_strike_yeild(float value) {
  
  bid_strike_yeild_ = value;
}
inline void ficc_Exch_BilateralOrder_Req::set_bid_strike_yeild(float value) {
  _internal_set_bid_strike_yeild(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.bid_strike_yeild)
}

// uint64 bid_legsettl_type = 26;
inline void ficc_Exch_BilateralOrder_Req::clear_bid_legsettl_type() {
  bid_legsettl_type_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_BilateralOrder_Req::_internal_bid_legsettl_type() const {
  return bid_legsettl_type_;
}
inline uint64_t ficc_Exch_BilateralOrder_Req::bid_legsettl_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.bid_legsettl_type)
  return _internal_bid_legsettl_type();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_bid_legsettl_type(uint64_t value) {
  
  bid_legsettl_type_ = value;
}
inline void ficc_Exch_BilateralOrder_Req::set_bid_legsettl_type(uint64_t value) {
  _internal_set_bid_legsettl_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.bid_legsettl_type)
}

// uint64 bid_delivery_type = 27;
inline void ficc_Exch_BilateralOrder_Req::clear_bid_delivery_type() {
  bid_delivery_type_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_BilateralOrder_Req::_internal_bid_delivery_type() const {
  return bid_delivery_type_;
}
inline uint64_t ficc_Exch_BilateralOrder_Req::bid_delivery_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.bid_delivery_type)
  return _internal_bid_delivery_type();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_bid_delivery_type(uint64_t value) {
  
  bid_delivery_type_ = value;
}
inline void ficc_Exch_BilateralOrder_Req::set_bid_delivery_type(uint64_t value) {
  _internal_set_bid_delivery_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.bid_delivery_type)
}

// uint64 bid_clearing_method = 28;
inline void ficc_Exch_BilateralOrder_Req::clear_bid_clearing_method() {
  bid_clearing_method_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_BilateralOrder_Req::_internal_bid_clearing_method() const {
  return bid_clearing_method_;
}
inline uint64_t ficc_Exch_BilateralOrder_Req::bid_clearing_method() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.bid_clearing_method)
  return _internal_bid_clearing_method();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_bid_clearing_method(uint64_t value) {
  
  bid_clearing_method_ = value;
}
inline void ficc_Exch_BilateralOrder_Req::set_bid_clearing_method(uint64_t value) {
  _internal_set_bid_clearing_method(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.bid_clearing_method)
}

// float ask_ytm = 29;
inline void ficc_Exch_BilateralOrder_Req::clear_ask_ytm() {
  ask_ytm_ = 0;
}
inline float ficc_Exch_BilateralOrder_Req::_internal_ask_ytm() const {
  return ask_ytm_;
}
inline float ficc_Exch_BilateralOrder_Req::ask_ytm() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.ask_ytm)
  return _internal_ask_ytm();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_ask_ytm(float value) {
  
  ask_ytm_ = value;
}
inline void ficc_Exch_BilateralOrder_Req::set_ask_ytm(float value) {
  _internal_set_ask_ytm(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.ask_ytm)
}

// float ask_strike_yeild = 30;
inline void ficc_Exch_BilateralOrder_Req::clear_ask_strike_yeild() {
  ask_strike_yeild_ = 0;
}
inline float ficc_Exch_BilateralOrder_Req::_internal_ask_strike_yeild() const {
  return ask_strike_yeild_;
}
inline float ficc_Exch_BilateralOrder_Req::ask_strike_yeild() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.ask_strike_yeild)
  return _internal_ask_strike_yeild();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_ask_strike_yeild(float value) {
  
  ask_strike_yeild_ = value;
}
inline void ficc_Exch_BilateralOrder_Req::set_ask_strike_yeild(float value) {
  _internal_set_ask_strike_yeild(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.ask_strike_yeild)
}

// uint64 ask_legsettl_type = 31;
inline void ficc_Exch_BilateralOrder_Req::clear_ask_legsettl_type() {
  ask_legsettl_type_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_BilateralOrder_Req::_internal_ask_legsettl_type() const {
  return ask_legsettl_type_;
}
inline uint64_t ficc_Exch_BilateralOrder_Req::ask_legsettl_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.ask_legsettl_type)
  return _internal_ask_legsettl_type();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_ask_legsettl_type(uint64_t value) {
  
  ask_legsettl_type_ = value;
}
inline void ficc_Exch_BilateralOrder_Req::set_ask_legsettl_type(uint64_t value) {
  _internal_set_ask_legsettl_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.ask_legsettl_type)
}

// uint64 ask_delivery_type = 32;
inline void ficc_Exch_BilateralOrder_Req::clear_ask_delivery_type() {
  ask_delivery_type_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_BilateralOrder_Req::_internal_ask_delivery_type() const {
  return ask_delivery_type_;
}
inline uint64_t ficc_Exch_BilateralOrder_Req::ask_delivery_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.ask_delivery_type)
  return _internal_ask_delivery_type();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_ask_delivery_type(uint64_t value) {
  
  ask_delivery_type_ = value;
}
inline void ficc_Exch_BilateralOrder_Req::set_ask_delivery_type(uint64_t value) {
  _internal_set_ask_delivery_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.ask_delivery_type)
}

// uint64 ask_clearing_method = 33;
inline void ficc_Exch_BilateralOrder_Req::clear_ask_clearing_method() {
  ask_clearing_method_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_BilateralOrder_Req::_internal_ask_clearing_method() const {
  return ask_clearing_method_;
}
inline uint64_t ficc_Exch_BilateralOrder_Req::ask_clearing_method() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.ask_clearing_method)
  return _internal_ask_clearing_method();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_ask_clearing_method(uint64_t value) {
  
  ask_clearing_method_ = value;
}
inline void ficc_Exch_BilateralOrder_Req::set_ask_clearing_method(uint64_t value) {
  _internal_set_ask_clearing_method(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.ask_clearing_method)
}

// uint64 quote_type = 34;
inline void ficc_Exch_BilateralOrder_Req::clear_quote_type() {
  quote_type_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_BilateralOrder_Req::_internal_quote_type() const {
  return quote_type_;
}
inline uint64_t ficc_Exch_BilateralOrder_Req::quote_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.quote_type)
  return _internal_quote_type();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_quote_type(uint64_t value) {
  
  quote_type_ = value;
}
inline void ficc_Exch_BilateralOrder_Req::set_quote_type(uint64_t value) {
  _internal_set_quote_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.quote_type)
}

// uint64 max_floor = 35;
inline void ficc_Exch_BilateralOrder_Req::clear_max_floor() {
  max_floor_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_BilateralOrder_Req::_internal_max_floor() const {
  return max_floor_;
}
inline uint64_t ficc_Exch_BilateralOrder_Req::max_floor() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.max_floor)
  return _internal_max_floor();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_max_floor(uint64_t value) {
  
  max_floor_ = value;
}
inline void ficc_Exch_BilateralOrder_Req::set_max_floor(uint64_t value) {
  _internal_set_max_floor(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.max_floor)
}

// string valid_until_time = 36;
inline void ficc_Exch_BilateralOrder_Req::clear_valid_until_time() {
  valid_until_time_.ClearToEmpty();
}
inline const std::string& ficc_Exch_BilateralOrder_Req::valid_until_time() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.valid_until_time)
  return _internal_valid_until_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_BilateralOrder_Req::set_valid_until_time(ArgT0&& arg0, ArgT... args) {
 
 valid_until_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.valid_until_time)
}
inline std::string* ficc_Exch_BilateralOrder_Req::mutable_valid_until_time() {
  std::string* _s = _internal_mutable_valid_until_time();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_BilateralOrder_Req.valid_until_time)
  return _s;
}
inline const std::string& ficc_Exch_BilateralOrder_Req::_internal_valid_until_time() const {
  return valid_until_time_.Get();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_valid_until_time(const std::string& value) {
  
  valid_until_time_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::_internal_mutable_valid_until_time() {
  
  return valid_until_time_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::release_valid_until_time() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_BilateralOrder_Req.valid_until_time)
  return valid_until_time_.Release();
}
inline void ficc_Exch_BilateralOrder_Req::set_allocated_valid_until_time(std::string* valid_until_time) {
  if (valid_until_time != nullptr) {
    
  } else {
    
  }
  valid_until_time_.SetAllocated(valid_until_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (valid_until_time_.IsDefault()) {
    valid_until_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Req.valid_until_time)
}

// string client_ref_id = 37;
inline void ficc_Exch_BilateralOrder_Req::clear_client_ref_id() {
  client_ref_id_.ClearToEmpty();
}
inline const std::string& ficc_Exch_BilateralOrder_Req::client_ref_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.client_ref_id)
  return _internal_client_ref_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_BilateralOrder_Req::set_client_ref_id(ArgT0&& arg0, ArgT... args) {
 
 client_ref_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.client_ref_id)
}
inline std::string* ficc_Exch_BilateralOrder_Req::mutable_client_ref_id() {
  std::string* _s = _internal_mutable_client_ref_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_BilateralOrder_Req.client_ref_id)
  return _s;
}
inline const std::string& ficc_Exch_BilateralOrder_Req::_internal_client_ref_id() const {
  return client_ref_id_.Get();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_client_ref_id(const std::string& value) {
  
  client_ref_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::_internal_mutable_client_ref_id() {
  
  return client_ref_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::release_client_ref_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_BilateralOrder_Req.client_ref_id)
  return client_ref_id_.Release();
}
inline void ficc_Exch_BilateralOrder_Req::set_allocated_client_ref_id(std::string* client_ref_id) {
  if (client_ref_id != nullptr) {
    
  } else {
    
  }
  client_ref_id_.SetAllocated(client_ref_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_ref_id_.IsDefault()) {
    client_ref_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Req.client_ref_id)
}

// uint64 routing_type = 38;
inline void ficc_Exch_BilateralOrder_Req::clear_routing_type() {
  routing_type_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_BilateralOrder_Req::_internal_routing_type() const {
  return routing_type_;
}
inline uint64_t ficc_Exch_BilateralOrder_Req::routing_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.routing_type)
  return _internal_routing_type();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_routing_type(uint64_t value) {
  
  routing_type_ = value;
}
inline void ficc_Exch_BilateralOrder_Req::set_routing_type(uint64_t value) {
  _internal_set_routing_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.routing_type)
}

// uint64 market_indicator = 39;
inline void ficc_Exch_BilateralOrder_Req::clear_market_indicator() {
  market_indicator_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_BilateralOrder_Req::_internal_market_indicator() const {
  return market_indicator_;
}
inline uint64_t ficc_Exch_BilateralOrder_Req::market_indicator() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.market_indicator)
  return _internal_market_indicator();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_market_indicator(uint64_t value) {
  
  market_indicator_ = value;
}
inline void ficc_Exch_BilateralOrder_Req::set_market_indicator(uint64_t value) {
  _internal_set_market_indicator(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.market_indicator)
}

// string order_source = 40;
inline void ficc_Exch_BilateralOrder_Req::clear_order_source() {
  order_source_.ClearToEmpty();
}
inline const std::string& ficc_Exch_BilateralOrder_Req::order_source() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.order_source)
  return _internal_order_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_BilateralOrder_Req::set_order_source(ArgT0&& arg0, ArgT... args) {
 
 order_source_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.order_source)
}
inline std::string* ficc_Exch_BilateralOrder_Req::mutable_order_source() {
  std::string* _s = _internal_mutable_order_source();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_BilateralOrder_Req.order_source)
  return _s;
}
inline const std::string& ficc_Exch_BilateralOrder_Req::_internal_order_source() const {
  return order_source_.Get();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_order_source(const std::string& value) {
  
  order_source_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::_internal_mutable_order_source() {
  
  return order_source_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::release_order_source() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_BilateralOrder_Req.order_source)
  return order_source_.Release();
}
inline void ficc_Exch_BilateralOrder_Req::set_allocated_order_source(std::string* order_source) {
  if (order_source != nullptr) {
    
  } else {
    
  }
  order_source_.SetAllocated(order_source, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_source_.IsDefault()) {
    order_source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Req.order_source)
}

// string secu_type_id = 41;
inline void ficc_Exch_BilateralOrder_Req::clear_secu_type_id() {
  secu_type_id_.ClearToEmpty();
}
inline const std::string& ficc_Exch_BilateralOrder_Req::secu_type_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.secu_type_id)
  return _internal_secu_type_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_BilateralOrder_Req::set_secu_type_id(ArgT0&& arg0, ArgT... args) {
 
 secu_type_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.secu_type_id)
}
inline std::string* ficc_Exch_BilateralOrder_Req::mutable_secu_type_id() {
  std::string* _s = _internal_mutable_secu_type_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_BilateralOrder_Req.secu_type_id)
  return _s;
}
inline const std::string& ficc_Exch_BilateralOrder_Req::_internal_secu_type_id() const {
  return secu_type_id_.Get();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_secu_type_id(const std::string& value) {
  
  secu_type_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::_internal_mutable_secu_type_id() {
  
  return secu_type_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::release_secu_type_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_BilateralOrder_Req.secu_type_id)
  return secu_type_id_.Release();
}
inline void ficc_Exch_BilateralOrder_Req::set_allocated_secu_type_id(std::string* secu_type_id) {
  if (secu_type_id != nullptr) {
    
  } else {
    
  }
  secu_type_id_.SetAllocated(secu_type_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secu_type_id_.IsDefault()) {
    secu_type_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Req.secu_type_id)
}

// string maturity = 42;
inline void ficc_Exch_BilateralOrder_Req::clear_maturity() {
  maturity_.ClearToEmpty();
}
inline const std::string& ficc_Exch_BilateralOrder_Req::maturity() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.maturity)
  return _internal_maturity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_BilateralOrder_Req::set_maturity(ArgT0&& arg0, ArgT... args) {
 
 maturity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.maturity)
}
inline std::string* ficc_Exch_BilateralOrder_Req::mutable_maturity() {
  std::string* _s = _internal_mutable_maturity();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_BilateralOrder_Req.maturity)
  return _s;
}
inline const std::string& ficc_Exch_BilateralOrder_Req::_internal_maturity() const {
  return maturity_.Get();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_maturity(const std::string& value) {
  
  maturity_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::_internal_mutable_maturity() {
  
  return maturity_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::release_maturity() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_BilateralOrder_Req.maturity)
  return maturity_.Release();
}
inline void ficc_Exch_BilateralOrder_Req::set_allocated_maturity(std::string* maturity) {
  if (maturity != nullptr) {
    
  } else {
    
  }
  maturity_.SetAllocated(maturity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (maturity_.IsDefault()) {
    maturity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Req.maturity)
}

// string issuer_party_id = 43;
inline void ficc_Exch_BilateralOrder_Req::clear_issuer_party_id() {
  issuer_party_id_.ClearToEmpty();
}
inline const std::string& ficc_Exch_BilateralOrder_Req::issuer_party_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Req.issuer_party_id)
  return _internal_issuer_party_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_BilateralOrder_Req::set_issuer_party_id(ArgT0&& arg0, ArgT... args) {
 
 issuer_party_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Req.issuer_party_id)
}
inline std::string* ficc_Exch_BilateralOrder_Req::mutable_issuer_party_id() {
  std::string* _s = _internal_mutable_issuer_party_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_BilateralOrder_Req.issuer_party_id)
  return _s;
}
inline const std::string& ficc_Exch_BilateralOrder_Req::_internal_issuer_party_id() const {
  return issuer_party_id_.Get();
}
inline void ficc_Exch_BilateralOrder_Req::_internal_set_issuer_party_id(const std::string& value) {
  
  issuer_party_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::_internal_mutable_issuer_party_id() {
  
  return issuer_party_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Req::release_issuer_party_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_BilateralOrder_Req.issuer_party_id)
  return issuer_party_id_.Release();
}
inline void ficc_Exch_BilateralOrder_Req::set_allocated_issuer_party_id(std::string* issuer_party_id) {
  if (issuer_party_id != nullptr) {
    
  } else {
    
  }
  issuer_party_id_.SetAllocated(issuer_party_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (issuer_party_id_.IsDefault()) {
    issuer_party_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Req.issuer_party_id)
}

// -------------------------------------------------------------------

// ficc_Exch_BilateralOrder_Rtn

// .message_head.head head = 1;
inline bool ficc_Exch_BilateralOrder_Rtn::_internal_has_head() const {
  return this != internal_default_instance() && head_ != nullptr;
}
inline bool ficc_Exch_BilateralOrder_Rtn::has_head() const {
  return _internal_has_head();
}
inline const ::message_head::head& ficc_Exch_BilateralOrder_Rtn::_internal_head() const {
  const ::message_head::head* p = head_;
  return p != nullptr ? *p : reinterpret_cast<const ::message_head::head&>(
      ::message_head::_head_default_instance_);
}
inline const ::message_head::head& ficc_Exch_BilateralOrder_Rtn::head() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Rtn.head)
  return _internal_head();
}
inline void ficc_Exch_BilateralOrder_Rtn::unsafe_arena_set_allocated_head(
    ::message_head::head* head) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Rtn.head)
}
inline ::message_head::head* ficc_Exch_BilateralOrder_Rtn::release_head() {
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message_head::head* ficc_Exch_BilateralOrder_Rtn::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_BilateralOrder_Rtn.head)
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
  return temp;
}
inline ::message_head::head* ficc_Exch_BilateralOrder_Rtn::_internal_mutable_head() {
  
  if (head_ == nullptr) {
    auto* p = CreateMaybeMessage<::message_head::head>(GetArenaForAllocation());
    head_ = p;
  }
  return head_;
}
inline ::message_head::head* ficc_Exch_BilateralOrder_Rtn::mutable_head() {
  ::message_head::head* _msg = _internal_mutable_head();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_BilateralOrder_Rtn.head)
  return _msg;
}
inline void ficc_Exch_BilateralOrder_Rtn::set_allocated_head(::message_head::head* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head));
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Rtn.head)
}

// string order_status = 2;
inline void ficc_Exch_BilateralOrder_Rtn::clear_order_status() {
  order_status_.ClearToEmpty();
}
inline const std::string& ficc_Exch_BilateralOrder_Rtn::order_status() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Rtn.order_status)
  return _internal_order_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_BilateralOrder_Rtn::set_order_status(ArgT0&& arg0, ArgT... args) {
 
 order_status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Rtn.order_status)
}
inline std::string* ficc_Exch_BilateralOrder_Rtn::mutable_order_status() {
  std::string* _s = _internal_mutable_order_status();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_BilateralOrder_Rtn.order_status)
  return _s;
}
inline const std::string& ficc_Exch_BilateralOrder_Rtn::_internal_order_status() const {
  return order_status_.Get();
}
inline void ficc_Exch_BilateralOrder_Rtn::_internal_set_order_status(const std::string& value) {
  
  order_status_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Rtn::_internal_mutable_order_status() {
  
  return order_status_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Rtn::release_order_status() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_BilateralOrder_Rtn.order_status)
  return order_status_.Release();
}
inline void ficc_Exch_BilateralOrder_Rtn::set_allocated_order_status(std::string* order_status) {
  if (order_status != nullptr) {
    
  } else {
    
  }
  order_status_.SetAllocated(order_status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_status_.IsDefault()) {
    order_status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Rtn.order_status)
}

// string acction_flag = 3;
inline void ficc_Exch_BilateralOrder_Rtn::clear_acction_flag() {
  acction_flag_.ClearToEmpty();
}
inline const std::string& ficc_Exch_BilateralOrder_Rtn::acction_flag() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Rtn.acction_flag)
  return _internal_acction_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_BilateralOrder_Rtn::set_acction_flag(ArgT0&& arg0, ArgT... args) {
 
 acction_flag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Rtn.acction_flag)
}
inline std::string* ficc_Exch_BilateralOrder_Rtn::mutable_acction_flag() {
  std::string* _s = _internal_mutable_acction_flag();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_BilateralOrder_Rtn.acction_flag)
  return _s;
}
inline const std::string& ficc_Exch_BilateralOrder_Rtn::_internal_acction_flag() const {
  return acction_flag_.Get();
}
inline void ficc_Exch_BilateralOrder_Rtn::_internal_set_acction_flag(const std::string& value) {
  
  acction_flag_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Rtn::_internal_mutable_acction_flag() {
  
  return acction_flag_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Rtn::release_acction_flag() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_BilateralOrder_Rtn.acction_flag)
  return acction_flag_.Release();
}
inline void ficc_Exch_BilateralOrder_Rtn::set_allocated_acction_flag(std::string* acction_flag) {
  if (acction_flag != nullptr) {
    
  } else {
    
  }
  acction_flag_.SetAllocated(acction_flag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (acction_flag_.IsDefault()) {
    acction_flag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Rtn.acction_flag)
}

// string valid_until_time = 4;
inline void ficc_Exch_BilateralOrder_Rtn::clear_valid_until_time() {
  valid_until_time_.ClearToEmpty();
}
inline const std::string& ficc_Exch_BilateralOrder_Rtn::valid_until_time() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Rtn.valid_until_time)
  return _internal_valid_until_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_BilateralOrder_Rtn::set_valid_until_time(ArgT0&& arg0, ArgT... args) {
 
 valid_until_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Rtn.valid_until_time)
}
inline std::string* ficc_Exch_BilateralOrder_Rtn::mutable_valid_until_time() {
  std::string* _s = _internal_mutable_valid_until_time();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_BilateralOrder_Rtn.valid_until_time)
  return _s;
}
inline const std::string& ficc_Exch_BilateralOrder_Rtn::_internal_valid_until_time() const {
  return valid_until_time_.Get();
}
inline void ficc_Exch_BilateralOrder_Rtn::_internal_set_valid_until_time(const std::string& value) {
  
  valid_until_time_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Rtn::_internal_mutable_valid_until_time() {
  
  return valid_until_time_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Rtn::release_valid_until_time() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_BilateralOrder_Rtn.valid_until_time)
  return valid_until_time_.Release();
}
inline void ficc_Exch_BilateralOrder_Rtn::set_allocated_valid_until_time(std::string* valid_until_time) {
  if (valid_until_time != nullptr) {
    
  } else {
    
  }
  valid_until_time_.SetAllocated(valid_until_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (valid_until_time_.IsDefault()) {
    valid_until_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Rtn.valid_until_time)
}

// string seat_order_id = 5;
inline void ficc_Exch_BilateralOrder_Rtn::clear_seat_order_id() {
  seat_order_id_.ClearToEmpty();
}
inline const std::string& ficc_Exch_BilateralOrder_Rtn::seat_order_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Rtn.seat_order_id)
  return _internal_seat_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_BilateralOrder_Rtn::set_seat_order_id(ArgT0&& arg0, ArgT... args) {
 
 seat_order_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Rtn.seat_order_id)
}
inline std::string* ficc_Exch_BilateralOrder_Rtn::mutable_seat_order_id() {
  std::string* _s = _internal_mutable_seat_order_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_BilateralOrder_Rtn.seat_order_id)
  return _s;
}
inline const std::string& ficc_Exch_BilateralOrder_Rtn::_internal_seat_order_id() const {
  return seat_order_id_.Get();
}
inline void ficc_Exch_BilateralOrder_Rtn::_internal_set_seat_order_id(const std::string& value) {
  
  seat_order_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Rtn::_internal_mutable_seat_order_id() {
  
  return seat_order_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Rtn::release_seat_order_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_BilateralOrder_Rtn.seat_order_id)
  return seat_order_id_.Release();
}
inline void ficc_Exch_BilateralOrder_Rtn::set_allocated_seat_order_id(std::string* seat_order_id) {
  if (seat_order_id != nullptr) {
    
  } else {
    
  }
  seat_order_id_.SetAllocated(seat_order_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (seat_order_id_.IsDefault()) {
    seat_order_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Rtn.seat_order_id)
}

// string order_sys_id = 6;
inline void ficc_Exch_BilateralOrder_Rtn::clear_order_sys_id() {
  order_sys_id_.ClearToEmpty();
}
inline const std::string& ficc_Exch_BilateralOrder_Rtn::order_sys_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Rtn.order_sys_id)
  return _internal_order_sys_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_BilateralOrder_Rtn::set_order_sys_id(ArgT0&& arg0, ArgT... args) {
 
 order_sys_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Rtn.order_sys_id)
}
inline std::string* ficc_Exch_BilateralOrder_Rtn::mutable_order_sys_id() {
  std::string* _s = _internal_mutable_order_sys_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_BilateralOrder_Rtn.order_sys_id)
  return _s;
}
inline const std::string& ficc_Exch_BilateralOrder_Rtn::_internal_order_sys_id() const {
  return order_sys_id_.Get();
}
inline void ficc_Exch_BilateralOrder_Rtn::_internal_set_order_sys_id(const std::string& value) {
  
  order_sys_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Rtn::_internal_mutable_order_sys_id() {
  
  return order_sys_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Rtn::release_order_sys_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_BilateralOrder_Rtn.order_sys_id)
  return order_sys_id_.Release();
}
inline void ficc_Exch_BilateralOrder_Rtn::set_allocated_order_sys_id(std::string* order_sys_id) {
  if (order_sys_id != nullptr) {
    
  } else {
    
  }
  order_sys_id_.SetAllocated(order_sys_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_sys_id_.IsDefault()) {
    order_sys_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Rtn.order_sys_id)
}

// string insert_date = 7;
inline void ficc_Exch_BilateralOrder_Rtn::clear_insert_date() {
  insert_date_.ClearToEmpty();
}
inline const std::string& ficc_Exch_BilateralOrder_Rtn::insert_date() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Rtn.insert_date)
  return _internal_insert_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_BilateralOrder_Rtn::set_insert_date(ArgT0&& arg0, ArgT... args) {
 
 insert_date_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Rtn.insert_date)
}
inline std::string* ficc_Exch_BilateralOrder_Rtn::mutable_insert_date() {
  std::string* _s = _internal_mutable_insert_date();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_BilateralOrder_Rtn.insert_date)
  return _s;
}
inline const std::string& ficc_Exch_BilateralOrder_Rtn::_internal_insert_date() const {
  return insert_date_.Get();
}
inline void ficc_Exch_BilateralOrder_Rtn::_internal_set_insert_date(const std::string& value) {
  
  insert_date_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Rtn::_internal_mutable_insert_date() {
  
  return insert_date_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Rtn::release_insert_date() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_BilateralOrder_Rtn.insert_date)
  return insert_date_.Release();
}
inline void ficc_Exch_BilateralOrder_Rtn::set_allocated_insert_date(std::string* insert_date) {
  if (insert_date != nullptr) {
    
  } else {
    
  }
  insert_date_.SetAllocated(insert_date, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (insert_date_.IsDefault()) {
    insert_date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Rtn.insert_date)
}

// string update_time = 8;
inline void ficc_Exch_BilateralOrder_Rtn::clear_update_time() {
  update_time_.ClearToEmpty();
}
inline const std::string& ficc_Exch_BilateralOrder_Rtn::update_time() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Rtn.update_time)
  return _internal_update_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_BilateralOrder_Rtn::set_update_time(ArgT0&& arg0, ArgT... args) {
 
 update_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Rtn.update_time)
}
inline std::string* ficc_Exch_BilateralOrder_Rtn::mutable_update_time() {
  std::string* _s = _internal_mutable_update_time();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_BilateralOrder_Rtn.update_time)
  return _s;
}
inline const std::string& ficc_Exch_BilateralOrder_Rtn::_internal_update_time() const {
  return update_time_.Get();
}
inline void ficc_Exch_BilateralOrder_Rtn::_internal_set_update_time(const std::string& value) {
  
  update_time_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Rtn::_internal_mutable_update_time() {
  
  return update_time_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Rtn::release_update_time() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_BilateralOrder_Rtn.update_time)
  return update_time_.Release();
}
inline void ficc_Exch_BilateralOrder_Rtn::set_allocated_update_time(std::string* update_time) {
  if (update_time != nullptr) {
    
  } else {
    
  }
  update_time_.SetAllocated(update_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (update_time_.IsDefault()) {
    update_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Rtn.update_time)
}

// string secu_code = 9;
inline void ficc_Exch_BilateralOrder_Rtn::clear_secu_code() {
  secu_code_.ClearToEmpty();
}
inline const std::string& ficc_Exch_BilateralOrder_Rtn::secu_code() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Rtn.secu_code)
  return _internal_secu_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_BilateralOrder_Rtn::set_secu_code(ArgT0&& arg0, ArgT... args) {
 
 secu_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Rtn.secu_code)
}
inline std::string* ficc_Exch_BilateralOrder_Rtn::mutable_secu_code() {
  std::string* _s = _internal_mutable_secu_code();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_BilateralOrder_Rtn.secu_code)
  return _s;
}
inline const std::string& ficc_Exch_BilateralOrder_Rtn::_internal_secu_code() const {
  return secu_code_.Get();
}
inline void ficc_Exch_BilateralOrder_Rtn::_internal_set_secu_code(const std::string& value) {
  
  secu_code_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Rtn::_internal_mutable_secu_code() {
  
  return secu_code_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Rtn::release_secu_code() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_BilateralOrder_Rtn.secu_code)
  return secu_code_.Release();
}
inline void ficc_Exch_BilateralOrder_Rtn::set_allocated_secu_code(std::string* secu_code) {
  if (secu_code != nullptr) {
    
  } else {
    
  }
  secu_code_.SetAllocated(secu_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secu_code_.IsDefault()) {
    secu_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Rtn.secu_code)
}

// uint64 max_floor = 10;
inline void ficc_Exch_BilateralOrder_Rtn::clear_max_floor() {
  max_floor_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_BilateralOrder_Rtn::_internal_max_floor() const {
  return max_floor_;
}
inline uint64_t ficc_Exch_BilateralOrder_Rtn::max_floor() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Rtn.max_floor)
  return _internal_max_floor();
}
inline void ficc_Exch_BilateralOrder_Rtn::_internal_set_max_floor(uint64_t value) {
  
  max_floor_ = value;
}
inline void ficc_Exch_BilateralOrder_Rtn::set_max_floor(uint64_t value) {
  _internal_set_max_floor(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Rtn.max_floor)
}

// uint64 bid_vol = 11;
inline void ficc_Exch_BilateralOrder_Rtn::clear_bid_vol() {
  bid_vol_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_BilateralOrder_Rtn::_internal_bid_vol() const {
  return bid_vol_;
}
inline uint64_t ficc_Exch_BilateralOrder_Rtn::bid_vol() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Rtn.bid_vol)
  return _internal_bid_vol();
}
inline void ficc_Exch_BilateralOrder_Rtn::_internal_set_bid_vol(uint64_t value) {
  
  bid_vol_ = value;
}
inline void ficc_Exch_BilateralOrder_Rtn::set_bid_vol(uint64_t value) {
  _internal_set_bid_vol(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Rtn.bid_vol)
}

// uint64 bid_vol_traded = 12;
inline void ficc_Exch_BilateralOrder_Rtn::clear_bid_vol_traded() {
  bid_vol_traded_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_BilateralOrder_Rtn::_internal_bid_vol_traded() const {
  return bid_vol_traded_;
}
inline uint64_t ficc_Exch_BilateralOrder_Rtn::bid_vol_traded() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Rtn.bid_vol_traded)
  return _internal_bid_vol_traded();
}
inline void ficc_Exch_BilateralOrder_Rtn::_internal_set_bid_vol_traded(uint64_t value) {
  
  bid_vol_traded_ = value;
}
inline void ficc_Exch_BilateralOrder_Rtn::set_bid_vol_traded(uint64_t value) {
  _internal_set_bid_vol_traded(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Rtn.bid_vol_traded)
}

// uint64 bid_vol_total = 13;
inline void ficc_Exch_BilateralOrder_Rtn::clear_bid_vol_total() {
  bid_vol_total_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_BilateralOrder_Rtn::_internal_bid_vol_total() const {
  return bid_vol_total_;
}
inline uint64_t ficc_Exch_BilateralOrder_Rtn::bid_vol_total() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Rtn.bid_vol_total)
  return _internal_bid_vol_total();
}
inline void ficc_Exch_BilateralOrder_Rtn::_internal_set_bid_vol_total(uint64_t value) {
  
  bid_vol_total_ = value;
}
inline void ficc_Exch_BilateralOrder_Rtn::set_bid_vol_total(uint64_t value) {
  _internal_set_bid_vol_total(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Rtn.bid_vol_total)
}

// uint64 ask_vol = 14;
inline void ficc_Exch_BilateralOrder_Rtn::clear_ask_vol() {
  ask_vol_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_BilateralOrder_Rtn::_internal_ask_vol() const {
  return ask_vol_;
}
inline uint64_t ficc_Exch_BilateralOrder_Rtn::ask_vol() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Rtn.ask_vol)
  return _internal_ask_vol();
}
inline void ficc_Exch_BilateralOrder_Rtn::_internal_set_ask_vol(uint64_t value) {
  
  ask_vol_ = value;
}
inline void ficc_Exch_BilateralOrder_Rtn::set_ask_vol(uint64_t value) {
  _internal_set_ask_vol(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Rtn.ask_vol)
}

// uint64 ask_vol_traded = 15;
inline void ficc_Exch_BilateralOrder_Rtn::clear_ask_vol_traded() {
  ask_vol_traded_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_BilateralOrder_Rtn::_internal_ask_vol_traded() const {
  return ask_vol_traded_;
}
inline uint64_t ficc_Exch_BilateralOrder_Rtn::ask_vol_traded() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Rtn.ask_vol_traded)
  return _internal_ask_vol_traded();
}
inline void ficc_Exch_BilateralOrder_Rtn::_internal_set_ask_vol_traded(uint64_t value) {
  
  ask_vol_traded_ = value;
}
inline void ficc_Exch_BilateralOrder_Rtn::set_ask_vol_traded(uint64_t value) {
  _internal_set_ask_vol_traded(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Rtn.ask_vol_traded)
}

// uint64 ask_vol_total = 16;
inline void ficc_Exch_BilateralOrder_Rtn::clear_ask_vol_total() {
  ask_vol_total_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_BilateralOrder_Rtn::_internal_ask_vol_total() const {
  return ask_vol_total_;
}
inline uint64_t ficc_Exch_BilateralOrder_Rtn::ask_vol_total() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Rtn.ask_vol_total)
  return _internal_ask_vol_total();
}
inline void ficc_Exch_BilateralOrder_Rtn::_internal_set_ask_vol_total(uint64_t value) {
  
  ask_vol_total_ = value;
}
inline void ficc_Exch_BilateralOrder_Rtn::set_ask_vol_total(uint64_t value) {
  _internal_set_ask_vol_total(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Rtn.ask_vol_total)
}

// float bid_price = 17;
inline void ficc_Exch_BilateralOrder_Rtn::clear_bid_price() {
  bid_price_ = 0;
}
inline float ficc_Exch_BilateralOrder_Rtn::_internal_bid_price() const {
  return bid_price_;
}
inline float ficc_Exch_BilateralOrder_Rtn::bid_price() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Rtn.bid_price)
  return _internal_bid_price();
}
inline void ficc_Exch_BilateralOrder_Rtn::_internal_set_bid_price(float value) {
  
  bid_price_ = value;
}
inline void ficc_Exch_BilateralOrder_Rtn::set_bid_price(float value) {
  _internal_set_bid_price(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Rtn.bid_price)
}

// float ask_price = 18;
inline void ficc_Exch_BilateralOrder_Rtn::clear_ask_price() {
  ask_price_ = 0;
}
inline float ficc_Exch_BilateralOrder_Rtn::_internal_ask_price() const {
  return ask_price_;
}
inline float ficc_Exch_BilateralOrder_Rtn::ask_price() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Rtn.ask_price)
  return _internal_ask_price();
}
inline void ficc_Exch_BilateralOrder_Rtn::_internal_set_ask_price(float value) {
  
  ask_price_ = value;
}
inline void ficc_Exch_BilateralOrder_Rtn::set_ask_price(float value) {
  _internal_set_ask_price(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Rtn.ask_price)
}

// uint64 bid_legsettl_type = 19;
inline void ficc_Exch_BilateralOrder_Rtn::clear_bid_legsettl_type() {
  bid_legsettl_type_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_BilateralOrder_Rtn::_internal_bid_legsettl_type() const {
  return bid_legsettl_type_;
}
inline uint64_t ficc_Exch_BilateralOrder_Rtn::bid_legsettl_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Rtn.bid_legsettl_type)
  return _internal_bid_legsettl_type();
}
inline void ficc_Exch_BilateralOrder_Rtn::_internal_set_bid_legsettl_type(uint64_t value) {
  
  bid_legsettl_type_ = value;
}
inline void ficc_Exch_BilateralOrder_Rtn::set_bid_legsettl_type(uint64_t value) {
  _internal_set_bid_legsettl_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Rtn.bid_legsettl_type)
}

// uint64 bid_delivery_type = 20;
inline void ficc_Exch_BilateralOrder_Rtn::clear_bid_delivery_type() {
  bid_delivery_type_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_BilateralOrder_Rtn::_internal_bid_delivery_type() const {
  return bid_delivery_type_;
}
inline uint64_t ficc_Exch_BilateralOrder_Rtn::bid_delivery_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Rtn.bid_delivery_type)
  return _internal_bid_delivery_type();
}
inline void ficc_Exch_BilateralOrder_Rtn::_internal_set_bid_delivery_type(uint64_t value) {
  
  bid_delivery_type_ = value;
}
inline void ficc_Exch_BilateralOrder_Rtn::set_bid_delivery_type(uint64_t value) {
  _internal_set_bid_delivery_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Rtn.bid_delivery_type)
}

// uint64 bid_clearing_method = 21;
inline void ficc_Exch_BilateralOrder_Rtn::clear_bid_clearing_method() {
  bid_clearing_method_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_BilateralOrder_Rtn::_internal_bid_clearing_method() const {
  return bid_clearing_method_;
}
inline uint64_t ficc_Exch_BilateralOrder_Rtn::bid_clearing_method() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Rtn.bid_clearing_method)
  return _internal_bid_clearing_method();
}
inline void ficc_Exch_BilateralOrder_Rtn::_internal_set_bid_clearing_method(uint64_t value) {
  
  bid_clearing_method_ = value;
}
inline void ficc_Exch_BilateralOrder_Rtn::set_bid_clearing_method(uint64_t value) {
  _internal_set_bid_clearing_method(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Rtn.bid_clearing_method)
}

// float bid_ytm = 22;
inline void ficc_Exch_BilateralOrder_Rtn::clear_bid_ytm() {
  bid_ytm_ = 0;
}
inline float ficc_Exch_BilateralOrder_Rtn::_internal_bid_ytm() const {
  return bid_ytm_;
}
inline float ficc_Exch_BilateralOrder_Rtn::bid_ytm() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Rtn.bid_ytm)
  return _internal_bid_ytm();
}
inline void ficc_Exch_BilateralOrder_Rtn::_internal_set_bid_ytm(float value) {
  
  bid_ytm_ = value;
}
inline void ficc_Exch_BilateralOrder_Rtn::set_bid_ytm(float value) {
  _internal_set_bid_ytm(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Rtn.bid_ytm)
}

// float bid_strike_yeild = 23;
inline void ficc_Exch_BilateralOrder_Rtn::clear_bid_strike_yeild() {
  bid_strike_yeild_ = 0;
}
inline float ficc_Exch_BilateralOrder_Rtn::_internal_bid_strike_yeild() const {
  return bid_strike_yeild_;
}
inline float ficc_Exch_BilateralOrder_Rtn::bid_strike_yeild() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Rtn.bid_strike_yeild)
  return _internal_bid_strike_yeild();
}
inline void ficc_Exch_BilateralOrder_Rtn::_internal_set_bid_strike_yeild(float value) {
  
  bid_strike_yeild_ = value;
}
inline void ficc_Exch_BilateralOrder_Rtn::set_bid_strike_yeild(float value) {
  _internal_set_bid_strike_yeild(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Rtn.bid_strike_yeild)
}

// uint64 ask_legsettl_type = 24;
inline void ficc_Exch_BilateralOrder_Rtn::clear_ask_legsettl_type() {
  ask_legsettl_type_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_BilateralOrder_Rtn::_internal_ask_legsettl_type() const {
  return ask_legsettl_type_;
}
inline uint64_t ficc_Exch_BilateralOrder_Rtn::ask_legsettl_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Rtn.ask_legsettl_type)
  return _internal_ask_legsettl_type();
}
inline void ficc_Exch_BilateralOrder_Rtn::_internal_set_ask_legsettl_type(uint64_t value) {
  
  ask_legsettl_type_ = value;
}
inline void ficc_Exch_BilateralOrder_Rtn::set_ask_legsettl_type(uint64_t value) {
  _internal_set_ask_legsettl_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Rtn.ask_legsettl_type)
}

// uint64 ask_delivery_type = 25;
inline void ficc_Exch_BilateralOrder_Rtn::clear_ask_delivery_type() {
  ask_delivery_type_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_BilateralOrder_Rtn::_internal_ask_delivery_type() const {
  return ask_delivery_type_;
}
inline uint64_t ficc_Exch_BilateralOrder_Rtn::ask_delivery_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Rtn.ask_delivery_type)
  return _internal_ask_delivery_type();
}
inline void ficc_Exch_BilateralOrder_Rtn::_internal_set_ask_delivery_type(uint64_t value) {
  
  ask_delivery_type_ = value;
}
inline void ficc_Exch_BilateralOrder_Rtn::set_ask_delivery_type(uint64_t value) {
  _internal_set_ask_delivery_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Rtn.ask_delivery_type)
}

// uint64 ask_clearing_method = 26;
inline void ficc_Exch_BilateralOrder_Rtn::clear_ask_clearing_method() {
  ask_clearing_method_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_BilateralOrder_Rtn::_internal_ask_clearing_method() const {
  return ask_clearing_method_;
}
inline uint64_t ficc_Exch_BilateralOrder_Rtn::ask_clearing_method() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Rtn.ask_clearing_method)
  return _internal_ask_clearing_method();
}
inline void ficc_Exch_BilateralOrder_Rtn::_internal_set_ask_clearing_method(uint64_t value) {
  
  ask_clearing_method_ = value;
}
inline void ficc_Exch_BilateralOrder_Rtn::set_ask_clearing_method(uint64_t value) {
  _internal_set_ask_clearing_method(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Rtn.ask_clearing_method)
}

// float ask_ytm = 27;
inline void ficc_Exch_BilateralOrder_Rtn::clear_ask_ytm() {
  ask_ytm_ = 0;
}
inline float ficc_Exch_BilateralOrder_Rtn::_internal_ask_ytm() const {
  return ask_ytm_;
}
inline float ficc_Exch_BilateralOrder_Rtn::ask_ytm() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Rtn.ask_ytm)
  return _internal_ask_ytm();
}
inline void ficc_Exch_BilateralOrder_Rtn::_internal_set_ask_ytm(float value) {
  
  ask_ytm_ = value;
}
inline void ficc_Exch_BilateralOrder_Rtn::set_ask_ytm(float value) {
  _internal_set_ask_ytm(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Rtn.ask_ytm)
}

// float ask_strike_yeild = 28;
inline void ficc_Exch_BilateralOrder_Rtn::clear_ask_strike_yeild() {
  ask_strike_yeild_ = 0;
}
inline float ficc_Exch_BilateralOrder_Rtn::_internal_ask_strike_yeild() const {
  return ask_strike_yeild_;
}
inline float ficc_Exch_BilateralOrder_Rtn::ask_strike_yeild() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Rtn.ask_strike_yeild)
  return _internal_ask_strike_yeild();
}
inline void ficc_Exch_BilateralOrder_Rtn::_internal_set_ask_strike_yeild(float value) {
  
  ask_strike_yeild_ = value;
}
inline void ficc_Exch_BilateralOrder_Rtn::set_ask_strike_yeild(float value) {
  _internal_set_ask_strike_yeild(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Rtn.ask_strike_yeild)
}

// string fund_acct = 29;
inline void ficc_Exch_BilateralOrder_Rtn::clear_fund_acct() {
  fund_acct_.ClearToEmpty();
}
inline const std::string& ficc_Exch_BilateralOrder_Rtn::fund_acct() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Rtn.fund_acct)
  return _internal_fund_acct();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_BilateralOrder_Rtn::set_fund_acct(ArgT0&& arg0, ArgT... args) {
 
 fund_acct_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Rtn.fund_acct)
}
inline std::string* ficc_Exch_BilateralOrder_Rtn::mutable_fund_acct() {
  std::string* _s = _internal_mutable_fund_acct();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_BilateralOrder_Rtn.fund_acct)
  return _s;
}
inline const std::string& ficc_Exch_BilateralOrder_Rtn::_internal_fund_acct() const {
  return fund_acct_.Get();
}
inline void ficc_Exch_BilateralOrder_Rtn::_internal_set_fund_acct(const std::string& value) {
  
  fund_acct_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Rtn::_internal_mutable_fund_acct() {
  
  return fund_acct_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Rtn::release_fund_acct() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_BilateralOrder_Rtn.fund_acct)
  return fund_acct_.Release();
}
inline void ficc_Exch_BilateralOrder_Rtn::set_allocated_fund_acct(std::string* fund_acct) {
  if (fund_acct != nullptr) {
    
  } else {
    
  }
  fund_acct_.SetAllocated(fund_acct, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fund_acct_.IsDefault()) {
    fund_acct_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Rtn.fund_acct)
}

// string trade_id = 30;
inline void ficc_Exch_BilateralOrder_Rtn::clear_trade_id() {
  trade_id_.ClearToEmpty();
}
inline const std::string& ficc_Exch_BilateralOrder_Rtn::trade_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_BilateralOrder_Rtn.trade_id)
  return _internal_trade_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_BilateralOrder_Rtn::set_trade_id(ArgT0&& arg0, ArgT... args) {
 
 trade_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_BilateralOrder_Rtn.trade_id)
}
inline std::string* ficc_Exch_BilateralOrder_Rtn::mutable_trade_id() {
  std::string* _s = _internal_mutable_trade_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_BilateralOrder_Rtn.trade_id)
  return _s;
}
inline const std::string& ficc_Exch_BilateralOrder_Rtn::_internal_trade_id() const {
  return trade_id_.Get();
}
inline void ficc_Exch_BilateralOrder_Rtn::_internal_set_trade_id(const std::string& value) {
  
  trade_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Rtn::_internal_mutable_trade_id() {
  
  return trade_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_BilateralOrder_Rtn::release_trade_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_BilateralOrder_Rtn.trade_id)
  return trade_id_.Release();
}
inline void ficc_Exch_BilateralOrder_Rtn::set_allocated_trade_id(std::string* trade_id) {
  if (trade_id != nullptr) {
    
  } else {
    
  }
  trade_id_.SetAllocated(trade_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trade_id_.IsDefault()) {
    trade_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_BilateralOrder_Rtn.trade_id)
}

// -------------------------------------------------------------------

// ficc_Exch_Match_Rtn

// .message_head.head head = 1;
inline bool ficc_Exch_Match_Rtn::_internal_has_head() const {
  return this != internal_default_instance() && head_ != nullptr;
}
inline bool ficc_Exch_Match_Rtn::has_head() const {
  return _internal_has_head();
}
inline const ::message_head::head& ficc_Exch_Match_Rtn::_internal_head() const {
  const ::message_head::head* p = head_;
  return p != nullptr ? *p : reinterpret_cast<const ::message_head::head&>(
      ::message_head::_head_default_instance_);
}
inline const ::message_head::head& ficc_Exch_Match_Rtn::head() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Match_Rtn.head)
  return _internal_head();
}
inline void ficc_Exch_Match_Rtn::unsafe_arena_set_allocated_head(
    ::message_head::head* head) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ficc_message.ficc_Exch_Match_Rtn.head)
}
inline ::message_head::head* ficc_Exch_Match_Rtn::release_head() {
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message_head::head* ficc_Exch_Match_Rtn::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Match_Rtn.head)
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
  return temp;
}
inline ::message_head::head* ficc_Exch_Match_Rtn::_internal_mutable_head() {
  
  if (head_ == nullptr) {
    auto* p = CreateMaybeMessage<::message_head::head>(GetArenaForAllocation());
    head_ = p;
  }
  return head_;
}
inline ::message_head::head* ficc_Exch_Match_Rtn::mutable_head() {
  ::message_head::head* _msg = _internal_mutable_head();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Match_Rtn.head)
  return _msg;
}
inline void ficc_Exch_Match_Rtn::set_allocated_head(::message_head::head* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head));
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Match_Rtn.head)
}

// string trade_id = 2;
inline void ficc_Exch_Match_Rtn::clear_trade_id() {
  trade_id_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Match_Rtn::trade_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Match_Rtn.trade_id)
  return _internal_trade_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Match_Rtn::set_trade_id(ArgT0&& arg0, ArgT... args) {
 
 trade_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Match_Rtn.trade_id)
}
inline std::string* ficc_Exch_Match_Rtn::mutable_trade_id() {
  std::string* _s = _internal_mutable_trade_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Match_Rtn.trade_id)
  return _s;
}
inline const std::string& ficc_Exch_Match_Rtn::_internal_trade_id() const {
  return trade_id_.Get();
}
inline void ficc_Exch_Match_Rtn::_internal_set_trade_id(const std::string& value) {
  
  trade_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Match_Rtn::_internal_mutable_trade_id() {
  
  return trade_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Match_Rtn::release_trade_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Match_Rtn.trade_id)
  return trade_id_.Release();
}
inline void ficc_Exch_Match_Rtn::set_allocated_trade_id(std::string* trade_id) {
  if (trade_id != nullptr) {
    
  } else {
    
  }
  trade_id_.SetAllocated(trade_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trade_id_.IsDefault()) {
    trade_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Match_Rtn.trade_id)
}

// string trade_date = 3;
inline void ficc_Exch_Match_Rtn::clear_trade_date() {
  trade_date_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Match_Rtn::trade_date() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Match_Rtn.trade_date)
  return _internal_trade_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Match_Rtn::set_trade_date(ArgT0&& arg0, ArgT... args) {
 
 trade_date_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Match_Rtn.trade_date)
}
inline std::string* ficc_Exch_Match_Rtn::mutable_trade_date() {
  std::string* _s = _internal_mutable_trade_date();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Match_Rtn.trade_date)
  return _s;
}
inline const std::string& ficc_Exch_Match_Rtn::_internal_trade_date() const {
  return trade_date_.Get();
}
inline void ficc_Exch_Match_Rtn::_internal_set_trade_date(const std::string& value) {
  
  trade_date_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Match_Rtn::_internal_mutable_trade_date() {
  
  return trade_date_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Match_Rtn::release_trade_date() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Match_Rtn.trade_date)
  return trade_date_.Release();
}
inline void ficc_Exch_Match_Rtn::set_allocated_trade_date(std::string* trade_date) {
  if (trade_date != nullptr) {
    
  } else {
    
  }
  trade_date_.SetAllocated(trade_date, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trade_date_.IsDefault()) {
    trade_date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Match_Rtn.trade_date)
}

// string trade_time = 4;
inline void ficc_Exch_Match_Rtn::clear_trade_time() {
  trade_time_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Match_Rtn::trade_time() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Match_Rtn.trade_time)
  return _internal_trade_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Match_Rtn::set_trade_time(ArgT0&& arg0, ArgT... args) {
 
 trade_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Match_Rtn.trade_time)
}
inline std::string* ficc_Exch_Match_Rtn::mutable_trade_time() {
  std::string* _s = _internal_mutable_trade_time();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Match_Rtn.trade_time)
  return _s;
}
inline const std::string& ficc_Exch_Match_Rtn::_internal_trade_time() const {
  return trade_time_.Get();
}
inline void ficc_Exch_Match_Rtn::_internal_set_trade_time(const std::string& value) {
  
  trade_time_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Match_Rtn::_internal_mutable_trade_time() {
  
  return trade_time_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Match_Rtn::release_trade_time() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Match_Rtn.trade_time)
  return trade_time_.Release();
}
inline void ficc_Exch_Match_Rtn::set_allocated_trade_time(std::string* trade_time) {
  if (trade_time != nullptr) {
    
  } else {
    
  }
  trade_time_.SetAllocated(trade_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trade_time_.IsDefault()) {
    trade_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Match_Rtn.trade_time)
}

// string order_sys_id = 5;
inline void ficc_Exch_Match_Rtn::clear_order_sys_id() {
  order_sys_id_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Match_Rtn::order_sys_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Match_Rtn.order_sys_id)
  return _internal_order_sys_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Match_Rtn::set_order_sys_id(ArgT0&& arg0, ArgT... args) {
 
 order_sys_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Match_Rtn.order_sys_id)
}
inline std::string* ficc_Exch_Match_Rtn::mutable_order_sys_id() {
  std::string* _s = _internal_mutable_order_sys_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Match_Rtn.order_sys_id)
  return _s;
}
inline const std::string& ficc_Exch_Match_Rtn::_internal_order_sys_id() const {
  return order_sys_id_.Get();
}
inline void ficc_Exch_Match_Rtn::_internal_set_order_sys_id(const std::string& value) {
  
  order_sys_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Match_Rtn::_internal_mutable_order_sys_id() {
  
  return order_sys_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Match_Rtn::release_order_sys_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Match_Rtn.order_sys_id)
  return order_sys_id_.Release();
}
inline void ficc_Exch_Match_Rtn::set_allocated_order_sys_id(std::string* order_sys_id) {
  if (order_sys_id != nullptr) {
    
  } else {
    
  }
  order_sys_id_.SetAllocated(order_sys_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_sys_id_.IsDefault()) {
    order_sys_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Match_Rtn.order_sys_id)
}

// string seat_order_id = 6;
inline void ficc_Exch_Match_Rtn::clear_seat_order_id() {
  seat_order_id_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Match_Rtn::seat_order_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Match_Rtn.seat_order_id)
  return _internal_seat_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Match_Rtn::set_seat_order_id(ArgT0&& arg0, ArgT... args) {
 
 seat_order_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Match_Rtn.seat_order_id)
}
inline std::string* ficc_Exch_Match_Rtn::mutable_seat_order_id() {
  std::string* _s = _internal_mutable_seat_order_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Match_Rtn.seat_order_id)
  return _s;
}
inline const std::string& ficc_Exch_Match_Rtn::_internal_seat_order_id() const {
  return seat_order_id_.Get();
}
inline void ficc_Exch_Match_Rtn::_internal_set_seat_order_id(const std::string& value) {
  
  seat_order_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Match_Rtn::_internal_mutable_seat_order_id() {
  
  return seat_order_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Match_Rtn::release_seat_order_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Match_Rtn.seat_order_id)
  return seat_order_id_.Release();
}
inline void ficc_Exch_Match_Rtn::set_allocated_seat_order_id(std::string* seat_order_id) {
  if (seat_order_id != nullptr) {
    
  } else {
    
  }
  seat_order_id_.SetAllocated(seat_order_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (seat_order_id_.IsDefault()) {
    seat_order_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Match_Rtn.seat_order_id)
}

// string secu_code = 7;
inline void ficc_Exch_Match_Rtn::clear_secu_code() {
  secu_code_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Match_Rtn::secu_code() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Match_Rtn.secu_code)
  return _internal_secu_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Match_Rtn::set_secu_code(ArgT0&& arg0, ArgT... args) {
 
 secu_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Match_Rtn.secu_code)
}
inline std::string* ficc_Exch_Match_Rtn::mutable_secu_code() {
  std::string* _s = _internal_mutable_secu_code();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Match_Rtn.secu_code)
  return _s;
}
inline const std::string& ficc_Exch_Match_Rtn::_internal_secu_code() const {
  return secu_code_.Get();
}
inline void ficc_Exch_Match_Rtn::_internal_set_secu_code(const std::string& value) {
  
  secu_code_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Match_Rtn::_internal_mutable_secu_code() {
  
  return secu_code_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Match_Rtn::release_secu_code() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Match_Rtn.secu_code)
  return secu_code_.Release();
}
inline void ficc_Exch_Match_Rtn::set_allocated_secu_code(std::string* secu_code) {
  if (secu_code != nullptr) {
    
  } else {
    
  }
  secu_code_.SetAllocated(secu_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secu_code_.IsDefault()) {
    secu_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Match_Rtn.secu_code)
}

// float trade_price = 8;
inline void ficc_Exch_Match_Rtn::clear_trade_price() {
  trade_price_ = 0;
}
inline float ficc_Exch_Match_Rtn::_internal_trade_price() const {
  return trade_price_;
}
inline float ficc_Exch_Match_Rtn::trade_price() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Match_Rtn.trade_price)
  return _internal_trade_price();
}
inline void ficc_Exch_Match_Rtn::_internal_set_trade_price(float value) {
  
  trade_price_ = value;
}
inline void ficc_Exch_Match_Rtn::set_trade_price(float value) {
  _internal_set_trade_price(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Match_Rtn.trade_price)
}

// float accrued_interest_amt = 9;
inline void ficc_Exch_Match_Rtn::clear_accrued_interest_amt() {
  accrued_interest_amt_ = 0;
}
inline float ficc_Exch_Match_Rtn::_internal_accrued_interest_amt() const {
  return accrued_interest_amt_;
}
inline float ficc_Exch_Match_Rtn::accrued_interest_amt() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Match_Rtn.accrued_interest_amt)
  return _internal_accrued_interest_amt();
}
inline void ficc_Exch_Match_Rtn::_internal_set_accrued_interest_amt(float value) {
  
  accrued_interest_amt_ = value;
}
inline void ficc_Exch_Match_Rtn::set_accrued_interest_amt(float value) {
  _internal_set_accrued_interest_amt(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Match_Rtn.accrued_interest_amt)
}

// uint64 vol_traded = 10;
inline void ficc_Exch_Match_Rtn::clear_vol_traded() {
  vol_traded_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_Match_Rtn::_internal_vol_traded() const {
  return vol_traded_;
}
inline uint64_t ficc_Exch_Match_Rtn::vol_traded() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Match_Rtn.vol_traded)
  return _internal_vol_traded();
}
inline void ficc_Exch_Match_Rtn::_internal_set_vol_traded(uint64_t value) {
  
  vol_traded_ = value;
}
inline void ficc_Exch_Match_Rtn::set_vol_traded(uint64_t value) {
  _internal_set_vol_traded(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Match_Rtn.vol_traded)
}

// string counter_party_id = 11;
inline void ficc_Exch_Match_Rtn::clear_counter_party_id() {
  counter_party_id_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Match_Rtn::counter_party_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Match_Rtn.counter_party_id)
  return _internal_counter_party_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Match_Rtn::set_counter_party_id(ArgT0&& arg0, ArgT... args) {
 
 counter_party_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Match_Rtn.counter_party_id)
}
inline std::string* ficc_Exch_Match_Rtn::mutable_counter_party_id() {
  std::string* _s = _internal_mutable_counter_party_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Match_Rtn.counter_party_id)
  return _s;
}
inline const std::string& ficc_Exch_Match_Rtn::_internal_counter_party_id() const {
  return counter_party_id_.Get();
}
inline void ficc_Exch_Match_Rtn::_internal_set_counter_party_id(const std::string& value) {
  
  counter_party_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Match_Rtn::_internal_mutable_counter_party_id() {
  
  return counter_party_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Match_Rtn::release_counter_party_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Match_Rtn.counter_party_id)
  return counter_party_id_.Release();
}
inline void ficc_Exch_Match_Rtn::set_allocated_counter_party_id(std::string* counter_party_id) {
  if (counter_party_id != nullptr) {
    
  } else {
    
  }
  counter_party_id_.SetAllocated(counter_party_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (counter_party_id_.IsDefault()) {
    counter_party_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Match_Rtn.counter_party_id)
}

// string counter_party_trader = 12;
inline void ficc_Exch_Match_Rtn::clear_counter_party_trader() {
  counter_party_trader_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Match_Rtn::counter_party_trader() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Match_Rtn.counter_party_trader)
  return _internal_counter_party_trader();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Match_Rtn::set_counter_party_trader(ArgT0&& arg0, ArgT... args) {
 
 counter_party_trader_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Match_Rtn.counter_party_trader)
}
inline std::string* ficc_Exch_Match_Rtn::mutable_counter_party_trader() {
  std::string* _s = _internal_mutable_counter_party_trader();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Match_Rtn.counter_party_trader)
  return _s;
}
inline const std::string& ficc_Exch_Match_Rtn::_internal_counter_party_trader() const {
  return counter_party_trader_.Get();
}
inline void ficc_Exch_Match_Rtn::_internal_set_counter_party_trader(const std::string& value) {
  
  counter_party_trader_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Match_Rtn::_internal_mutable_counter_party_trader() {
  
  return counter_party_trader_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Match_Rtn::release_counter_party_trader() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Match_Rtn.counter_party_trader)
  return counter_party_trader_.Release();
}
inline void ficc_Exch_Match_Rtn::set_allocated_counter_party_trader(std::string* counter_party_trader) {
  if (counter_party_trader != nullptr) {
    
  } else {
    
  }
  counter_party_trader_.SetAllocated(counter_party_trader, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (counter_party_trader_.IsDefault()) {
    counter_party_trader_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Match_Rtn.counter_party_trader)
}

// string investor_id = 13;
inline void ficc_Exch_Match_Rtn::clear_investor_id() {
  investor_id_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Match_Rtn::investor_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Match_Rtn.investor_id)
  return _internal_investor_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Match_Rtn::set_investor_id(ArgT0&& arg0, ArgT... args) {
 
 investor_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Match_Rtn.investor_id)
}
inline std::string* ficc_Exch_Match_Rtn::mutable_investor_id() {
  std::string* _s = _internal_mutable_investor_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Match_Rtn.investor_id)
  return _s;
}
inline const std::string& ficc_Exch_Match_Rtn::_internal_investor_id() const {
  return investor_id_.Get();
}
inline void ficc_Exch_Match_Rtn::_internal_set_investor_id(const std::string& value) {
  
  investor_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Match_Rtn::_internal_mutable_investor_id() {
  
  return investor_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Match_Rtn::release_investor_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Match_Rtn.investor_id)
  return investor_id_.Release();
}
inline void ficc_Exch_Match_Rtn::set_allocated_investor_id(std::string* investor_id) {
  if (investor_id != nullptr) {
    
  } else {
    
  }
  investor_id_.SetAllocated(investor_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (investor_id_.IsDefault()) {
    investor_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Match_Rtn.investor_id)
}

// string fund_acct = 14;
inline void ficc_Exch_Match_Rtn::clear_fund_acct() {
  fund_acct_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Match_Rtn::fund_acct() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Match_Rtn.fund_acct)
  return _internal_fund_acct();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Match_Rtn::set_fund_acct(ArgT0&& arg0, ArgT... args) {
 
 fund_acct_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Match_Rtn.fund_acct)
}
inline std::string* ficc_Exch_Match_Rtn::mutable_fund_acct() {
  std::string* _s = _internal_mutable_fund_acct();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Match_Rtn.fund_acct)
  return _s;
}
inline const std::string& ficc_Exch_Match_Rtn::_internal_fund_acct() const {
  return fund_acct_.Get();
}
inline void ficc_Exch_Match_Rtn::_internal_set_fund_acct(const std::string& value) {
  
  fund_acct_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Match_Rtn::_internal_mutable_fund_acct() {
  
  return fund_acct_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Match_Rtn::release_fund_acct() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Match_Rtn.fund_acct)
  return fund_acct_.Release();
}
inline void ficc_Exch_Match_Rtn::set_allocated_fund_acct(std::string* fund_acct) {
  if (fund_acct != nullptr) {
    
  } else {
    
  }
  fund_acct_.SetAllocated(fund_acct, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fund_acct_.IsDefault()) {
    fund_acct_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Match_Rtn.fund_acct)
}

// uint64 settle_type = 15;
inline void ficc_Exch_Match_Rtn::clear_settle_type() {
  settle_type_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_Match_Rtn::_internal_settle_type() const {
  return settle_type_;
}
inline uint64_t ficc_Exch_Match_Rtn::settle_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Match_Rtn.settle_type)
  return _internal_settle_type();
}
inline void ficc_Exch_Match_Rtn::_internal_set_settle_type(uint64_t value) {
  
  settle_type_ = value;
}
inline void ficc_Exch_Match_Rtn::set_settle_type(uint64_t value) {
  _internal_set_settle_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Match_Rtn.settle_type)
}

// -------------------------------------------------------------------

// ficc_Exch_Order_Action

// .message_head.head head = 1;
inline bool ficc_Exch_Order_Action::_internal_has_head() const {
  return this != internal_default_instance() && head_ != nullptr;
}
inline bool ficc_Exch_Order_Action::has_head() const {
  return _internal_has_head();
}
inline const ::message_head::head& ficc_Exch_Order_Action::_internal_head() const {
  const ::message_head::head* p = head_;
  return p != nullptr ? *p : reinterpret_cast<const ::message_head::head&>(
      ::message_head::_head_default_instance_);
}
inline const ::message_head::head& ficc_Exch_Order_Action::head() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Action.head)
  return _internal_head();
}
inline void ficc_Exch_Order_Action::unsafe_arena_set_allocated_head(
    ::message_head::head* head) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ficc_message.ficc_Exch_Order_Action.head)
}
inline ::message_head::head* ficc_Exch_Order_Action::release_head() {
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message_head::head* ficc_Exch_Order_Action::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Action.head)
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
  return temp;
}
inline ::message_head::head* ficc_Exch_Order_Action::_internal_mutable_head() {
  
  if (head_ == nullptr) {
    auto* p = CreateMaybeMessage<::message_head::head>(GetArenaForAllocation());
    head_ = p;
  }
  return head_;
}
inline ::message_head::head* ficc_Exch_Order_Action::mutable_head() {
  ::message_head::head* _msg = _internal_mutable_head();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Action.head)
  return _msg;
}
inline void ficc_Exch_Order_Action::set_allocated_head(::message_head::head* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head));
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Action.head)
}

// string order_inner_id = 2;
inline void ficc_Exch_Order_Action::clear_order_inner_id() {
  order_inner_id_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Action::order_inner_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Action.order_inner_id)
  return _internal_order_inner_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Action::set_order_inner_id(ArgT0&& arg0, ArgT... args) {
 
 order_inner_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Action.order_inner_id)
}
inline std::string* ficc_Exch_Order_Action::mutable_order_inner_id() {
  std::string* _s = _internal_mutable_order_inner_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Action.order_inner_id)
  return _s;
}
inline const std::string& ficc_Exch_Order_Action::_internal_order_inner_id() const {
  return order_inner_id_.Get();
}
inline void ficc_Exch_Order_Action::_internal_set_order_inner_id(const std::string& value) {
  
  order_inner_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::_internal_mutable_order_inner_id() {
  
  return order_inner_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::release_order_inner_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Action.order_inner_id)
  return order_inner_id_.Release();
}
inline void ficc_Exch_Order_Action::set_allocated_order_inner_id(std::string* order_inner_id) {
  if (order_inner_id != nullptr) {
    
  } else {
    
  }
  order_inner_id_.SetAllocated(order_inner_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_inner_id_.IsDefault()) {
    order_inner_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Action.order_inner_id)
}

// string investor_id = 3;
inline void ficc_Exch_Order_Action::clear_investor_id() {
  investor_id_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Action::investor_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Action.investor_id)
  return _internal_investor_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Action::set_investor_id(ArgT0&& arg0, ArgT... args) {
 
 investor_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Action.investor_id)
}
inline std::string* ficc_Exch_Order_Action::mutable_investor_id() {
  std::string* _s = _internal_mutable_investor_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Action.investor_id)
  return _s;
}
inline const std::string& ficc_Exch_Order_Action::_internal_investor_id() const {
  return investor_id_.Get();
}
inline void ficc_Exch_Order_Action::_internal_set_investor_id(const std::string& value) {
  
  investor_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::_internal_mutable_investor_id() {
  
  return investor_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::release_investor_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Action.investor_id)
  return investor_id_.Release();
}
inline void ficc_Exch_Order_Action::set_allocated_investor_id(std::string* investor_id) {
  if (investor_id != nullptr) {
    
  } else {
    
  }
  investor_id_.SetAllocated(investor_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (investor_id_.IsDefault()) {
    investor_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Action.investor_id)
}

// uint32 user_id = 4;
inline void ficc_Exch_Order_Action::clear_user_id() {
  user_id_ = 0u;
}
inline uint32_t ficc_Exch_Order_Action::_internal_user_id() const {
  return user_id_;
}
inline uint32_t ficc_Exch_Order_Action::user_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Action.user_id)
  return _internal_user_id();
}
inline void ficc_Exch_Order_Action::_internal_set_user_id(uint32_t value) {
  
  user_id_ = value;
}
inline void ficc_Exch_Order_Action::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Action.user_id)
}

// string acction_flag = 5;
inline void ficc_Exch_Order_Action::clear_acction_flag() {
  acction_flag_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Action::acction_flag() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Action.acction_flag)
  return _internal_acction_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Action::set_acction_flag(ArgT0&& arg0, ArgT... args) {
 
 acction_flag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Action.acction_flag)
}
inline std::string* ficc_Exch_Order_Action::mutable_acction_flag() {
  std::string* _s = _internal_mutable_acction_flag();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Action.acction_flag)
  return _s;
}
inline const std::string& ficc_Exch_Order_Action::_internal_acction_flag() const {
  return acction_flag_.Get();
}
inline void ficc_Exch_Order_Action::_internal_set_acction_flag(const std::string& value) {
  
  acction_flag_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::_internal_mutable_acction_flag() {
  
  return acction_flag_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::release_acction_flag() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Action.acction_flag)
  return acction_flag_.Release();
}
inline void ficc_Exch_Order_Action::set_allocated_acction_flag(std::string* acction_flag) {
  if (acction_flag != nullptr) {
    
  } else {
    
  }
  acction_flag_.SetAllocated(acction_flag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (acction_flag_.IsDefault()) {
    acction_flag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Action.acction_flag)
}

// float price = 6;
inline void ficc_Exch_Order_Action::clear_price() {
  price_ = 0;
}
inline float ficc_Exch_Order_Action::_internal_price() const {
  return price_;
}
inline float ficc_Exch_Order_Action::price() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Action.price)
  return _internal_price();
}
inline void ficc_Exch_Order_Action::_internal_set_price(float value) {
  
  price_ = value;
}
inline void ficc_Exch_Order_Action::set_price(float value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Action.price)
}

// uint64 vol = 7;
inline void ficc_Exch_Order_Action::clear_vol() {
  vol_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_Order_Action::_internal_vol() const {
  return vol_;
}
inline uint64_t ficc_Exch_Order_Action::vol() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Action.vol)
  return _internal_vol();
}
inline void ficc_Exch_Order_Action::_internal_set_vol(uint64_t value) {
  
  vol_ = value;
}
inline void ficc_Exch_Order_Action::set_vol(uint64_t value) {
  _internal_set_vol(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Action.vol)
}

// string broker_id = 8;
inline void ficc_Exch_Order_Action::clear_broker_id() {
  broker_id_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Action::broker_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Action.broker_id)
  return _internal_broker_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Action::set_broker_id(ArgT0&& arg0, ArgT... args) {
 
 broker_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Action.broker_id)
}
inline std::string* ficc_Exch_Order_Action::mutable_broker_id() {
  std::string* _s = _internal_mutable_broker_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Action.broker_id)
  return _s;
}
inline const std::string& ficc_Exch_Order_Action::_internal_broker_id() const {
  return broker_id_.Get();
}
inline void ficc_Exch_Order_Action::_internal_set_broker_id(const std::string& value) {
  
  broker_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::_internal_mutable_broker_id() {
  
  return broker_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::release_broker_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Action.broker_id)
  return broker_id_.Release();
}
inline void ficc_Exch_Order_Action::set_allocated_broker_id(std::string* broker_id) {
  if (broker_id != nullptr) {
    
  } else {
    
  }
  broker_id_.SetAllocated(broker_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (broker_id_.IsDefault()) {
    broker_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Action.broker_id)
}

// string ex_code = 9;
inline void ficc_Exch_Order_Action::clear_ex_code() {
  ex_code_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Action::ex_code() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Action.ex_code)
  return _internal_ex_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Action::set_ex_code(ArgT0&& arg0, ArgT... args) {
 
 ex_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Action.ex_code)
}
inline std::string* ficc_Exch_Order_Action::mutable_ex_code() {
  std::string* _s = _internal_mutable_ex_code();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Action.ex_code)
  return _s;
}
inline const std::string& ficc_Exch_Order_Action::_internal_ex_code() const {
  return ex_code_.Get();
}
inline void ficc_Exch_Order_Action::_internal_set_ex_code(const std::string& value) {
  
  ex_code_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::_internal_mutable_ex_code() {
  
  return ex_code_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::release_ex_code() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Action.ex_code)
  return ex_code_.Release();
}
inline void ficc_Exch_Order_Action::set_allocated_ex_code(std::string* ex_code) {
  if (ex_code != nullptr) {
    
  } else {
    
  }
  ex_code_.SetAllocated(ex_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ex_code_.IsDefault()) {
    ex_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Action.ex_code)
}

// string order_sys_id = 10;
inline void ficc_Exch_Order_Action::clear_order_sys_id() {
  order_sys_id_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Action::order_sys_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Action.order_sys_id)
  return _internal_order_sys_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Action::set_order_sys_id(ArgT0&& arg0, ArgT... args) {
 
 order_sys_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Action.order_sys_id)
}
inline std::string* ficc_Exch_Order_Action::mutable_order_sys_id() {
  std::string* _s = _internal_mutable_order_sys_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Action.order_sys_id)
  return _s;
}
inline const std::string& ficc_Exch_Order_Action::_internal_order_sys_id() const {
  return order_sys_id_.Get();
}
inline void ficc_Exch_Order_Action::_internal_set_order_sys_id(const std::string& value) {
  
  order_sys_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::_internal_mutable_order_sys_id() {
  
  return order_sys_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::release_order_sys_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Action.order_sys_id)
  return order_sys_id_.Release();
}
inline void ficc_Exch_Order_Action::set_allocated_order_sys_id(std::string* order_sys_id) {
  if (order_sys_id != nullptr) {
    
  } else {
    
  }
  order_sys_id_.SetAllocated(order_sys_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_sys_id_.IsDefault()) {
    order_sys_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Action.order_sys_id)
}

// uint64 strategy_code = 11;
inline void ficc_Exch_Order_Action::clear_strategy_code() {
  strategy_code_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_Order_Action::_internal_strategy_code() const {
  return strategy_code_;
}
inline uint64_t ficc_Exch_Order_Action::strategy_code() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Action.strategy_code)
  return _internal_strategy_code();
}
inline void ficc_Exch_Order_Action::_internal_set_strategy_code(uint64_t value) {
  
  strategy_code_ = value;
}
inline void ficc_Exch_Order_Action::set_strategy_code(uint64_t value) {
  _internal_set_strategy_code(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Action.strategy_code)
}

// string trade_acct = 12;
inline void ficc_Exch_Order_Action::clear_trade_acct() {
  trade_acct_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Action::trade_acct() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Action.trade_acct)
  return _internal_trade_acct();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Action::set_trade_acct(ArgT0&& arg0, ArgT... args) {
 
 trade_acct_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Action.trade_acct)
}
inline std::string* ficc_Exch_Order_Action::mutable_trade_acct() {
  std::string* _s = _internal_mutable_trade_acct();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Action.trade_acct)
  return _s;
}
inline const std::string& ficc_Exch_Order_Action::_internal_trade_acct() const {
  return trade_acct_.Get();
}
inline void ficc_Exch_Order_Action::_internal_set_trade_acct(const std::string& value) {
  
  trade_acct_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::_internal_mutable_trade_acct() {
  
  return trade_acct_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::release_trade_acct() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Action.trade_acct)
  return trade_acct_.Release();
}
inline void ficc_Exch_Order_Action::set_allocated_trade_acct(std::string* trade_acct) {
  if (trade_acct != nullptr) {
    
  } else {
    
  }
  trade_acct_.SetAllocated(trade_acct, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trade_acct_.IsDefault()) {
    trade_acct_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Action.trade_acct)
}

// string secu_code = 13;
inline void ficc_Exch_Order_Action::clear_secu_code() {
  secu_code_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Action::secu_code() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Action.secu_code)
  return _internal_secu_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Action::set_secu_code(ArgT0&& arg0, ArgT... args) {
 
 secu_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Action.secu_code)
}
inline std::string* ficc_Exch_Order_Action::mutable_secu_code() {
  std::string* _s = _internal_mutable_secu_code();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Action.secu_code)
  return _s;
}
inline const std::string& ficc_Exch_Order_Action::_internal_secu_code() const {
  return secu_code_.Get();
}
inline void ficc_Exch_Order_Action::_internal_set_secu_code(const std::string& value) {
  
  secu_code_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::_internal_mutable_secu_code() {
  
  return secu_code_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::release_secu_code() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Action.secu_code)
  return secu_code_.Release();
}
inline void ficc_Exch_Order_Action::set_allocated_secu_code(std::string* secu_code) {
  if (secu_code != nullptr) {
    
  } else {
    
  }
  secu_code_.SetAllocated(secu_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secu_code_.IsDefault()) {
    secu_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Action.secu_code)
}

// string commodity_type = 14;
inline void ficc_Exch_Order_Action::clear_commodity_type() {
  commodity_type_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Action::commodity_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Action.commodity_type)
  return _internal_commodity_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Action::set_commodity_type(ArgT0&& arg0, ArgT... args) {
 
 commodity_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Action.commodity_type)
}
inline std::string* ficc_Exch_Order_Action::mutable_commodity_type() {
  std::string* _s = _internal_mutable_commodity_type();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Action.commodity_type)
  return _s;
}
inline const std::string& ficc_Exch_Order_Action::_internal_commodity_type() const {
  return commodity_type_.Get();
}
inline void ficc_Exch_Order_Action::_internal_set_commodity_type(const std::string& value) {
  
  commodity_type_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::_internal_mutable_commodity_type() {
  
  return commodity_type_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::release_commodity_type() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Action.commodity_type)
  return commodity_type_.Release();
}
inline void ficc_Exch_Order_Action::set_allocated_commodity_type(std::string* commodity_type) {
  if (commodity_type != nullptr) {
    
  } else {
    
  }
  commodity_type_.SetAllocated(commodity_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (commodity_type_.IsDefault()) {
    commodity_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Action.commodity_type)
}

// uint64 match_type = 15;
inline void ficc_Exch_Order_Action::clear_match_type() {
  match_type_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_Order_Action::_internal_match_type() const {
  return match_type_;
}
inline uint64_t ficc_Exch_Order_Action::match_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Action.match_type)
  return _internal_match_type();
}
inline void ficc_Exch_Order_Action::_internal_set_match_type(uint64_t value) {
  
  match_type_ = value;
}
inline void ficc_Exch_Order_Action::set_match_type(uint64_t value) {
  _internal_set_match_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Action.match_type)
}

// uint64 quote_type = 16;
inline void ficc_Exch_Order_Action::clear_quote_type() {
  quote_type_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_Order_Action::_internal_quote_type() const {
  return quote_type_;
}
inline uint64_t ficc_Exch_Order_Action::quote_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Action.quote_type)
  return _internal_quote_type();
}
inline void ficc_Exch_Order_Action::_internal_set_quote_type(uint64_t value) {
  
  quote_type_ = value;
}
inline void ficc_Exch_Order_Action::set_quote_type(uint64_t value) {
  _internal_set_quote_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Action.quote_type)
}

// string valid_until_time = 17;
inline void ficc_Exch_Order_Action::clear_valid_until_time() {
  valid_until_time_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Action::valid_until_time() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Action.valid_until_time)
  return _internal_valid_until_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Action::set_valid_until_time(ArgT0&& arg0, ArgT... args) {
 
 valid_until_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Action.valid_until_time)
}
inline std::string* ficc_Exch_Order_Action::mutable_valid_until_time() {
  std::string* _s = _internal_mutable_valid_until_time();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Action.valid_until_time)
  return _s;
}
inline const std::string& ficc_Exch_Order_Action::_internal_valid_until_time() const {
  return valid_until_time_.Get();
}
inline void ficc_Exch_Order_Action::_internal_set_valid_until_time(const std::string& value) {
  
  valid_until_time_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::_internal_mutable_valid_until_time() {
  
  return valid_until_time_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::release_valid_until_time() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Action.valid_until_time)
  return valid_until_time_.Release();
}
inline void ficc_Exch_Order_Action::set_allocated_valid_until_time(std::string* valid_until_time) {
  if (valid_until_time != nullptr) {
    
  } else {
    
  }
  valid_until_time_.SetAllocated(valid_until_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (valid_until_time_.IsDefault()) {
    valid_until_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Action.valid_until_time)
}

// string insert_time = 18;
inline void ficc_Exch_Order_Action::clear_insert_time() {
  insert_time_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Action::insert_time() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Action.insert_time)
  return _internal_insert_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Action::set_insert_time(ArgT0&& arg0, ArgT... args) {
 
 insert_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Action.insert_time)
}
inline std::string* ficc_Exch_Order_Action::mutable_insert_time() {
  std::string* _s = _internal_mutable_insert_time();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Action.insert_time)
  return _s;
}
inline const std::string& ficc_Exch_Order_Action::_internal_insert_time() const {
  return insert_time_.Get();
}
inline void ficc_Exch_Order_Action::_internal_set_insert_time(const std::string& value) {
  
  insert_time_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::_internal_mutable_insert_time() {
  
  return insert_time_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::release_insert_time() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Action.insert_time)
  return insert_time_.Release();
}
inline void ficc_Exch_Order_Action::set_allocated_insert_time(std::string* insert_time) {
  if (insert_time != nullptr) {
    
  } else {
    
  }
  insert_time_.SetAllocated(insert_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (insert_time_.IsDefault()) {
    insert_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Action.insert_time)
}

// string client_ref_id = 19;
inline void ficc_Exch_Order_Action::clear_client_ref_id() {
  client_ref_id_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Action::client_ref_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Action.client_ref_id)
  return _internal_client_ref_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Action::set_client_ref_id(ArgT0&& arg0, ArgT... args) {
 
 client_ref_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Action.client_ref_id)
}
inline std::string* ficc_Exch_Order_Action::mutable_client_ref_id() {
  std::string* _s = _internal_mutable_client_ref_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Action.client_ref_id)
  return _s;
}
inline const std::string& ficc_Exch_Order_Action::_internal_client_ref_id() const {
  return client_ref_id_.Get();
}
inline void ficc_Exch_Order_Action::_internal_set_client_ref_id(const std::string& value) {
  
  client_ref_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::_internal_mutable_client_ref_id() {
  
  return client_ref_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::release_client_ref_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Action.client_ref_id)
  return client_ref_id_.Release();
}
inline void ficc_Exch_Order_Action::set_allocated_client_ref_id(std::string* client_ref_id) {
  if (client_ref_id != nullptr) {
    
  } else {
    
  }
  client_ref_id_.SetAllocated(client_ref_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_ref_id_.IsDefault()) {
    client_ref_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Action.client_ref_id)
}

// uint64 market_indicator = 20;
inline void ficc_Exch_Order_Action::clear_market_indicator() {
  market_indicator_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_Order_Action::_internal_market_indicator() const {
  return market_indicator_;
}
inline uint64_t ficc_Exch_Order_Action::market_indicator() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Action.market_indicator)
  return _internal_market_indicator();
}
inline void ficc_Exch_Order_Action::_internal_set_market_indicator(uint64_t value) {
  
  market_indicator_ = value;
}
inline void ficc_Exch_Order_Action::set_market_indicator(uint64_t value) {
  _internal_set_market_indicator(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Action.market_indicator)
}

// string direction = 21;
inline void ficc_Exch_Order_Action::clear_direction() {
  direction_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Action::direction() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Action.direction)
  return _internal_direction();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Action::set_direction(ArgT0&& arg0, ArgT... args) {
 
 direction_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Action.direction)
}
inline std::string* ficc_Exch_Order_Action::mutable_direction() {
  std::string* _s = _internal_mutable_direction();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Action.direction)
  return _s;
}
inline const std::string& ficc_Exch_Order_Action::_internal_direction() const {
  return direction_.Get();
}
inline void ficc_Exch_Order_Action::_internal_set_direction(const std::string& value) {
  
  direction_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::_internal_mutable_direction() {
  
  return direction_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::release_direction() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Action.direction)
  return direction_.Release();
}
inline void ficc_Exch_Order_Action::set_allocated_direction(std::string* direction) {
  if (direction != nullptr) {
    
  } else {
    
  }
  direction_.SetAllocated(direction, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (direction_.IsDefault()) {
    direction_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Action.direction)
}

// string quote_req_id = 22;
inline void ficc_Exch_Order_Action::clear_quote_req_id() {
  quote_req_id_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Action::quote_req_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Action.quote_req_id)
  return _internal_quote_req_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Action::set_quote_req_id(ArgT0&& arg0, ArgT... args) {
 
 quote_req_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Action.quote_req_id)
}
inline std::string* ficc_Exch_Order_Action::mutable_quote_req_id() {
  std::string* _s = _internal_mutable_quote_req_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Action.quote_req_id)
  return _s;
}
inline const std::string& ficc_Exch_Order_Action::_internal_quote_req_id() const {
  return quote_req_id_.Get();
}
inline void ficc_Exch_Order_Action::_internal_set_quote_req_id(const std::string& value) {
  
  quote_req_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::_internal_mutable_quote_req_id() {
  
  return quote_req_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::release_quote_req_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Action.quote_req_id)
  return quote_req_id_.Release();
}
inline void ficc_Exch_Order_Action::set_allocated_quote_req_id(std::string* quote_req_id) {
  if (quote_req_id != nullptr) {
    
  } else {
    
  }
  quote_req_id_.SetAllocated(quote_req_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (quote_req_id_.IsDefault()) {
    quote_req_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Action.quote_req_id)
}

// float ytm = 23;
inline void ficc_Exch_Order_Action::clear_ytm() {
  ytm_ = 0;
}
inline float ficc_Exch_Order_Action::_internal_ytm() const {
  return ytm_;
}
inline float ficc_Exch_Order_Action::ytm() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Action.ytm)
  return _internal_ytm();
}
inline void ficc_Exch_Order_Action::_internal_set_ytm(float value) {
  
  ytm_ = value;
}
inline void ficc_Exch_Order_Action::set_ytm(float value) {
  _internal_set_ytm(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Action.ytm)
}

// float strike_yeild = 24;
inline void ficc_Exch_Order_Action::clear_strike_yeild() {
  strike_yeild_ = 0;
}
inline float ficc_Exch_Order_Action::_internal_strike_yeild() const {
  return strike_yeild_;
}
inline float ficc_Exch_Order_Action::strike_yeild() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Action.strike_yeild)
  return _internal_strike_yeild();
}
inline void ficc_Exch_Order_Action::_internal_set_strike_yeild(float value) {
  
  strike_yeild_ = value;
}
inline void ficc_Exch_Order_Action::set_strike_yeild(float value) {
  _internal_set_strike_yeild(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Action.strike_yeild)
}

// string acction_status = 25;
inline void ficc_Exch_Order_Action::clear_acction_status() {
  acction_status_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Action::acction_status() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Action.acction_status)
  return _internal_acction_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Action::set_acction_status(ArgT0&& arg0, ArgT... args) {
 
 acction_status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Action.acction_status)
}
inline std::string* ficc_Exch_Order_Action::mutable_acction_status() {
  std::string* _s = _internal_mutable_acction_status();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Action.acction_status)
  return _s;
}
inline const std::string& ficc_Exch_Order_Action::_internal_acction_status() const {
  return acction_status_.Get();
}
inline void ficc_Exch_Order_Action::_internal_set_acction_status(const std::string& value) {
  
  acction_status_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::_internal_mutable_acction_status() {
  
  return acction_status_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::release_acction_status() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Action.acction_status)
  return acction_status_.Release();
}
inline void ficc_Exch_Order_Action::set_allocated_acction_status(std::string* acction_status) {
  if (acction_status != nullptr) {
    
  } else {
    
  }
  acction_status_.SetAllocated(acction_status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (acction_status_.IsDefault()) {
    acction_status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Action.acction_status)
}

// string status_msg = 26;
inline void ficc_Exch_Order_Action::clear_status_msg() {
  status_msg_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Action::status_msg() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Action.status_msg)
  return _internal_status_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Action::set_status_msg(ArgT0&& arg0, ArgT... args) {
 
 status_msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Action.status_msg)
}
inline std::string* ficc_Exch_Order_Action::mutable_status_msg() {
  std::string* _s = _internal_mutable_status_msg();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Action.status_msg)
  return _s;
}
inline const std::string& ficc_Exch_Order_Action::_internal_status_msg() const {
  return status_msg_.Get();
}
inline void ficc_Exch_Order_Action::_internal_set_status_msg(const std::string& value) {
  
  status_msg_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::_internal_mutable_status_msg() {
  
  return status_msg_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::release_status_msg() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Action.status_msg)
  return status_msg_.Release();
}
inline void ficc_Exch_Order_Action::set_allocated_status_msg(std::string* status_msg) {
  if (status_msg != nullptr) {
    
  } else {
    
  }
  status_msg_.SetAllocated(status_msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_msg_.IsDefault()) {
    status_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Action.status_msg)
}

// string acction_date = 27;
inline void ficc_Exch_Order_Action::clear_acction_date() {
  acction_date_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Action::acction_date() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Action.acction_date)
  return _internal_acction_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Action::set_acction_date(ArgT0&& arg0, ArgT... args) {
 
 acction_date_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Action.acction_date)
}
inline std::string* ficc_Exch_Order_Action::mutable_acction_date() {
  std::string* _s = _internal_mutable_acction_date();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Action.acction_date)
  return _s;
}
inline const std::string& ficc_Exch_Order_Action::_internal_acction_date() const {
  return acction_date_.Get();
}
inline void ficc_Exch_Order_Action::_internal_set_acction_date(const std::string& value) {
  
  acction_date_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::_internal_mutable_acction_date() {
  
  return acction_date_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::release_acction_date() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Action.acction_date)
  return acction_date_.Release();
}
inline void ficc_Exch_Order_Action::set_allocated_acction_date(std::string* acction_date) {
  if (acction_date != nullptr) {
    
  } else {
    
  }
  acction_date_.SetAllocated(acction_date, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (acction_date_.IsDefault()) {
    acction_date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Action.acction_date)
}

// string acction_time = 28;
inline void ficc_Exch_Order_Action::clear_acction_time() {
  acction_time_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Action::acction_time() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Action.acction_time)
  return _internal_acction_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Action::set_acction_time(ArgT0&& arg0, ArgT... args) {
 
 acction_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Action.acction_time)
}
inline std::string* ficc_Exch_Order_Action::mutable_acction_time() {
  std::string* _s = _internal_mutable_acction_time();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Action.acction_time)
  return _s;
}
inline const std::string& ficc_Exch_Order_Action::_internal_acction_time() const {
  return acction_time_.Get();
}
inline void ficc_Exch_Order_Action::_internal_set_acction_time(const std::string& value) {
  
  acction_time_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::_internal_mutable_acction_time() {
  
  return acction_time_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::release_acction_time() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Action.acction_time)
  return acction_time_.Release();
}
inline void ficc_Exch_Order_Action::set_allocated_acction_time(std::string* acction_time) {
  if (acction_time != nullptr) {
    
  } else {
    
  }
  acction_time_.SetAllocated(acction_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (acction_time_.IsDefault()) {
    acction_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Action.acction_time)
}

// string trade_id = 29;
inline void ficc_Exch_Order_Action::clear_trade_id() {
  trade_id_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Action::trade_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Action.trade_id)
  return _internal_trade_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Action::set_trade_id(ArgT0&& arg0, ArgT... args) {
 
 trade_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Action.trade_id)
}
inline std::string* ficc_Exch_Order_Action::mutable_trade_id() {
  std::string* _s = _internal_mutable_trade_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Action.trade_id)
  return _s;
}
inline const std::string& ficc_Exch_Order_Action::_internal_trade_id() const {
  return trade_id_.Get();
}
inline void ficc_Exch_Order_Action::_internal_set_trade_id(const std::string& value) {
  
  trade_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::_internal_mutable_trade_id() {
  
  return trade_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Action::release_trade_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Action.trade_id)
  return trade_id_.Release();
}
inline void ficc_Exch_Order_Action::set_allocated_trade_id(std::string* trade_id) {
  if (trade_id != nullptr) {
    
  } else {
    
  }
  trade_id_.SetAllocated(trade_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trade_id_.IsDefault()) {
    trade_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Action.trade_id)
}

// -------------------------------------------------------------------

// ficc_Exch_Order_Req

// .message_head.head head = 1;
inline bool ficc_Exch_Order_Req::_internal_has_head() const {
  return this != internal_default_instance() && head_ != nullptr;
}
inline bool ficc_Exch_Order_Req::has_head() const {
  return _internal_has_head();
}
inline const ::message_head::head& ficc_Exch_Order_Req::_internal_head() const {
  const ::message_head::head* p = head_;
  return p != nullptr ? *p : reinterpret_cast<const ::message_head::head&>(
      ::message_head::_head_default_instance_);
}
inline const ::message_head::head& ficc_Exch_Order_Req::head() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.head)
  return _internal_head();
}
inline void ficc_Exch_Order_Req::unsafe_arena_set_allocated_head(
    ::message_head::head* head) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ficc_message.ficc_Exch_Order_Req.head)
}
inline ::message_head::head* ficc_Exch_Order_Req::release_head() {
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message_head::head* ficc_Exch_Order_Req::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Req.head)
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
  return temp;
}
inline ::message_head::head* ficc_Exch_Order_Req::_internal_mutable_head() {
  
  if (head_ == nullptr) {
    auto* p = CreateMaybeMessage<::message_head::head>(GetArenaForAllocation());
    head_ = p;
  }
  return head_;
}
inline ::message_head::head* ficc_Exch_Order_Req::mutable_head() {
  ::message_head::head* _msg = _internal_mutable_head();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Req.head)
  return _msg;
}
inline void ficc_Exch_Order_Req::set_allocated_head(::message_head::head* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head));
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Req.head)
}

// string trade_acct = 2;
inline void ficc_Exch_Order_Req::clear_trade_acct() {
  trade_acct_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Req::trade_acct() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.trade_acct)
  return _internal_trade_acct();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Req::set_trade_acct(ArgT0&& arg0, ArgT... args) {
 
 trade_acct_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.trade_acct)
}
inline std::string* ficc_Exch_Order_Req::mutable_trade_acct() {
  std::string* _s = _internal_mutable_trade_acct();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Req.trade_acct)
  return _s;
}
inline const std::string& ficc_Exch_Order_Req::_internal_trade_acct() const {
  return trade_acct_.Get();
}
inline void ficc_Exch_Order_Req::_internal_set_trade_acct(const std::string& value) {
  
  trade_acct_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::_internal_mutable_trade_acct() {
  
  return trade_acct_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::release_trade_acct() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Req.trade_acct)
  return trade_acct_.Release();
}
inline void ficc_Exch_Order_Req::set_allocated_trade_acct(std::string* trade_acct) {
  if (trade_acct != nullptr) {
    
  } else {
    
  }
  trade_acct_.SetAllocated(trade_acct, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trade_acct_.IsDefault()) {
    trade_acct_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Req.trade_acct)
}

// string fund_acct = 3;
inline void ficc_Exch_Order_Req::clear_fund_acct() {
  fund_acct_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Req::fund_acct() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.fund_acct)
  return _internal_fund_acct();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Req::set_fund_acct(ArgT0&& arg0, ArgT... args) {
 
 fund_acct_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.fund_acct)
}
inline std::string* ficc_Exch_Order_Req::mutable_fund_acct() {
  std::string* _s = _internal_mutable_fund_acct();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Req.fund_acct)
  return _s;
}
inline const std::string& ficc_Exch_Order_Req::_internal_fund_acct() const {
  return fund_acct_.Get();
}
inline void ficc_Exch_Order_Req::_internal_set_fund_acct(const std::string& value) {
  
  fund_acct_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::_internal_mutable_fund_acct() {
  
  return fund_acct_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::release_fund_acct() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Req.fund_acct)
  return fund_acct_.Release();
}
inline void ficc_Exch_Order_Req::set_allocated_fund_acct(std::string* fund_acct) {
  if (fund_acct != nullptr) {
    
  } else {
    
  }
  fund_acct_.SetAllocated(fund_acct, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fund_acct_.IsDefault()) {
    fund_acct_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Req.fund_acct)
}

// string combino = 4;
inline void ficc_Exch_Order_Req::clear_combino() {
  combino_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Req::combino() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.combino)
  return _internal_combino();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Req::set_combino(ArgT0&& arg0, ArgT... args) {
 
 combino_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.combino)
}
inline std::string* ficc_Exch_Order_Req::mutable_combino() {
  std::string* _s = _internal_mutable_combino();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Req.combino)
  return _s;
}
inline const std::string& ficc_Exch_Order_Req::_internal_combino() const {
  return combino_.Get();
}
inline void ficc_Exch_Order_Req::_internal_set_combino(const std::string& value) {
  
  combino_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::_internal_mutable_combino() {
  
  return combino_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::release_combino() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Req.combino)
  return combino_.Release();
}
inline void ficc_Exch_Order_Req::set_allocated_combino(std::string* combino) {
  if (combino != nullptr) {
    
  } else {
    
  }
  combino_.SetAllocated(combino, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (combino_.IsDefault()) {
    combino_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Req.combino)
}

// string trading_day = 5;
inline void ficc_Exch_Order_Req::clear_trading_day() {
  trading_day_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Req::trading_day() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.trading_day)
  return _internal_trading_day();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Req::set_trading_day(ArgT0&& arg0, ArgT... args) {
 
 trading_day_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.trading_day)
}
inline std::string* ficc_Exch_Order_Req::mutable_trading_day() {
  std::string* _s = _internal_mutable_trading_day();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Req.trading_day)
  return _s;
}
inline const std::string& ficc_Exch_Order_Req::_internal_trading_day() const {
  return trading_day_.Get();
}
inline void ficc_Exch_Order_Req::_internal_set_trading_day(const std::string& value) {
  
  trading_day_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::_internal_mutable_trading_day() {
  
  return trading_day_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::release_trading_day() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Req.trading_day)
  return trading_day_.Release();
}
inline void ficc_Exch_Order_Req::set_allocated_trading_day(std::string* trading_day) {
  if (trading_day != nullptr) {
    
  } else {
    
  }
  trading_day_.SetAllocated(trading_day, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trading_day_.IsDefault()) {
    trading_day_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Req.trading_day)
}

// string ex_code = 6;
inline void ficc_Exch_Order_Req::clear_ex_code() {
  ex_code_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Req::ex_code() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.ex_code)
  return _internal_ex_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Req::set_ex_code(ArgT0&& arg0, ArgT... args) {
 
 ex_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.ex_code)
}
inline std::string* ficc_Exch_Order_Req::mutable_ex_code() {
  std::string* _s = _internal_mutable_ex_code();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Req.ex_code)
  return _s;
}
inline const std::string& ficc_Exch_Order_Req::_internal_ex_code() const {
  return ex_code_.Get();
}
inline void ficc_Exch_Order_Req::_internal_set_ex_code(const std::string& value) {
  
  ex_code_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::_internal_mutable_ex_code() {
  
  return ex_code_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::release_ex_code() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Req.ex_code)
  return ex_code_.Release();
}
inline void ficc_Exch_Order_Req::set_allocated_ex_code(std::string* ex_code) {
  if (ex_code != nullptr) {
    
  } else {
    
  }
  ex_code_.SetAllocated(ex_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ex_code_.IsDefault()) {
    ex_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Req.ex_code)
}

// string secu_code = 7;
inline void ficc_Exch_Order_Req::clear_secu_code() {
  secu_code_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Req::secu_code() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.secu_code)
  return _internal_secu_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Req::set_secu_code(ArgT0&& arg0, ArgT... args) {
 
 secu_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.secu_code)
}
inline std::string* ficc_Exch_Order_Req::mutable_secu_code() {
  std::string* _s = _internal_mutable_secu_code();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Req.secu_code)
  return _s;
}
inline const std::string& ficc_Exch_Order_Req::_internal_secu_code() const {
  return secu_code_.Get();
}
inline void ficc_Exch_Order_Req::_internal_set_secu_code(const std::string& value) {
  
  secu_code_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::_internal_mutable_secu_code() {
  
  return secu_code_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::release_secu_code() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Req.secu_code)
  return secu_code_.Release();
}
inline void ficc_Exch_Order_Req::set_allocated_secu_code(std::string* secu_code) {
  if (secu_code != nullptr) {
    
  } else {
    
  }
  secu_code_.SetAllocated(secu_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secu_code_.IsDefault()) {
    secu_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Req.secu_code)
}

// string secu_name = 8;
inline void ficc_Exch_Order_Req::clear_secu_name() {
  secu_name_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Req::secu_name() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.secu_name)
  return _internal_secu_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Req::set_secu_name(ArgT0&& arg0, ArgT... args) {
 
 secu_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.secu_name)
}
inline std::string* ficc_Exch_Order_Req::mutable_secu_name() {
  std::string* _s = _internal_mutable_secu_name();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Req.secu_name)
  return _s;
}
inline const std::string& ficc_Exch_Order_Req::_internal_secu_name() const {
  return secu_name_.Get();
}
inline void ficc_Exch_Order_Req::_internal_set_secu_name(const std::string& value) {
  
  secu_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::_internal_mutable_secu_name() {
  
  return secu_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::release_secu_name() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Req.secu_name)
  return secu_name_.Release();
}
inline void ficc_Exch_Order_Req::set_allocated_secu_name(std::string* secu_name) {
  if (secu_name != nullptr) {
    
  } else {
    
  }
  secu_name_.SetAllocated(secu_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secu_name_.IsDefault()) {
    secu_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Req.secu_name)
}

// string order_price_type = 9;
inline void ficc_Exch_Order_Req::clear_order_price_type() {
  order_price_type_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Req::order_price_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.order_price_type)
  return _internal_order_price_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Req::set_order_price_type(ArgT0&& arg0, ArgT... args) {
 
 order_price_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.order_price_type)
}
inline std::string* ficc_Exch_Order_Req::mutable_order_price_type() {
  std::string* _s = _internal_mutable_order_price_type();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Req.order_price_type)
  return _s;
}
inline const std::string& ficc_Exch_Order_Req::_internal_order_price_type() const {
  return order_price_type_.Get();
}
inline void ficc_Exch_Order_Req::_internal_set_order_price_type(const std::string& value) {
  
  order_price_type_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::_internal_mutable_order_price_type() {
  
  return order_price_type_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::release_order_price_type() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Req.order_price_type)
  return order_price_type_.Release();
}
inline void ficc_Exch_Order_Req::set_allocated_order_price_type(std::string* order_price_type) {
  if (order_price_type != nullptr) {
    
  } else {
    
  }
  order_price_type_.SetAllocated(order_price_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_price_type_.IsDefault()) {
    order_price_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Req.order_price_type)
}

// string direction = 10;
inline void ficc_Exch_Order_Req::clear_direction() {
  direction_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Req::direction() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.direction)
  return _internal_direction();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Req::set_direction(ArgT0&& arg0, ArgT... args) {
 
 direction_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.direction)
}
inline std::string* ficc_Exch_Order_Req::mutable_direction() {
  std::string* _s = _internal_mutable_direction();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Req.direction)
  return _s;
}
inline const std::string& ficc_Exch_Order_Req::_internal_direction() const {
  return direction_.Get();
}
inline void ficc_Exch_Order_Req::_internal_set_direction(const std::string& value) {
  
  direction_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::_internal_mutable_direction() {
  
  return direction_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::release_direction() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Req.direction)
  return direction_.Release();
}
inline void ficc_Exch_Order_Req::set_allocated_direction(std::string* direction) {
  if (direction != nullptr) {
    
  } else {
    
  }
  direction_.SetAllocated(direction, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (direction_.IsDefault()) {
    direction_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Req.direction)
}

// string offset_flag = 11;
inline void ficc_Exch_Order_Req::clear_offset_flag() {
  offset_flag_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Req::offset_flag() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.offset_flag)
  return _internal_offset_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Req::set_offset_flag(ArgT0&& arg0, ArgT... args) {
 
 offset_flag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.offset_flag)
}
inline std::string* ficc_Exch_Order_Req::mutable_offset_flag() {
  std::string* _s = _internal_mutable_offset_flag();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Req.offset_flag)
  return _s;
}
inline const std::string& ficc_Exch_Order_Req::_internal_offset_flag() const {
  return offset_flag_.Get();
}
inline void ficc_Exch_Order_Req::_internal_set_offset_flag(const std::string& value) {
  
  offset_flag_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::_internal_mutable_offset_flag() {
  
  return offset_flag_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::release_offset_flag() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Req.offset_flag)
  return offset_flag_.Release();
}
inline void ficc_Exch_Order_Req::set_allocated_offset_flag(std::string* offset_flag) {
  if (offset_flag != nullptr) {
    
  } else {
    
  }
  offset_flag_.SetAllocated(offset_flag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (offset_flag_.IsDefault()) {
    offset_flag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Req.offset_flag)
}

// string hedge_flag = 12;
inline void ficc_Exch_Order_Req::clear_hedge_flag() {
  hedge_flag_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Req::hedge_flag() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.hedge_flag)
  return _internal_hedge_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Req::set_hedge_flag(ArgT0&& arg0, ArgT... args) {
 
 hedge_flag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.hedge_flag)
}
inline std::string* ficc_Exch_Order_Req::mutable_hedge_flag() {
  std::string* _s = _internal_mutable_hedge_flag();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Req.hedge_flag)
  return _s;
}
inline const std::string& ficc_Exch_Order_Req::_internal_hedge_flag() const {
  return hedge_flag_.Get();
}
inline void ficc_Exch_Order_Req::_internal_set_hedge_flag(const std::string& value) {
  
  hedge_flag_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::_internal_mutable_hedge_flag() {
  
  return hedge_flag_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::release_hedge_flag() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Req.hedge_flag)
  return hedge_flag_.Release();
}
inline void ficc_Exch_Order_Req::set_allocated_hedge_flag(std::string* hedge_flag) {
  if (hedge_flag != nullptr) {
    
  } else {
    
  }
  hedge_flag_.SetAllocated(hedge_flag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hedge_flag_.IsDefault()) {
    hedge_flag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Req.hedge_flag)
}

// float price = 13;
inline void ficc_Exch_Order_Req::clear_price() {
  price_ = 0;
}
inline float ficc_Exch_Order_Req::_internal_price() const {
  return price_;
}
inline float ficc_Exch_Order_Req::price() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.price)
  return _internal_price();
}
inline void ficc_Exch_Order_Req::_internal_set_price(float value) {
  
  price_ = value;
}
inline void ficc_Exch_Order_Req::set_price(float value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.price)
}

// uint64 vol = 14;
inline void ficc_Exch_Order_Req::clear_vol() {
  vol_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_Order_Req::_internal_vol() const {
  return vol_;
}
inline uint64_t ficc_Exch_Order_Req::vol() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.vol)
  return _internal_vol();
}
inline void ficc_Exch_Order_Req::_internal_set_vol(uint64_t value) {
  
  vol_ = value;
}
inline void ficc_Exch_Order_Req::set_vol(uint64_t value) {
  _internal_set_vol(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.vol)
}

// string time_cond = 15;
inline void ficc_Exch_Order_Req::clear_time_cond() {
  time_cond_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Req::time_cond() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.time_cond)
  return _internal_time_cond();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Req::set_time_cond(ArgT0&& arg0, ArgT... args) {
 
 time_cond_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.time_cond)
}
inline std::string* ficc_Exch_Order_Req::mutable_time_cond() {
  std::string* _s = _internal_mutable_time_cond();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Req.time_cond)
  return _s;
}
inline const std::string& ficc_Exch_Order_Req::_internal_time_cond() const {
  return time_cond_.Get();
}
inline void ficc_Exch_Order_Req::_internal_set_time_cond(const std::string& value) {
  
  time_cond_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::_internal_mutable_time_cond() {
  
  return time_cond_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::release_time_cond() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Req.time_cond)
  return time_cond_.Release();
}
inline void ficc_Exch_Order_Req::set_allocated_time_cond(std::string* time_cond) {
  if (time_cond != nullptr) {
    
  } else {
    
  }
  time_cond_.SetAllocated(time_cond, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (time_cond_.IsDefault()) {
    time_cond_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Req.time_cond)
}

// uint64 strategy_code = 16;
inline void ficc_Exch_Order_Req::clear_strategy_code() {
  strategy_code_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_Order_Req::_internal_strategy_code() const {
  return strategy_code_;
}
inline uint64_t ficc_Exch_Order_Req::strategy_code() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.strategy_code)
  return _internal_strategy_code();
}
inline void ficc_Exch_Order_Req::_internal_set_strategy_code(uint64_t value) {
  
  strategy_code_ = value;
}
inline void ficc_Exch_Order_Req::set_strategy_code(uint64_t value) {
  _internal_set_strategy_code(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.strategy_code)
}

// uint32 user_id = 17;
inline void ficc_Exch_Order_Req::clear_user_id() {
  user_id_ = 0u;
}
inline uint32_t ficc_Exch_Order_Req::_internal_user_id() const {
  return user_id_;
}
inline uint32_t ficc_Exch_Order_Req::user_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.user_id)
  return _internal_user_id();
}
inline void ficc_Exch_Order_Req::_internal_set_user_id(uint32_t value) {
  
  user_id_ = value;
}
inline void ficc_Exch_Order_Req::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.user_id)
}

// string seat_order_id = 18;
inline void ficc_Exch_Order_Req::clear_seat_order_id() {
  seat_order_id_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Req::seat_order_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.seat_order_id)
  return _internal_seat_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Req::set_seat_order_id(ArgT0&& arg0, ArgT... args) {
 
 seat_order_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.seat_order_id)
}
inline std::string* ficc_Exch_Order_Req::mutable_seat_order_id() {
  std::string* _s = _internal_mutable_seat_order_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Req.seat_order_id)
  return _s;
}
inline const std::string& ficc_Exch_Order_Req::_internal_seat_order_id() const {
  return seat_order_id_.Get();
}
inline void ficc_Exch_Order_Req::_internal_set_seat_order_id(const std::string& value) {
  
  seat_order_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::_internal_mutable_seat_order_id() {
  
  return seat_order_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::release_seat_order_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Req.seat_order_id)
  return seat_order_id_.Release();
}
inline void ficc_Exch_Order_Req::set_allocated_seat_order_id(std::string* seat_order_id) {
  if (seat_order_id != nullptr) {
    
  } else {
    
  }
  seat_order_id_.SetAllocated(seat_order_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (seat_order_id_.IsDefault()) {
    seat_order_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Req.seat_order_id)
}

// string purchase_way = 19;
inline void ficc_Exch_Order_Req::clear_purchase_way() {
  purchase_way_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Req::purchase_way() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.purchase_way)
  return _internal_purchase_way();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Req::set_purchase_way(ArgT0&& arg0, ArgT... args) {
 
 purchase_way_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.purchase_way)
}
inline std::string* ficc_Exch_Order_Req::mutable_purchase_way() {
  std::string* _s = _internal_mutable_purchase_way();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Req.purchase_way)
  return _s;
}
inline const std::string& ficc_Exch_Order_Req::_internal_purchase_way() const {
  return purchase_way_.Get();
}
inline void ficc_Exch_Order_Req::_internal_set_purchase_way(const std::string& value) {
  
  purchase_way_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::_internal_mutable_purchase_way() {
  
  return purchase_way_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::release_purchase_way() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Req.purchase_way)
  return purchase_way_.Release();
}
inline void ficc_Exch_Order_Req::set_allocated_purchase_way(std::string* purchase_way) {
  if (purchase_way != nullptr) {
    
  } else {
    
  }
  purchase_way_.SetAllocated(purchase_way, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (purchase_way_.IsDefault()) {
    purchase_way_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Req.purchase_way)
}

// string text = 20;
inline void ficc_Exch_Order_Req::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Req::text() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Req::set_text(ArgT0&& arg0, ArgT... args) {
 
 text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.text)
}
inline std::string* ficc_Exch_Order_Req::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Req.text)
  return _s;
}
inline const std::string& ficc_Exch_Order_Req::_internal_text() const {
  return text_.Get();
}
inline void ficc_Exch_Order_Req::_internal_set_text(const std::string& value) {
  
  text_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::_internal_mutable_text() {
  
  return text_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::release_text() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Req.text)
  return text_.Release();
}
inline void ficc_Exch_Order_Req::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault()) {
    text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Req.text)
}

// float ytm = 21;
inline void ficc_Exch_Order_Req::clear_ytm() {
  ytm_ = 0;
}
inline float ficc_Exch_Order_Req::_internal_ytm() const {
  return ytm_;
}
inline float ficc_Exch_Order_Req::ytm() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.ytm)
  return _internal_ytm();
}
inline void ficc_Exch_Order_Req::_internal_set_ytm(float value) {
  
  ytm_ = value;
}
inline void ficc_Exch_Order_Req::set_ytm(float value) {
  _internal_set_ytm(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.ytm)
}

// float strike_yeild = 22;
inline void ficc_Exch_Order_Req::clear_strike_yeild() {
  strike_yeild_ = 0;
}
inline float ficc_Exch_Order_Req::_internal_strike_yeild() const {
  return strike_yeild_;
}
inline float ficc_Exch_Order_Req::strike_yeild() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.strike_yeild)
  return _internal_strike_yeild();
}
inline void ficc_Exch_Order_Req::_internal_set_strike_yeild(float value) {
  
  strike_yeild_ = value;
}
inline void ficc_Exch_Order_Req::set_strike_yeild(float value) {
  _internal_set_strike_yeild(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.strike_yeild)
}

// uint64 quote_type = 23;
inline void ficc_Exch_Order_Req::clear_quote_type() {
  quote_type_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_Order_Req::_internal_quote_type() const {
  return quote_type_;
}
inline uint64_t ficc_Exch_Order_Req::quote_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.quote_type)
  return _internal_quote_type();
}
inline void ficc_Exch_Order_Req::_internal_set_quote_type(uint64_t value) {
  
  quote_type_ = value;
}
inline void ficc_Exch_Order_Req::set_quote_type(uint64_t value) {
  _internal_set_quote_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.quote_type)
}

// uint64 max_floor = 24;
inline void ficc_Exch_Order_Req::clear_max_floor() {
  max_floor_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_Order_Req::_internal_max_floor() const {
  return max_floor_;
}
inline uint64_t ficc_Exch_Order_Req::max_floor() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.max_floor)
  return _internal_max_floor();
}
inline void ficc_Exch_Order_Req::_internal_set_max_floor(uint64_t value) {
  
  max_floor_ = value;
}
inline void ficc_Exch_Order_Req::set_max_floor(uint64_t value) {
  _internal_set_max_floor(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.max_floor)
}

// uint64 min_tick_size = 25;
inline void ficc_Exch_Order_Req::clear_min_tick_size() {
  min_tick_size_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_Order_Req::_internal_min_tick_size() const {
  return min_tick_size_;
}
inline uint64_t ficc_Exch_Order_Req::min_tick_size() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.min_tick_size)
  return _internal_min_tick_size();
}
inline void ficc_Exch_Order_Req::_internal_set_min_tick_size(uint64_t value) {
  
  min_tick_size_ = value;
}
inline void ficc_Exch_Order_Req::set_min_tick_size(uint64_t value) {
  _internal_set_min_tick_size(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.min_tick_size)
}

// uint64 settle_type = 26;
inline void ficc_Exch_Order_Req::clear_settle_type() {
  settle_type_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_Order_Req::_internal_settle_type() const {
  return settle_type_;
}
inline uint64_t ficc_Exch_Order_Req::settle_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.settle_type)
  return _internal_settle_type();
}
inline void ficc_Exch_Order_Req::_internal_set_settle_type(uint64_t value) {
  
  settle_type_ = value;
}
inline void ficc_Exch_Order_Req::set_settle_type(uint64_t value) {
  _internal_set_settle_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.settle_type)
}

// uint64 match_type = 27;
inline void ficc_Exch_Order_Req::clear_match_type() {
  match_type_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_Order_Req::_internal_match_type() const {
  return match_type_;
}
inline uint64_t ficc_Exch_Order_Req::match_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.match_type)
  return _internal_match_type();
}
inline void ficc_Exch_Order_Req::_internal_set_match_type(uint64_t value) {
  
  match_type_ = value;
}
inline void ficc_Exch_Order_Req::set_match_type(uint64_t value) {
  _internal_set_match_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.match_type)
}

// uint64 delivery_type = 28;
inline void ficc_Exch_Order_Req::clear_delivery_type() {
  delivery_type_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_Order_Req::_internal_delivery_type() const {
  return delivery_type_;
}
inline uint64_t ficc_Exch_Order_Req::delivery_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.delivery_type)
  return _internal_delivery_type();
}
inline void ficc_Exch_Order_Req::_internal_set_delivery_type(uint64_t value) {
  
  delivery_type_ = value;
}
inline void ficc_Exch_Order_Req::set_delivery_type(uint64_t value) {
  _internal_set_delivery_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.delivery_type)
}

// uint64 clearing_method = 29;
inline void ficc_Exch_Order_Req::clear_clearing_method() {
  clearing_method_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_Order_Req::_internal_clearing_method() const {
  return clearing_method_;
}
inline uint64_t ficc_Exch_Order_Req::clearing_method() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.clearing_method)
  return _internal_clearing_method();
}
inline void ficc_Exch_Order_Req::_internal_set_clearing_method(uint64_t value) {
  
  clearing_method_ = value;
}
inline void ficc_Exch_Order_Req::set_clearing_method(uint64_t value) {
  _internal_set_clearing_method(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.clearing_method)
}

// string quote_id = 30;
inline void ficc_Exch_Order_Req::clear_quote_id() {
  quote_id_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Req::quote_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.quote_id)
  return _internal_quote_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Req::set_quote_id(ArgT0&& arg0, ArgT... args) {
 
 quote_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.quote_id)
}
inline std::string* ficc_Exch_Order_Req::mutable_quote_id() {
  std::string* _s = _internal_mutable_quote_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Req.quote_id)
  return _s;
}
inline const std::string& ficc_Exch_Order_Req::_internal_quote_id() const {
  return quote_id_.Get();
}
inline void ficc_Exch_Order_Req::_internal_set_quote_id(const std::string& value) {
  
  quote_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::_internal_mutable_quote_id() {
  
  return quote_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::release_quote_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Req.quote_id)
  return quote_id_.Release();
}
inline void ficc_Exch_Order_Req::set_allocated_quote_id(std::string* quote_id) {
  if (quote_id != nullptr) {
    
  } else {
    
  }
  quote_id_.SetAllocated(quote_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (quote_id_.IsDefault()) {
    quote_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Req.quote_id)
}

// string valid_until_time = 31;
inline void ficc_Exch_Order_Req::clear_valid_until_time() {
  valid_until_time_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Req::valid_until_time() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.valid_until_time)
  return _internal_valid_until_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Req::set_valid_until_time(ArgT0&& arg0, ArgT... args) {
 
 valid_until_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.valid_until_time)
}
inline std::string* ficc_Exch_Order_Req::mutable_valid_until_time() {
  std::string* _s = _internal_mutable_valid_until_time();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Req.valid_until_time)
  return _s;
}
inline const std::string& ficc_Exch_Order_Req::_internal_valid_until_time() const {
  return valid_until_time_.Get();
}
inline void ficc_Exch_Order_Req::_internal_set_valid_until_time(const std::string& value) {
  
  valid_until_time_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::_internal_mutable_valid_until_time() {
  
  return valid_until_time_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::release_valid_until_time() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Req.valid_until_time)
  return valid_until_time_.Release();
}
inline void ficc_Exch_Order_Req::set_allocated_valid_until_time(std::string* valid_until_time) {
  if (valid_until_time != nullptr) {
    
  } else {
    
  }
  valid_until_time_.SetAllocated(valid_until_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (valid_until_time_.IsDefault()) {
    valid_until_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Req.valid_until_time)
}

// string mdentry_time = 32;
inline void ficc_Exch_Order_Req::clear_mdentry_time() {
  mdentry_time_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Req::mdentry_time() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.mdentry_time)
  return _internal_mdentry_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Req::set_mdentry_time(ArgT0&& arg0, ArgT... args) {
 
 mdentry_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.mdentry_time)
}
inline std::string* ficc_Exch_Order_Req::mutable_mdentry_time() {
  std::string* _s = _internal_mutable_mdentry_time();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Req.mdentry_time)
  return _s;
}
inline const std::string& ficc_Exch_Order_Req::_internal_mdentry_time() const {
  return mdentry_time_.Get();
}
inline void ficc_Exch_Order_Req::_internal_set_mdentry_time(const std::string& value) {
  
  mdentry_time_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::_internal_mutable_mdentry_time() {
  
  return mdentry_time_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::release_mdentry_time() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Req.mdentry_time)
  return mdentry_time_.Release();
}
inline void ficc_Exch_Order_Req::set_allocated_mdentry_time(std::string* mdentry_time) {
  if (mdentry_time != nullptr) {
    
  } else {
    
  }
  mdentry_time_.SetAllocated(mdentry_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mdentry_time_.IsDefault()) {
    mdentry_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Req.mdentry_time)
}

// string client_ref_id = 33;
inline void ficc_Exch_Order_Req::clear_client_ref_id() {
  client_ref_id_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Req::client_ref_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.client_ref_id)
  return _internal_client_ref_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Req::set_client_ref_id(ArgT0&& arg0, ArgT... args) {
 
 client_ref_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.client_ref_id)
}
inline std::string* ficc_Exch_Order_Req::mutable_client_ref_id() {
  std::string* _s = _internal_mutable_client_ref_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Req.client_ref_id)
  return _s;
}
inline const std::string& ficc_Exch_Order_Req::_internal_client_ref_id() const {
  return client_ref_id_.Get();
}
inline void ficc_Exch_Order_Req::_internal_set_client_ref_id(const std::string& value) {
  
  client_ref_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::_internal_mutable_client_ref_id() {
  
  return client_ref_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::release_client_ref_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Req.client_ref_id)
  return client_ref_id_.Release();
}
inline void ficc_Exch_Order_Req::set_allocated_client_ref_id(std::string* client_ref_id) {
  if (client_ref_id != nullptr) {
    
  } else {
    
  }
  client_ref_id_.SetAllocated(client_ref_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_ref_id_.IsDefault()) {
    client_ref_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Req.client_ref_id)
}

// uint64 routing_type = 34;
inline void ficc_Exch_Order_Req::clear_routing_type() {
  routing_type_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_Order_Req::_internal_routing_type() const {
  return routing_type_;
}
inline uint64_t ficc_Exch_Order_Req::routing_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.routing_type)
  return _internal_routing_type();
}
inline void ficc_Exch_Order_Req::_internal_set_routing_type(uint64_t value) {
  
  routing_type_ = value;
}
inline void ficc_Exch_Order_Req::set_routing_type(uint64_t value) {
  _internal_set_routing_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.routing_type)
}

// uint64 market_indicator = 35;
inline void ficc_Exch_Order_Req::clear_market_indicator() {
  market_indicator_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_Order_Req::_internal_market_indicator() const {
  return market_indicator_;
}
inline uint64_t ficc_Exch_Order_Req::market_indicator() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.market_indicator)
  return _internal_market_indicator();
}
inline void ficc_Exch_Order_Req::_internal_set_market_indicator(uint64_t value) {
  
  market_indicator_ = value;
}
inline void ficc_Exch_Order_Req::set_market_indicator(uint64_t value) {
  _internal_set_market_indicator(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.market_indicator)
}

// uint64 realtime_undertake_flag = 36;
inline void ficc_Exch_Order_Req::clear_realtime_undertake_flag() {
  realtime_undertake_flag_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_Order_Req::_internal_realtime_undertake_flag() const {
  return realtime_undertake_flag_;
}
inline uint64_t ficc_Exch_Order_Req::realtime_undertake_flag() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.realtime_undertake_flag)
  return _internal_realtime_undertake_flag();
}
inline void ficc_Exch_Order_Req::_internal_set_realtime_undertake_flag(uint64_t value) {
  
  realtime_undertake_flag_ = value;
}
inline void ficc_Exch_Order_Req::set_realtime_undertake_flag(uint64_t value) {
  _internal_set_realtime_undertake_flag(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.realtime_undertake_flag)
}

// uint64 subject_party_type = 37;
inline void ficc_Exch_Order_Req::clear_subject_party_type() {
  subject_party_type_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_Order_Req::_internal_subject_party_type() const {
  return subject_party_type_;
}
inline uint64_t ficc_Exch_Order_Req::subject_party_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.subject_party_type)
  return _internal_subject_party_type();
}
inline void ficc_Exch_Order_Req::_internal_set_subject_party_type(uint64_t value) {
  
  subject_party_type_ = value;
}
inline void ficc_Exch_Order_Req::set_subject_party_type(uint64_t value) {
  _internal_set_subject_party_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.subject_party_type)
}

// string order_inner_id = 38;
inline void ficc_Exch_Order_Req::clear_order_inner_id() {
  order_inner_id_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Req::order_inner_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.order_inner_id)
  return _internal_order_inner_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Req::set_order_inner_id(ArgT0&& arg0, ArgT... args) {
 
 order_inner_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.order_inner_id)
}
inline std::string* ficc_Exch_Order_Req::mutable_order_inner_id() {
  std::string* _s = _internal_mutable_order_inner_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Req.order_inner_id)
  return _s;
}
inline const std::string& ficc_Exch_Order_Req::_internal_order_inner_id() const {
  return order_inner_id_.Get();
}
inline void ficc_Exch_Order_Req::_internal_set_order_inner_id(const std::string& value) {
  
  order_inner_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::_internal_mutable_order_inner_id() {
  
  return order_inner_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::release_order_inner_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Req.order_inner_id)
  return order_inner_id_.Release();
}
inline void ficc_Exch_Order_Req::set_allocated_order_inner_id(std::string* order_inner_id) {
  if (order_inner_id != nullptr) {
    
  } else {
    
  }
  order_inner_id_.SetAllocated(order_inner_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_inner_id_.IsDefault()) {
    order_inner_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Req.order_inner_id)
}

// string order_sys_id = 39;
inline void ficc_Exch_Order_Req::clear_order_sys_id() {
  order_sys_id_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Req::order_sys_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.order_sys_id)
  return _internal_order_sys_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Req::set_order_sys_id(ArgT0&& arg0, ArgT... args) {
 
 order_sys_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.order_sys_id)
}
inline std::string* ficc_Exch_Order_Req::mutable_order_sys_id() {
  std::string* _s = _internal_mutable_order_sys_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Req.order_sys_id)
  return _s;
}
inline const std::string& ficc_Exch_Order_Req::_internal_order_sys_id() const {
  return order_sys_id_.Get();
}
inline void ficc_Exch_Order_Req::_internal_set_order_sys_id(const std::string& value) {
  
  order_sys_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::_internal_mutable_order_sys_id() {
  
  return order_sys_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::release_order_sys_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Req.order_sys_id)
  return order_sys_id_.Release();
}
inline void ficc_Exch_Order_Req::set_allocated_order_sys_id(std::string* order_sys_id) {
  if (order_sys_id != nullptr) {
    
  } else {
    
  }
  order_sys_id_.SetAllocated(order_sys_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_sys_id_.IsDefault()) {
    order_sys_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Req.order_sys_id)
}

// string insert_time = 40;
inline void ficc_Exch_Order_Req::clear_insert_time() {
  insert_time_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Req::insert_time() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.insert_time)
  return _internal_insert_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Req::set_insert_time(ArgT0&& arg0, ArgT... args) {
 
 insert_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.insert_time)
}
inline std::string* ficc_Exch_Order_Req::mutable_insert_time() {
  std::string* _s = _internal_mutable_insert_time();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Req.insert_time)
  return _s;
}
inline const std::string& ficc_Exch_Order_Req::_internal_insert_time() const {
  return insert_time_.Get();
}
inline void ficc_Exch_Order_Req::_internal_set_insert_time(const std::string& value) {
  
  insert_time_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::_internal_mutable_insert_time() {
  
  return insert_time_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::release_insert_time() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Req.insert_time)
  return insert_time_.Release();
}
inline void ficc_Exch_Order_Req::set_allocated_insert_time(std::string* insert_time) {
  if (insert_time != nullptr) {
    
  } else {
    
  }
  insert_time_.SetAllocated(insert_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (insert_time_.IsDefault()) {
    insert_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Req.insert_time)
}

// string order_source = 41;
inline void ficc_Exch_Order_Req::clear_order_source() {
  order_source_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Req::order_source() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.order_source)
  return _internal_order_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Req::set_order_source(ArgT0&& arg0, ArgT... args) {
 
 order_source_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.order_source)
}
inline std::string* ficc_Exch_Order_Req::mutable_order_source() {
  std::string* _s = _internal_mutable_order_source();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Req.order_source)
  return _s;
}
inline const std::string& ficc_Exch_Order_Req::_internal_order_source() const {
  return order_source_.Get();
}
inline void ficc_Exch_Order_Req::_internal_set_order_source(const std::string& value) {
  
  order_source_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::_internal_mutable_order_source() {
  
  return order_source_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::release_order_source() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Req.order_source)
  return order_source_.Release();
}
inline void ficc_Exch_Order_Req::set_allocated_order_source(std::string* order_source) {
  if (order_source != nullptr) {
    
  } else {
    
  }
  order_source_.SetAllocated(order_source, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_source_.IsDefault()) {
    order_source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Req.order_source)
}

// string reserver1 = 42;
inline void ficc_Exch_Order_Req::clear_reserver1() {
  reserver1_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Req::reserver1() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.reserver1)
  return _internal_reserver1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Req::set_reserver1(ArgT0&& arg0, ArgT... args) {
 
 reserver1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.reserver1)
}
inline std::string* ficc_Exch_Order_Req::mutable_reserver1() {
  std::string* _s = _internal_mutable_reserver1();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Req.reserver1)
  return _s;
}
inline const std::string& ficc_Exch_Order_Req::_internal_reserver1() const {
  return reserver1_.Get();
}
inline void ficc_Exch_Order_Req::_internal_set_reserver1(const std::string& value) {
  
  reserver1_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::_internal_mutable_reserver1() {
  
  return reserver1_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::release_reserver1() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Req.reserver1)
  return reserver1_.Release();
}
inline void ficc_Exch_Order_Req::set_allocated_reserver1(std::string* reserver1) {
  if (reserver1 != nullptr) {
    
  } else {
    
  }
  reserver1_.SetAllocated(reserver1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reserver1_.IsDefault()) {
    reserver1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Req.reserver1)
}

// string reserver2 = 43;
inline void ficc_Exch_Order_Req::clear_reserver2() {
  reserver2_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Req::reserver2() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.reserver2)
  return _internal_reserver2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Req::set_reserver2(ArgT0&& arg0, ArgT... args) {
 
 reserver2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.reserver2)
}
inline std::string* ficc_Exch_Order_Req::mutable_reserver2() {
  std::string* _s = _internal_mutable_reserver2();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Req.reserver2)
  return _s;
}
inline const std::string& ficc_Exch_Order_Req::_internal_reserver2() const {
  return reserver2_.Get();
}
inline void ficc_Exch_Order_Req::_internal_set_reserver2(const std::string& value) {
  
  reserver2_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::_internal_mutable_reserver2() {
  
  return reserver2_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::release_reserver2() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Req.reserver2)
  return reserver2_.Release();
}
inline void ficc_Exch_Order_Req::set_allocated_reserver2(std::string* reserver2) {
  if (reserver2 != nullptr) {
    
  } else {
    
  }
  reserver2_.SetAllocated(reserver2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reserver2_.IsDefault()) {
    reserver2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Req.reserver2)
}

// string reserver3 = 44;
inline void ficc_Exch_Order_Req::clear_reserver3() {
  reserver3_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Req::reserver3() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.reserver3)
  return _internal_reserver3();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Req::set_reserver3(ArgT0&& arg0, ArgT... args) {
 
 reserver3_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.reserver3)
}
inline std::string* ficc_Exch_Order_Req::mutable_reserver3() {
  std::string* _s = _internal_mutable_reserver3();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Req.reserver3)
  return _s;
}
inline const std::string& ficc_Exch_Order_Req::_internal_reserver3() const {
  return reserver3_.Get();
}
inline void ficc_Exch_Order_Req::_internal_set_reserver3(const std::string& value) {
  
  reserver3_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::_internal_mutable_reserver3() {
  
  return reserver3_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::release_reserver3() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Req.reserver3)
  return reserver3_.Release();
}
inline void ficc_Exch_Order_Req::set_allocated_reserver3(std::string* reserver3) {
  if (reserver3 != nullptr) {
    
  } else {
    
  }
  reserver3_.SetAllocated(reserver3, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reserver3_.IsDefault()) {
    reserver3_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Req.reserver3)
}

// string reserver4 = 45;
inline void ficc_Exch_Order_Req::clear_reserver4() {
  reserver4_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Req::reserver4() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.reserver4)
  return _internal_reserver4();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Req::set_reserver4(ArgT0&& arg0, ArgT... args) {
 
 reserver4_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.reserver4)
}
inline std::string* ficc_Exch_Order_Req::mutable_reserver4() {
  std::string* _s = _internal_mutable_reserver4();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Req.reserver4)
  return _s;
}
inline const std::string& ficc_Exch_Order_Req::_internal_reserver4() const {
  return reserver4_.Get();
}
inline void ficc_Exch_Order_Req::_internal_set_reserver4(const std::string& value) {
  
  reserver4_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::_internal_mutable_reserver4() {
  
  return reserver4_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::release_reserver4() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Req.reserver4)
  return reserver4_.Release();
}
inline void ficc_Exch_Order_Req::set_allocated_reserver4(std::string* reserver4) {
  if (reserver4 != nullptr) {
    
  } else {
    
  }
  reserver4_.SetAllocated(reserver4, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reserver4_.IsDefault()) {
    reserver4_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Req.reserver4)
}

// string maturity = 46;
inline void ficc_Exch_Order_Req::clear_maturity() {
  maturity_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Req::maturity() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Req.maturity)
  return _internal_maturity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Req::set_maturity(ArgT0&& arg0, ArgT... args) {
 
 maturity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Req.maturity)
}
inline std::string* ficc_Exch_Order_Req::mutable_maturity() {
  std::string* _s = _internal_mutable_maturity();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Req.maturity)
  return _s;
}
inline const std::string& ficc_Exch_Order_Req::_internal_maturity() const {
  return maturity_.Get();
}
inline void ficc_Exch_Order_Req::_internal_set_maturity(const std::string& value) {
  
  maturity_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::_internal_mutable_maturity() {
  
  return maturity_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Req::release_maturity() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Req.maturity)
  return maturity_.Release();
}
inline void ficc_Exch_Order_Req::set_allocated_maturity(std::string* maturity) {
  if (maturity != nullptr) {
    
  } else {
    
  }
  maturity_.SetAllocated(maturity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (maturity_.IsDefault()) {
    maturity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Req.maturity)
}

// -------------------------------------------------------------------

// ficc_Exch_Order_Rtn

// .message_head.head head = 1;
inline bool ficc_Exch_Order_Rtn::_internal_has_head() const {
  return this != internal_default_instance() && head_ != nullptr;
}
inline bool ficc_Exch_Order_Rtn::has_head() const {
  return _internal_has_head();
}
inline const ::message_head::head& ficc_Exch_Order_Rtn::_internal_head() const {
  const ::message_head::head* p = head_;
  return p != nullptr ? *p : reinterpret_cast<const ::message_head::head&>(
      ::message_head::_head_default_instance_);
}
inline const ::message_head::head& ficc_Exch_Order_Rtn::head() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Rtn.head)
  return _internal_head();
}
inline void ficc_Exch_Order_Rtn::unsafe_arena_set_allocated_head(
    ::message_head::head* head) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ficc_message.ficc_Exch_Order_Rtn.head)
}
inline ::message_head::head* ficc_Exch_Order_Rtn::release_head() {
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message_head::head* ficc_Exch_Order_Rtn::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Rtn.head)
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
  return temp;
}
inline ::message_head::head* ficc_Exch_Order_Rtn::_internal_mutable_head() {
  
  if (head_ == nullptr) {
    auto* p = CreateMaybeMessage<::message_head::head>(GetArenaForAllocation());
    head_ = p;
  }
  return head_;
}
inline ::message_head::head* ficc_Exch_Order_Rtn::mutable_head() {
  ::message_head::head* _msg = _internal_mutable_head();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Rtn.head)
  return _msg;
}
inline void ficc_Exch_Order_Rtn::set_allocated_head(::message_head::head* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head));
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Rtn.head)
}

// string order_status = 2;
inline void ficc_Exch_Order_Rtn::clear_order_status() {
  order_status_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Rtn::order_status() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Rtn.order_status)
  return _internal_order_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Rtn::set_order_status(ArgT0&& arg0, ArgT... args) {
 
 order_status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Rtn.order_status)
}
inline std::string* ficc_Exch_Order_Rtn::mutable_order_status() {
  std::string* _s = _internal_mutable_order_status();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Rtn.order_status)
  return _s;
}
inline const std::string& ficc_Exch_Order_Rtn::_internal_order_status() const {
  return order_status_.Get();
}
inline void ficc_Exch_Order_Rtn::_internal_set_order_status(const std::string& value) {
  
  order_status_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Rtn::_internal_mutable_order_status() {
  
  return order_status_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Rtn::release_order_status() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Rtn.order_status)
  return order_status_.Release();
}
inline void ficc_Exch_Order_Rtn::set_allocated_order_status(std::string* order_status) {
  if (order_status != nullptr) {
    
  } else {
    
  }
  order_status_.SetAllocated(order_status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_status_.IsDefault()) {
    order_status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Rtn.order_status)
}

// string seat_order_id = 3;
inline void ficc_Exch_Order_Rtn::clear_seat_order_id() {
  seat_order_id_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Rtn::seat_order_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Rtn.seat_order_id)
  return _internal_seat_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Rtn::set_seat_order_id(ArgT0&& arg0, ArgT... args) {
 
 seat_order_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Rtn.seat_order_id)
}
inline std::string* ficc_Exch_Order_Rtn::mutable_seat_order_id() {
  std::string* _s = _internal_mutable_seat_order_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Rtn.seat_order_id)
  return _s;
}
inline const std::string& ficc_Exch_Order_Rtn::_internal_seat_order_id() const {
  return seat_order_id_.Get();
}
inline void ficc_Exch_Order_Rtn::_internal_set_seat_order_id(const std::string& value) {
  
  seat_order_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Rtn::_internal_mutable_seat_order_id() {
  
  return seat_order_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Rtn::release_seat_order_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Rtn.seat_order_id)
  return seat_order_id_.Release();
}
inline void ficc_Exch_Order_Rtn::set_allocated_seat_order_id(std::string* seat_order_id) {
  if (seat_order_id != nullptr) {
    
  } else {
    
  }
  seat_order_id_.SetAllocated(seat_order_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (seat_order_id_.IsDefault()) {
    seat_order_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Rtn.seat_order_id)
}

// string order_sys_id = 4;
inline void ficc_Exch_Order_Rtn::clear_order_sys_id() {
  order_sys_id_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Rtn::order_sys_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Rtn.order_sys_id)
  return _internal_order_sys_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Rtn::set_order_sys_id(ArgT0&& arg0, ArgT... args) {
 
 order_sys_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Rtn.order_sys_id)
}
inline std::string* ficc_Exch_Order_Rtn::mutable_order_sys_id() {
  std::string* _s = _internal_mutable_order_sys_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Rtn.order_sys_id)
  return _s;
}
inline const std::string& ficc_Exch_Order_Rtn::_internal_order_sys_id() const {
  return order_sys_id_.Get();
}
inline void ficc_Exch_Order_Rtn::_internal_set_order_sys_id(const std::string& value) {
  
  order_sys_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Rtn::_internal_mutable_order_sys_id() {
  
  return order_sys_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Rtn::release_order_sys_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Rtn.order_sys_id)
  return order_sys_id_.Release();
}
inline void ficc_Exch_Order_Rtn::set_allocated_order_sys_id(std::string* order_sys_id) {
  if (order_sys_id != nullptr) {
    
  } else {
    
  }
  order_sys_id_.SetAllocated(order_sys_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_sys_id_.IsDefault()) {
    order_sys_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Rtn.order_sys_id)
}

// string insert_date = 5;
inline void ficc_Exch_Order_Rtn::clear_insert_date() {
  insert_date_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Rtn::insert_date() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Rtn.insert_date)
  return _internal_insert_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Rtn::set_insert_date(ArgT0&& arg0, ArgT... args) {
 
 insert_date_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Rtn.insert_date)
}
inline std::string* ficc_Exch_Order_Rtn::mutable_insert_date() {
  std::string* _s = _internal_mutable_insert_date();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Rtn.insert_date)
  return _s;
}
inline const std::string& ficc_Exch_Order_Rtn::_internal_insert_date() const {
  return insert_date_.Get();
}
inline void ficc_Exch_Order_Rtn::_internal_set_insert_date(const std::string& value) {
  
  insert_date_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Rtn::_internal_mutable_insert_date() {
  
  return insert_date_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Rtn::release_insert_date() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Rtn.insert_date)
  return insert_date_.Release();
}
inline void ficc_Exch_Order_Rtn::set_allocated_insert_date(std::string* insert_date) {
  if (insert_date != nullptr) {
    
  } else {
    
  }
  insert_date_.SetAllocated(insert_date, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (insert_date_.IsDefault()) {
    insert_date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Rtn.insert_date)
}

// string update_time = 6;
inline void ficc_Exch_Order_Rtn::clear_update_time() {
  update_time_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Rtn::update_time() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Rtn.update_time)
  return _internal_update_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Rtn::set_update_time(ArgT0&& arg0, ArgT... args) {
 
 update_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Rtn.update_time)
}
inline std::string* ficc_Exch_Order_Rtn::mutable_update_time() {
  std::string* _s = _internal_mutable_update_time();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Rtn.update_time)
  return _s;
}
inline const std::string& ficc_Exch_Order_Rtn::_internal_update_time() const {
  return update_time_.Get();
}
inline void ficc_Exch_Order_Rtn::_internal_set_update_time(const std::string& value) {
  
  update_time_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Rtn::_internal_mutable_update_time() {
  
  return update_time_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Rtn::release_update_time() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Rtn.update_time)
  return update_time_.Release();
}
inline void ficc_Exch_Order_Rtn::set_allocated_update_time(std::string* update_time) {
  if (update_time != nullptr) {
    
  } else {
    
  }
  update_time_.SetAllocated(update_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (update_time_.IsDefault()) {
    update_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Rtn.update_time)
}

// string secu_code = 7;
inline void ficc_Exch_Order_Rtn::clear_secu_code() {
  secu_code_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Rtn::secu_code() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Rtn.secu_code)
  return _internal_secu_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Rtn::set_secu_code(ArgT0&& arg0, ArgT... args) {
 
 secu_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Rtn.secu_code)
}
inline std::string* ficc_Exch_Order_Rtn::mutable_secu_code() {
  std::string* _s = _internal_mutable_secu_code();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Rtn.secu_code)
  return _s;
}
inline const std::string& ficc_Exch_Order_Rtn::_internal_secu_code() const {
  return secu_code_.Get();
}
inline void ficc_Exch_Order_Rtn::_internal_set_secu_code(const std::string& value) {
  
  secu_code_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Rtn::_internal_mutable_secu_code() {
  
  return secu_code_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Rtn::release_secu_code() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Rtn.secu_code)
  return secu_code_.Release();
}
inline void ficc_Exch_Order_Rtn::set_allocated_secu_code(std::string* secu_code) {
  if (secu_code != nullptr) {
    
  } else {
    
  }
  secu_code_.SetAllocated(secu_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secu_code_.IsDefault()) {
    secu_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Rtn.secu_code)
}

// uint64 max_floor = 8;
inline void ficc_Exch_Order_Rtn::clear_max_floor() {
  max_floor_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_Order_Rtn::_internal_max_floor() const {
  return max_floor_;
}
inline uint64_t ficc_Exch_Order_Rtn::max_floor() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Rtn.max_floor)
  return _internal_max_floor();
}
inline void ficc_Exch_Order_Rtn::_internal_set_max_floor(uint64_t value) {
  
  max_floor_ = value;
}
inline void ficc_Exch_Order_Rtn::set_max_floor(uint64_t value) {
  _internal_set_max_floor(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Rtn.max_floor)
}

// uint64 vol = 9;
inline void ficc_Exch_Order_Rtn::clear_vol() {
  vol_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_Order_Rtn::_internal_vol() const {
  return vol_;
}
inline uint64_t ficc_Exch_Order_Rtn::vol() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Rtn.vol)
  return _internal_vol();
}
inline void ficc_Exch_Order_Rtn::_internal_set_vol(uint64_t value) {
  
  vol_ = value;
}
inline void ficc_Exch_Order_Rtn::set_vol(uint64_t value) {
  _internal_set_vol(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Rtn.vol)
}

// uint64 vol_traded = 10;
inline void ficc_Exch_Order_Rtn::clear_vol_traded() {
  vol_traded_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_Order_Rtn::_internal_vol_traded() const {
  return vol_traded_;
}
inline uint64_t ficc_Exch_Order_Rtn::vol_traded() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Rtn.vol_traded)
  return _internal_vol_traded();
}
inline void ficc_Exch_Order_Rtn::_internal_set_vol_traded(uint64_t value) {
  
  vol_traded_ = value;
}
inline void ficc_Exch_Order_Rtn::set_vol_traded(uint64_t value) {
  _internal_set_vol_traded(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Rtn.vol_traded)
}

// uint64 vol_total = 11;
inline void ficc_Exch_Order_Rtn::clear_vol_total() {
  vol_total_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_Order_Rtn::_internal_vol_total() const {
  return vol_total_;
}
inline uint64_t ficc_Exch_Order_Rtn::vol_total() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Rtn.vol_total)
  return _internal_vol_total();
}
inline void ficc_Exch_Order_Rtn::_internal_set_vol_total(uint64_t value) {
  
  vol_total_ = value;
}
inline void ficc_Exch_Order_Rtn::set_vol_total(uint64_t value) {
  _internal_set_vol_total(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Rtn.vol_total)
}

// float price = 12;
inline void ficc_Exch_Order_Rtn::clear_price() {
  price_ = 0;
}
inline float ficc_Exch_Order_Rtn::_internal_price() const {
  return price_;
}
inline float ficc_Exch_Order_Rtn::price() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Rtn.price)
  return _internal_price();
}
inline void ficc_Exch_Order_Rtn::_internal_set_price(float value) {
  
  price_ = value;
}
inline void ficc_Exch_Order_Rtn::set_price(float value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Rtn.price)
}

// uint64 legsettl_type = 13;
inline void ficc_Exch_Order_Rtn::clear_legsettl_type() {
  legsettl_type_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_Order_Rtn::_internal_legsettl_type() const {
  return legsettl_type_;
}
inline uint64_t ficc_Exch_Order_Rtn::legsettl_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Rtn.legsettl_type)
  return _internal_legsettl_type();
}
inline void ficc_Exch_Order_Rtn::_internal_set_legsettl_type(uint64_t value) {
  
  legsettl_type_ = value;
}
inline void ficc_Exch_Order_Rtn::set_legsettl_type(uint64_t value) {
  _internal_set_legsettl_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Rtn.legsettl_type)
}

// uint64 delivery_type = 14;
inline void ficc_Exch_Order_Rtn::clear_delivery_type() {
  delivery_type_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_Order_Rtn::_internal_delivery_type() const {
  return delivery_type_;
}
inline uint64_t ficc_Exch_Order_Rtn::delivery_type() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Rtn.delivery_type)
  return _internal_delivery_type();
}
inline void ficc_Exch_Order_Rtn::_internal_set_delivery_type(uint64_t value) {
  
  delivery_type_ = value;
}
inline void ficc_Exch_Order_Rtn::set_delivery_type(uint64_t value) {
  _internal_set_delivery_type(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Rtn.delivery_type)
}

// uint64 clearing_method = 15;
inline void ficc_Exch_Order_Rtn::clear_clearing_method() {
  clearing_method_ = uint64_t{0u};
}
inline uint64_t ficc_Exch_Order_Rtn::_internal_clearing_method() const {
  return clearing_method_;
}
inline uint64_t ficc_Exch_Order_Rtn::clearing_method() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Rtn.clearing_method)
  return _internal_clearing_method();
}
inline void ficc_Exch_Order_Rtn::_internal_set_clearing_method(uint64_t value) {
  
  clearing_method_ = value;
}
inline void ficc_Exch_Order_Rtn::set_clearing_method(uint64_t value) {
  _internal_set_clearing_method(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Rtn.clearing_method)
}

// float ytm = 16;
inline void ficc_Exch_Order_Rtn::clear_ytm() {
  ytm_ = 0;
}
inline float ficc_Exch_Order_Rtn::_internal_ytm() const {
  return ytm_;
}
inline float ficc_Exch_Order_Rtn::ytm() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Rtn.ytm)
  return _internal_ytm();
}
inline void ficc_Exch_Order_Rtn::_internal_set_ytm(float value) {
  
  ytm_ = value;
}
inline void ficc_Exch_Order_Rtn::set_ytm(float value) {
  _internal_set_ytm(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Rtn.ytm)
}

// float strike_yeild = 17;
inline void ficc_Exch_Order_Rtn::clear_strike_yeild() {
  strike_yeild_ = 0;
}
inline float ficc_Exch_Order_Rtn::_internal_strike_yeild() const {
  return strike_yeild_;
}
inline float ficc_Exch_Order_Rtn::strike_yeild() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Rtn.strike_yeild)
  return _internal_strike_yeild();
}
inline void ficc_Exch_Order_Rtn::_internal_set_strike_yeild(float value) {
  
  strike_yeild_ = value;
}
inline void ficc_Exch_Order_Rtn::set_strike_yeild(float value) {
  _internal_set_strike_yeild(value);
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Rtn.strike_yeild)
}

// string fund_acct = 18;
inline void ficc_Exch_Order_Rtn::clear_fund_acct() {
  fund_acct_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Rtn::fund_acct() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Rtn.fund_acct)
  return _internal_fund_acct();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Rtn::set_fund_acct(ArgT0&& arg0, ArgT... args) {
 
 fund_acct_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Rtn.fund_acct)
}
inline std::string* ficc_Exch_Order_Rtn::mutable_fund_acct() {
  std::string* _s = _internal_mutable_fund_acct();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Rtn.fund_acct)
  return _s;
}
inline const std::string& ficc_Exch_Order_Rtn::_internal_fund_acct() const {
  return fund_acct_.Get();
}
inline void ficc_Exch_Order_Rtn::_internal_set_fund_acct(const std::string& value) {
  
  fund_acct_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Rtn::_internal_mutable_fund_acct() {
  
  return fund_acct_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Rtn::release_fund_acct() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Rtn.fund_acct)
  return fund_acct_.Release();
}
inline void ficc_Exch_Order_Rtn::set_allocated_fund_acct(std::string* fund_acct) {
  if (fund_acct != nullptr) {
    
  } else {
    
  }
  fund_acct_.SetAllocated(fund_acct, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fund_acct_.IsDefault()) {
    fund_acct_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Rtn.fund_acct)
}

// string trade_id = 19;
inline void ficc_Exch_Order_Rtn::clear_trade_id() {
  trade_id_.ClearToEmpty();
}
inline const std::string& ficc_Exch_Order_Rtn::trade_id() const {
  // @@protoc_insertion_point(field_get:ficc_message.ficc_Exch_Order_Rtn.trade_id)
  return _internal_trade_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ficc_Exch_Order_Rtn::set_trade_id(ArgT0&& arg0, ArgT... args) {
 
 trade_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ficc_message.ficc_Exch_Order_Rtn.trade_id)
}
inline std::string* ficc_Exch_Order_Rtn::mutable_trade_id() {
  std::string* _s = _internal_mutable_trade_id();
  // @@protoc_insertion_point(field_mutable:ficc_message.ficc_Exch_Order_Rtn.trade_id)
  return _s;
}
inline const std::string& ficc_Exch_Order_Rtn::_internal_trade_id() const {
  return trade_id_.Get();
}
inline void ficc_Exch_Order_Rtn::_internal_set_trade_id(const std::string& value) {
  
  trade_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Rtn::_internal_mutable_trade_id() {
  
  return trade_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ficc_Exch_Order_Rtn::release_trade_id() {
  // @@protoc_insertion_point(field_release:ficc_message.ficc_Exch_Order_Rtn.trade_id)
  return trade_id_.Release();
}
inline void ficc_Exch_Order_Rtn::set_allocated_trade_id(std::string* trade_id) {
  if (trade_id != nullptr) {
    
  } else {
    
  }
  trade_id_.SetAllocated(trade_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trade_id_.IsDefault()) {
    trade_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ficc_message.ficc_Exch_Order_Rtn.trade_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ficc_message

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ficc_2eproto
