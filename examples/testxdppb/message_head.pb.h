// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_head.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_5fhead_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_5fhead_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_5fhead_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_5fhead_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_5fhead_2eproto;
namespace message_head {
class ficc_public;
struct ficc_publicDefaultTypeInternal;
extern ficc_publicDefaultTypeInternal _ficc_public_default_instance_;
class head;
struct headDefaultTypeInternal;
extern headDefaultTypeInternal _head_default_instance_;
}  // namespace message_head
PROTOBUF_NAMESPACE_OPEN
template<> ::message_head::ficc_public* Arena::CreateMaybeMessage<::message_head::ficc_public>(Arena*);
template<> ::message_head::head* Arena::CreateMaybeMessage<::message_head::head>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace message_head {

// ===================================================================

class head final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message_head.head) */ {
 public:
  inline head() : head(nullptr) {}
  ~head() override;
  explicit PROTOBUF_CONSTEXPR head(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  head(const head& from);
  head(head&& from) noexcept
    : head() {
    *this = ::std::move(from);
  }

  inline head& operator=(const head& from) {
    CopyFrom(from);
    return *this;
  }
  inline head& operator=(head&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const head& default_instance() {
    return *internal_default_instance();
  }
  static inline const head* internal_default_instance() {
    return reinterpret_cast<const head*>(
               &_head_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(head& a, head& b) {
    a.Swap(&b);
  }
  inline void Swap(head* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(head* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  head* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<head>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const head& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const head& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(head* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message_head.head";
  }
  protected:
  explicit head(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgTypeFieldNumber = 1,
    kSenderCompIdFieldNumber = 2,
    kTargetCompIdFieldNumber = 3,
    kSendingTimeFieldNumber = 5,
    kTokenFieldNumber = 6,
    kRespDestFieldNumber = 7,
    kMsgSeqNumFieldNumber = 4,
  };
  // string msg_type = 1;
  void clear_msg_type();
  const std::string& msg_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_type();
  PROTOBUF_NODISCARD std::string* release_msg_type();
  void set_allocated_msg_type(std::string* msg_type);
  private:
  const std::string& _internal_msg_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_type(const std::string& value);
  std::string* _internal_mutable_msg_type();
  public:

  // string sender_comp_id = 2;
  void clear_sender_comp_id();
  const std::string& sender_comp_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender_comp_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender_comp_id();
  PROTOBUF_NODISCARD std::string* release_sender_comp_id();
  void set_allocated_sender_comp_id(std::string* sender_comp_id);
  private:
  const std::string& _internal_sender_comp_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_comp_id(const std::string& value);
  std::string* _internal_mutable_sender_comp_id();
  public:

  // string target_comp_id = 3;
  void clear_target_comp_id();
  const std::string& target_comp_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_comp_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_comp_id();
  PROTOBUF_NODISCARD std::string* release_target_comp_id();
  void set_allocated_target_comp_id(std::string* target_comp_id);
  private:
  const std::string& _internal_target_comp_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_comp_id(const std::string& value);
  std::string* _internal_mutable_target_comp_id();
  public:

  // string sending_time = 5;
  void clear_sending_time();
  const std::string& sending_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sending_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sending_time();
  PROTOBUF_NODISCARD std::string* release_sending_time();
  void set_allocated_sending_time(std::string* sending_time);
  private:
  const std::string& _internal_sending_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sending_time(const std::string& value);
  std::string* _internal_mutable_sending_time();
  public:

  // string token = 6;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string resp_dest = 7;
  void clear_resp_dest();
  const std::string& resp_dest() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resp_dest(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resp_dest();
  PROTOBUF_NODISCARD std::string* release_resp_dest();
  void set_allocated_resp_dest(std::string* resp_dest);
  private:
  const std::string& _internal_resp_dest() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resp_dest(const std::string& value);
  std::string* _internal_mutable_resp_dest();
  public:

  // int64 msg_seq_num = 4;
  void clear_msg_seq_num();
  int64_t msg_seq_num() const;
  void set_msg_seq_num(int64_t value);
  private:
  int64_t _internal_msg_seq_num() const;
  void _internal_set_msg_seq_num(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:message_head.head)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_comp_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_comp_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sending_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resp_dest_;
  int64_t msg_seq_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fhead_2eproto;
};
// -------------------------------------------------------------------

class ficc_public final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message_head.ficc_public) */ {
 public:
  inline ficc_public() : ficc_public(nullptr) {}
  ~ficc_public() override;
  explicit PROTOBUF_CONSTEXPR ficc_public(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ficc_public(const ficc_public& from);
  ficc_public(ficc_public&& from) noexcept
    : ficc_public() {
    *this = ::std::move(from);
  }

  inline ficc_public& operator=(const ficc_public& from) {
    CopyFrom(from);
    return *this;
  }
  inline ficc_public& operator=(ficc_public&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ficc_public& default_instance() {
    return *internal_default_instance();
  }
  static inline const ficc_public* internal_default_instance() {
    return reinterpret_cast<const ficc_public*>(
               &_ficc_public_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ficc_public& a, ficc_public& b) {
    a.Swap(&b);
  }
  inline void Swap(ficc_public* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ficc_public* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ficc_public* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ficc_public>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ficc_public& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ficc_public& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ficc_public* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message_head.ficc_public";
  }
  protected:
  explicit ficc_public(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadFieldNumber = 1,
  };
  // .message_head.head head = 1;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  const ::message_head::head& head() const;
  PROTOBUF_NODISCARD ::message_head::head* release_head();
  ::message_head::head* mutable_head();
  void set_allocated_head(::message_head::head* head);
  private:
  const ::message_head::head& _internal_head() const;
  ::message_head::head* _internal_mutable_head();
  public:
  void unsafe_arena_set_allocated_head(
      ::message_head::head* head);
  ::message_head::head* unsafe_arena_release_head();

  // @@protoc_insertion_point(class_scope:message_head.ficc_public)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::message_head::head* head_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fhead_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// head

// string msg_type = 1;
inline void head::clear_msg_type() {
  msg_type_.ClearToEmpty();
}
inline const std::string& head::msg_type() const {
  // @@protoc_insertion_point(field_get:message_head.head.msg_type)
  return _internal_msg_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void head::set_msg_type(ArgT0&& arg0, ArgT... args) {
 
 msg_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message_head.head.msg_type)
}
inline std::string* head::mutable_msg_type() {
  std::string* _s = _internal_mutable_msg_type();
  // @@protoc_insertion_point(field_mutable:message_head.head.msg_type)
  return _s;
}
inline const std::string& head::_internal_msg_type() const {
  return msg_type_.Get();
}
inline void head::_internal_set_msg_type(const std::string& value) {
  
  msg_type_.Set(value, GetArenaForAllocation());
}
inline std::string* head::_internal_mutable_msg_type() {
  
  return msg_type_.Mutable(GetArenaForAllocation());
}
inline std::string* head::release_msg_type() {
  // @@protoc_insertion_point(field_release:message_head.head.msg_type)
  return msg_type_.Release();
}
inline void head::set_allocated_msg_type(std::string* msg_type) {
  if (msg_type != nullptr) {
    
  } else {
    
  }
  msg_type_.SetAllocated(msg_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_type_.IsDefault()) {
    msg_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message_head.head.msg_type)
}

// string sender_comp_id = 2;
inline void head::clear_sender_comp_id() {
  sender_comp_id_.ClearToEmpty();
}
inline const std::string& head::sender_comp_id() const {
  // @@protoc_insertion_point(field_get:message_head.head.sender_comp_id)
  return _internal_sender_comp_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void head::set_sender_comp_id(ArgT0&& arg0, ArgT... args) {
 
 sender_comp_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message_head.head.sender_comp_id)
}
inline std::string* head::mutable_sender_comp_id() {
  std::string* _s = _internal_mutable_sender_comp_id();
  // @@protoc_insertion_point(field_mutable:message_head.head.sender_comp_id)
  return _s;
}
inline const std::string& head::_internal_sender_comp_id() const {
  return sender_comp_id_.Get();
}
inline void head::_internal_set_sender_comp_id(const std::string& value) {
  
  sender_comp_id_.Set(value, GetArenaForAllocation());
}
inline std::string* head::_internal_mutable_sender_comp_id() {
  
  return sender_comp_id_.Mutable(GetArenaForAllocation());
}
inline std::string* head::release_sender_comp_id() {
  // @@protoc_insertion_point(field_release:message_head.head.sender_comp_id)
  return sender_comp_id_.Release();
}
inline void head::set_allocated_sender_comp_id(std::string* sender_comp_id) {
  if (sender_comp_id != nullptr) {
    
  } else {
    
  }
  sender_comp_id_.SetAllocated(sender_comp_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sender_comp_id_.IsDefault()) {
    sender_comp_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message_head.head.sender_comp_id)
}

// string target_comp_id = 3;
inline void head::clear_target_comp_id() {
  target_comp_id_.ClearToEmpty();
}
inline const std::string& head::target_comp_id() const {
  // @@protoc_insertion_point(field_get:message_head.head.target_comp_id)
  return _internal_target_comp_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void head::set_target_comp_id(ArgT0&& arg0, ArgT... args) {
 
 target_comp_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message_head.head.target_comp_id)
}
inline std::string* head::mutable_target_comp_id() {
  std::string* _s = _internal_mutable_target_comp_id();
  // @@protoc_insertion_point(field_mutable:message_head.head.target_comp_id)
  return _s;
}
inline const std::string& head::_internal_target_comp_id() const {
  return target_comp_id_.Get();
}
inline void head::_internal_set_target_comp_id(const std::string& value) {
  
  target_comp_id_.Set(value, GetArenaForAllocation());
}
inline std::string* head::_internal_mutable_target_comp_id() {
  
  return target_comp_id_.Mutable(GetArenaForAllocation());
}
inline std::string* head::release_target_comp_id() {
  // @@protoc_insertion_point(field_release:message_head.head.target_comp_id)
  return target_comp_id_.Release();
}
inline void head::set_allocated_target_comp_id(std::string* target_comp_id) {
  if (target_comp_id != nullptr) {
    
  } else {
    
  }
  target_comp_id_.SetAllocated(target_comp_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (target_comp_id_.IsDefault()) {
    target_comp_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message_head.head.target_comp_id)
}

// int64 msg_seq_num = 4;
inline void head::clear_msg_seq_num() {
  msg_seq_num_ = int64_t{0};
}
inline int64_t head::_internal_msg_seq_num() const {
  return msg_seq_num_;
}
inline int64_t head::msg_seq_num() const {
  // @@protoc_insertion_point(field_get:message_head.head.msg_seq_num)
  return _internal_msg_seq_num();
}
inline void head::_internal_set_msg_seq_num(int64_t value) {
  
  msg_seq_num_ = value;
}
inline void head::set_msg_seq_num(int64_t value) {
  _internal_set_msg_seq_num(value);
  // @@protoc_insertion_point(field_set:message_head.head.msg_seq_num)
}

// string sending_time = 5;
inline void head::clear_sending_time() {
  sending_time_.ClearToEmpty();
}
inline const std::string& head::sending_time() const {
  // @@protoc_insertion_point(field_get:message_head.head.sending_time)
  return _internal_sending_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void head::set_sending_time(ArgT0&& arg0, ArgT... args) {
 
 sending_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message_head.head.sending_time)
}
inline std::string* head::mutable_sending_time() {
  std::string* _s = _internal_mutable_sending_time();
  // @@protoc_insertion_point(field_mutable:message_head.head.sending_time)
  return _s;
}
inline const std::string& head::_internal_sending_time() const {
  return sending_time_.Get();
}
inline void head::_internal_set_sending_time(const std::string& value) {
  
  sending_time_.Set(value, GetArenaForAllocation());
}
inline std::string* head::_internal_mutable_sending_time() {
  
  return sending_time_.Mutable(GetArenaForAllocation());
}
inline std::string* head::release_sending_time() {
  // @@protoc_insertion_point(field_release:message_head.head.sending_time)
  return sending_time_.Release();
}
inline void head::set_allocated_sending_time(std::string* sending_time) {
  if (sending_time != nullptr) {
    
  } else {
    
  }
  sending_time_.SetAllocated(sending_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sending_time_.IsDefault()) {
    sending_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message_head.head.sending_time)
}

// string token = 6;
inline void head::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& head::token() const {
  // @@protoc_insertion_point(field_get:message_head.head.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void head::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message_head.head.token)
}
inline std::string* head::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:message_head.head.token)
  return _s;
}
inline const std::string& head::_internal_token() const {
  return token_.Get();
}
inline void head::_internal_set_token(const std::string& value) {
  
  token_.Set(value, GetArenaForAllocation());
}
inline std::string* head::_internal_mutable_token() {
  
  return token_.Mutable(GetArenaForAllocation());
}
inline std::string* head::release_token() {
  // @@protoc_insertion_point(field_release:message_head.head.token)
  return token_.Release();
}
inline void head::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault()) {
    token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message_head.head.token)
}

// string resp_dest = 7;
inline void head::clear_resp_dest() {
  resp_dest_.ClearToEmpty();
}
inline const std::string& head::resp_dest() const {
  // @@protoc_insertion_point(field_get:message_head.head.resp_dest)
  return _internal_resp_dest();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void head::set_resp_dest(ArgT0&& arg0, ArgT... args) {
 
 resp_dest_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message_head.head.resp_dest)
}
inline std::string* head::mutable_resp_dest() {
  std::string* _s = _internal_mutable_resp_dest();
  // @@protoc_insertion_point(field_mutable:message_head.head.resp_dest)
  return _s;
}
inline const std::string& head::_internal_resp_dest() const {
  return resp_dest_.Get();
}
inline void head::_internal_set_resp_dest(const std::string& value) {
  
  resp_dest_.Set(value, GetArenaForAllocation());
}
inline std::string* head::_internal_mutable_resp_dest() {
  
  return resp_dest_.Mutable(GetArenaForAllocation());
}
inline std::string* head::release_resp_dest() {
  // @@protoc_insertion_point(field_release:message_head.head.resp_dest)
  return resp_dest_.Release();
}
inline void head::set_allocated_resp_dest(std::string* resp_dest) {
  if (resp_dest != nullptr) {
    
  } else {
    
  }
  resp_dest_.SetAllocated(resp_dest, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (resp_dest_.IsDefault()) {
    resp_dest_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message_head.head.resp_dest)
}

// -------------------------------------------------------------------

// ficc_public

// .message_head.head head = 1;
inline bool ficc_public::_internal_has_head() const {
  return this != internal_default_instance() && head_ != nullptr;
}
inline bool ficc_public::has_head() const {
  return _internal_has_head();
}
inline void ficc_public::clear_head() {
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
}
inline const ::message_head::head& ficc_public::_internal_head() const {
  const ::message_head::head* p = head_;
  return p != nullptr ? *p : reinterpret_cast<const ::message_head::head&>(
      ::message_head::_head_default_instance_);
}
inline const ::message_head::head& ficc_public::head() const {
  // @@protoc_insertion_point(field_get:message_head.ficc_public.head)
  return _internal_head();
}
inline void ficc_public::unsafe_arena_set_allocated_head(
    ::message_head::head* head) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message_head.ficc_public.head)
}
inline ::message_head::head* ficc_public::release_head() {
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message_head::head* ficc_public::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_release:message_head.ficc_public.head)
  
  ::message_head::head* temp = head_;
  head_ = nullptr;
  return temp;
}
inline ::message_head::head* ficc_public::_internal_mutable_head() {
  
  if (head_ == nullptr) {
    auto* p = CreateMaybeMessage<::message_head::head>(GetArenaForAllocation());
    head_ = p;
  }
  return head_;
}
inline ::message_head::head* ficc_public::mutable_head() {
  ::message_head::head* _msg = _internal_mutable_head();
  // @@protoc_insertion_point(field_mutable:message_head.ficc_public.head)
  return _msg;
}
inline void ficc_public::set_allocated_head(::message_head::head* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete head_;
  }
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(head);
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:message_head.ficc_public.head)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message_head

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_5fhead_2eproto
