// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_head.proto

#include "message_head.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace message_head {
PROTOBUF_CONSTEXPR head::head(
    ::_pbi::ConstantInitialized)
  : msg_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , sender_comp_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , target_comp_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , sending_time_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , token_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , resp_dest_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , msg_seq_num_(int64_t{0}){}
struct headDefaultTypeInternal {
  PROTOBUF_CONSTEXPR headDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~headDefaultTypeInternal() {}
  union {
    head _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 headDefaultTypeInternal _head_default_instance_;
PROTOBUF_CONSTEXPR ficc_public::ficc_public(
    ::_pbi::ConstantInitialized)
  : head_(nullptr){}
struct ficc_publicDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ficc_publicDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ficc_publicDefaultTypeInternal() {}
  union {
    ficc_public _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ficc_publicDefaultTypeInternal _ficc_public_default_instance_;
}  // namespace message_head
static ::_pb::Metadata file_level_metadata_message_5fhead_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_message_5fhead_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_message_5fhead_2eproto = nullptr;

const uint32_t TableStruct_message_5fhead_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message_head::head, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message_head::head, msg_type_),
  PROTOBUF_FIELD_OFFSET(::message_head::head, sender_comp_id_),
  PROTOBUF_FIELD_OFFSET(::message_head::head, target_comp_id_),
  PROTOBUF_FIELD_OFFSET(::message_head::head, msg_seq_num_),
  PROTOBUF_FIELD_OFFSET(::message_head::head, sending_time_),
  PROTOBUF_FIELD_OFFSET(::message_head::head, token_),
  PROTOBUF_FIELD_OFFSET(::message_head::head, resp_dest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message_head::ficc_public, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message_head::ficc_public, head_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::message_head::head)},
  { 13, -1, -1, sizeof(::message_head::ficc_public)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::message_head::_head_default_instance_._instance,
  &::message_head::_ficc_public_default_instance_._instance,
};

const char descriptor_table_protodef_message_5fhead_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022message_head.proto\022\014message_head\"\225\001\n\004h"
  "ead\022\020\n\010msg_type\030\001 \001(\t\022\026\n\016sender_comp_id\030"
  "\002 \001(\t\022\026\n\016target_comp_id\030\003 \001(\t\022\023\n\013msg_seq"
  "_num\030\004 \001(\003\022\024\n\014sending_time\030\005 \001(\t\022\r\n\005toke"
  "n\030\006 \001(\t\022\021\n\tresp_dest\030\007 \001(\t\"/\n\013ficc_publi"
  "c\022 \n\004head\030\001 \001(\0132\022.message_head.headB.\n\025c"
  "om.lhhj.common.protoB\025FICCProtobufferHea"
  "derb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_message_5fhead_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_message_5fhead_2eproto = {
    false, false, 291, descriptor_table_protodef_message_5fhead_2eproto,
    "message_head.proto",
    &descriptor_table_message_5fhead_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_message_5fhead_2eproto::offsets,
    file_level_metadata_message_5fhead_2eproto, file_level_enum_descriptors_message_5fhead_2eproto,
    file_level_service_descriptors_message_5fhead_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_message_5fhead_2eproto_getter() {
  return &descriptor_table_message_5fhead_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_message_5fhead_2eproto(&descriptor_table_message_5fhead_2eproto);
namespace message_head {

// ===================================================================

class head::_Internal {
 public:
};

head::head(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:message_head.head)
}
head::head(const head& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg_type().empty()) {
    msg_type_.Set(from._internal_msg_type(), 
      GetArenaForAllocation());
  }
  sender_comp_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sender_comp_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender_comp_id().empty()) {
    sender_comp_id_.Set(from._internal_sender_comp_id(), 
      GetArenaForAllocation());
  }
  target_comp_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    target_comp_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target_comp_id().empty()) {
    target_comp_id_.Set(from._internal_target_comp_id(), 
      GetArenaForAllocation());
  }
  sending_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sending_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sending_time().empty()) {
    sending_time_.Set(from._internal_sending_time(), 
      GetArenaForAllocation());
  }
  token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    token_.Set(from._internal_token(), 
      GetArenaForAllocation());
  }
  resp_dest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    resp_dest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_resp_dest().empty()) {
    resp_dest_.Set(from._internal_resp_dest(), 
      GetArenaForAllocation());
  }
  msg_seq_num_ = from.msg_seq_num_;
  // @@protoc_insertion_point(copy_constructor:message_head.head)
}

inline void head::SharedCtor() {
msg_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sender_comp_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sender_comp_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
target_comp_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  target_comp_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sending_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sending_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
token_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
resp_dest_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  resp_dest_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
msg_seq_num_ = int64_t{0};
}

head::~head() {
  // @@protoc_insertion_point(destructor:message_head.head)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void head::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_type_.Destroy();
  sender_comp_id_.Destroy();
  target_comp_id_.Destroy();
  sending_time_.Destroy();
  token_.Destroy();
  resp_dest_.Destroy();
}

void head::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void head::Clear() {
// @@protoc_insertion_point(message_clear_start:message_head.head)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_type_.ClearToEmpty();
  sender_comp_id_.ClearToEmpty();
  target_comp_id_.ClearToEmpty();
  sending_time_.ClearToEmpty();
  token_.ClearToEmpty();
  resp_dest_.ClearToEmpty();
  msg_seq_num_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* head::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msg_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message_head.head.msg_type"));
        } else
          goto handle_unusual;
        continue;
      // string sender_comp_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sender_comp_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message_head.head.sender_comp_id"));
        } else
          goto handle_unusual;
        continue;
      // string target_comp_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_target_comp_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message_head.head.target_comp_id"));
        } else
          goto handle_unusual;
        continue;
      // int64 msg_seq_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          msg_seq_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sending_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sending_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message_head.head.sending_time"));
        } else
          goto handle_unusual;
        continue;
      // string token = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message_head.head.token"));
        } else
          goto handle_unusual;
        continue;
      // string resp_dest = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_resp_dest();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message_head.head.resp_dest"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* head::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message_head.head)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg_type = 1;
  if (!this->_internal_msg_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg_type().data(), static_cast<int>(this->_internal_msg_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message_head.head.msg_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg_type(), target);
  }

  // string sender_comp_id = 2;
  if (!this->_internal_sender_comp_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender_comp_id().data(), static_cast<int>(this->_internal_sender_comp_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message_head.head.sender_comp_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sender_comp_id(), target);
  }

  // string target_comp_id = 3;
  if (!this->_internal_target_comp_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_comp_id().data(), static_cast<int>(this->_internal_target_comp_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message_head.head.target_comp_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_target_comp_id(), target);
  }

  // int64 msg_seq_num = 4;
  if (this->_internal_msg_seq_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_msg_seq_num(), target);
  }

  // string sending_time = 5;
  if (!this->_internal_sending_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sending_time().data(), static_cast<int>(this->_internal_sending_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message_head.head.sending_time");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sending_time(), target);
  }

  // string token = 6;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message_head.head.token");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_token(), target);
  }

  // string resp_dest = 7;
  if (!this->_internal_resp_dest().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resp_dest().data(), static_cast<int>(this->_internal_resp_dest().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message_head.head.resp_dest");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_resp_dest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message_head.head)
  return target;
}

size_t head::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message_head.head)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg_type = 1;
  if (!this->_internal_msg_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg_type());
  }

  // string sender_comp_id = 2;
  if (!this->_internal_sender_comp_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender_comp_id());
  }

  // string target_comp_id = 3;
  if (!this->_internal_target_comp_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_comp_id());
  }

  // string sending_time = 5;
  if (!this->_internal_sending_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sending_time());
  }

  // string token = 6;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string resp_dest = 7;
  if (!this->_internal_resp_dest().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resp_dest());
  }

  // int64 msg_seq_num = 4;
  if (this->_internal_msg_seq_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_msg_seq_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData head::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    head::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*head::GetClassData() const { return &_class_data_; }

void head::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<head *>(to)->MergeFrom(
      static_cast<const head &>(from));
}


void head::MergeFrom(const head& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message_head.head)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg_type().empty()) {
    _internal_set_msg_type(from._internal_msg_type());
  }
  if (!from._internal_sender_comp_id().empty()) {
    _internal_set_sender_comp_id(from._internal_sender_comp_id());
  }
  if (!from._internal_target_comp_id().empty()) {
    _internal_set_target_comp_id(from._internal_target_comp_id());
  }
  if (!from._internal_sending_time().empty()) {
    _internal_set_sending_time(from._internal_sending_time());
  }
  if (!from._internal_token().empty()) {
    _internal_set_token(from._internal_token());
  }
  if (!from._internal_resp_dest().empty()) {
    _internal_set_resp_dest(from._internal_resp_dest());
  }
  if (from._internal_msg_seq_num() != 0) {
    _internal_set_msg_seq_num(from._internal_msg_seq_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void head::CopyFrom(const head& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message_head.head)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool head::IsInitialized() const {
  return true;
}

void head::InternalSwap(head* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &msg_type_, lhs_arena,
      &other->msg_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sender_comp_id_, lhs_arena,
      &other->sender_comp_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &target_comp_id_, lhs_arena,
      &other->target_comp_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sending_time_, lhs_arena,
      &other->sending_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &token_, lhs_arena,
      &other->token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &resp_dest_, lhs_arena,
      &other->resp_dest_, rhs_arena
  );
  swap(msg_seq_num_, other->msg_seq_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata head::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fhead_2eproto_getter, &descriptor_table_message_5fhead_2eproto_once,
      file_level_metadata_message_5fhead_2eproto[0]);
}

// ===================================================================

class ficc_public::_Internal {
 public:
  static const ::message_head::head& head(const ficc_public* msg);
};

const ::message_head::head&
ficc_public::_Internal::head(const ficc_public* msg) {
  return *msg->head_;
}
ficc_public::ficc_public(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:message_head.ficc_public)
}
ficc_public::ficc_public(const ficc_public& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_head()) {
    head_ = new ::message_head::head(*from.head_);
  } else {
    head_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:message_head.ficc_public)
}

inline void ficc_public::SharedCtor() {
head_ = nullptr;
}

ficc_public::~ficc_public() {
  // @@protoc_insertion_point(destructor:message_head.ficc_public)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ficc_public::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete head_;
}

void ficc_public::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ficc_public::Clear() {
// @@protoc_insertion_point(message_clear_start:message_head.ficc_public)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ficc_public::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message_head.head head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ficc_public::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message_head.ficc_public)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message_head.ficc_public)
  return target;
}

size_t ficc_public::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message_head.ficc_public)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message_head.head head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ficc_public::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ficc_public::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ficc_public::GetClassData() const { return &_class_data_; }

void ficc_public::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ficc_public *>(to)->MergeFrom(
      static_cast<const ficc_public &>(from));
}


void ficc_public::MergeFrom(const ficc_public& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message_head.ficc_public)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_head()) {
    _internal_mutable_head()->::message_head::head::MergeFrom(from._internal_head());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ficc_public::CopyFrom(const ficc_public& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message_head.ficc_public)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ficc_public::IsInitialized() const {
  return true;
}

void ficc_public::InternalSwap(ficc_public* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(head_, other->head_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ficc_public::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fhead_2eproto_getter, &descriptor_table_message_5fhead_2eproto_once,
      file_level_metadata_message_5fhead_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace message_head
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::message_head::head*
Arena::CreateMaybeMessage< ::message_head::head >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message_head::head >(arena);
}
template<> PROTOBUF_NOINLINE ::message_head::ficc_public*
Arena::CreateMaybeMessage< ::message_head::ficc_public >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message_head::ficc_public >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
